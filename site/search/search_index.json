{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AgentBridge Documentation","text":"<p>AgentBridge is a framework for building applications that can be controlled by AI agents. It provides a unified interface for exposing functionality to AI systems across different platforms and frameworks.</p>"},{"location":"#what-is-agentbridge","title":"What is AgentBridge?","text":"<p>AgentBridge is a comprehensive SDK that enables seamless integration between AI agents and your applications. It provides a structured way to:</p> <ul> <li>Expose application functionality to AI agents through a standardized API</li> <li>Allow AI agents to interact with UI components</li> <li>Maintain consistent behavior across different platforms and frameworks</li> <li>Handle authentication, permissions, and context management</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Cross-Platform Support: Works on web (React, Angular) and mobile (React Native, Flutter) applications</li> <li>Component Registry: Register UI components that can be controlled by AI agents</li> <li>Function Registry: Expose application functionality as callable functions</li> <li>Type System: Define and validate function parameters and return values</li> <li>Authentication &amp; Authorization: Control access to sensitive functionality</li> <li>Context Management: Provide context to AI agents about the application state</li> <li>Adapter Architecture: Easy to extend to support new platforms and frameworks</li> </ul>"},{"location":"#why-agentbridge","title":"Why AgentBridge?","text":"<p>In the rapidly evolving landscape of AI-powered applications, developers need a consistent way to expose functionality to AI agents. AgentBridge solves this problem by providing:</p> <ol> <li>Consistency: The same API works across different platforms and frameworks</li> <li>Simplicity: Easy to integrate into existing applications</li> <li>Extensibility: Designed to be extended to support new platforms and frameworks</li> <li>Security: Built-in authentication and authorization controls</li> <li>Performance: Optimized for high-performance applications</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with AgentBridge, follow these steps:</p> <ol> <li>Installation: Learn how to install AgentBridge</li> <li>Quick Start: Build your first AI-enabled application</li> </ol>"},{"location":"#resources","title":"Resources","text":"<ul> <li>GitHub Repository</li> <li>Example Applications</li> <li>Community Forum</li> </ul>"},{"location":"#license","title":"License","text":"<p>AgentBridge is released under the MIT License. </p>"},{"location":"advanced/authentication/","title":"Authentication","text":"<p>This page is under construction. It will contain documentation about Authentication in the Advanced section.</p>"},{"location":"advanced/authentication/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"advanced/custom-adapters/","title":"Custom Adapters","text":"<p>This page is under construction. It will contain documentation about Custom Adapters in the Advanced section.</p>"},{"location":"advanced/custom-adapters/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"advanced/error-handling/","title":"Error Handling","text":"<p>This page is under construction. It will contain documentation about Error Handling in the Advanced section.</p>"},{"location":"advanced/error-handling/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"advanced/mcp-integration/","title":"Model Context Protocols Integration Guide","text":"<p>This guide explains how to integrate Model Context Protocols (MCPs) with your AgentBridge application.</p>"},{"location":"advanced/mcp-integration/#overview","title":"Overview","text":"<p>Model Context Protocols provide standardized ways for AI models to discover and call functions in your application. AgentBridge supports these protocols through adapter components that translate between the framework's internal API and the protocol-specific formats.</p>"},{"location":"advanced/mcp-integration/#supported-mcp-implementations","title":"Supported MCP Implementations","text":"<p>AgentBridge supports the following Model Context Protocols:</p> <ul> <li>OpenAI Function Calling (ChatGPT, GPT-4)</li> <li>Anthropic Tool Use (Claude)</li> <li>Gemini Tools</li> </ul>"},{"location":"advanced/mcp-integration/#setup","title":"Setup","text":"<p>To set up MCP support in your application, you need to:</p> <ol> <li>Install the appropriate adapter packages</li> <li>Register the MCP adapters with AgentBridge</li> <li>Configure your application to expose the appropriate schemas</li> </ol>"},{"location":"advanced/mcp-integration/#installation","title":"Installation","text":"<pre><code># For npm/yarn\nnpm install @agentbridge/mcp-openai @agentbridge/mcp-anthropic @agentbridge/mcp-gemini\n\n# For Flutter\nflutter pub add agentbridge_mcp\n</code></pre>"},{"location":"advanced/mcp-integration/#basic-setup","title":"Basic Setup","text":"<pre><code>// JavaScript/TypeScript\nimport { AgentBridge } from '@agentbridge/core';\nimport { OpenAIMCPAdapter } from '@agentbridge/mcp-openai';\nimport { AnthropicMCPAdapter } from '@agentbridge/mcp-anthropic';\n\nconst agentBridge = new AgentBridge();\n\n// Register MCP adapters\nagentBridge.registerMCPAdapter('openai', new OpenAIMCPAdapter(agentBridge.registry));\nagentBridge.registerMCPAdapter('anthropic', new AnthropicMCPAdapter(agentBridge.registry));\n\n// For Flutter\n```dart\nimport 'package:agentbridge/agentbridge.dart';\nimport 'package:agentbridge_mcp/agentbridge_mcp.dart';\n\nvoid main() {\n  final agentBridge = AgentBridge();\n\n  // Register MCP adapters\n  agentBridge.registerMCPAdapter('openai', OpenAIMCPAdapter(agentBridge.registry));\n  agentBridge.registerMCPAdapter('anthropic', AnthropicMCPAdapter(agentBridge.registry));\n\n  runApp(MyApp());\n}\n</code></pre>"},{"location":"advanced/mcp-integration/#getting-schema-for-ai-models","title":"Getting Schema for AI Models","text":"<p>To get the function schema in the format required by a specific AI model:</p> <pre><code>// Get schema for OpenAI\nconst openaiSchema = agentBridge.getMCPSchema('openai');\n\n// Use in API call\nconst response = await openai.chat.completions.create({\n  model: \"gpt-4\",\n  messages: [{ role: \"user\", content: \"What's the weather like?\" }],\n  tools: openaiSchema.functions,\n});\n</code></pre>"},{"location":"advanced/mcp-integration/#handling-function-calls-from-ai-models","title":"Handling Function Calls from AI Models","text":"<p>When an AI model makes a function call through an MCP, you can handle it like this:</p> <pre><code>// For OpenAI\nconst functionCall = response.choices[0].message.tool_calls[0];\n\n// Process the call through AgentBridge's MCP adapter\nconst result = await agentBridge.handleMCPFunctionCall('openai', functionCall);\n\n// Send the result back to the AI model\n// ...\n</code></pre>"},{"location":"advanced/mcp-integration/#design-information-collection","title":"Design Information Collection","text":"<p>To enable AI agents to understand your UI structure, you need to collect design information:</p> <pre><code>// React example\nimport { ReactDesignInfoCollector } from '@agentbridge/react';\n\n// In your root component\nconst App = () =&gt; {\n  const designCollector = new ReactDesignInfoCollector();\n\n  useEffect(() =&gt; {\n    // Capture component tree after render\n    const componentTree = designCollector.captureComponentTree(rootElement);\n\n    // Register the design information with AgentBridge\n    agentBridge.registerDesignInfo(componentTree);\n  }, []);\n\n  // ...\n}\n</code></pre> <pre><code>// Flutter example\nimport 'package:agentbridge/design_collector.dart';\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() =&gt; _MyAppState();\n}\n\nclass _MyAppState extends State&lt;MyApp&gt; {\n  final designCollector = FlutterDesignInfoCollector();\n\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      // Capture component tree after first frame\n      final componentTree = designCollector.captureComponentTree(context);\n\n      // Register the design information with AgentBridge\n      AgentBridge.instance.registerDesignInfo(componentTree);\n    });\n  }\n\n  // ...\n}\n</code></pre>"},{"location":"advanced/mcp-integration/#exposing-component-structure-to-ai-agents","title":"Exposing Component Structure to AI Agents","text":"<p>To allow AI agents to discover and interact with UI components:</p> <pre><code>// Register a function to get UI components\nagentBridge.registerFunction({\n  name: 'getUIComponents',\n  description: 'Get information about the UI components in the application',\n  parameters: {},\n  handler: async () =&gt; {\n    // Return the component tree\n    return agentBridge.getComponentTree();\n  }\n});\n\n// Register a function to interact with a component\nagentBridge.registerFunction({\n  name: 'interactWithComponent',\n  description: 'Interact with a UI component by ID',\n  parameters: {\n    type: 'object',\n    properties: {\n      componentId: { \n        type: 'string',\n        description: 'ID of the component to interact with'\n      },\n      action: {\n        type: 'string',\n        description: 'Action to perform (click, input, etc.)'\n      },\n      value: {\n        type: 'any',\n        description: 'Value to set (for input components)'\n      }\n    },\n    required: ['componentId', 'action']\n  },\n  handler: async (params) =&gt; {\n    // Handle the interaction\n    return agentBridge.interactWithComponent(params.componentId, params.action, params.value);\n  }\n});\n</code></pre>"},{"location":"advanced/mcp-integration/#custom-mcp-adapters","title":"Custom MCP Adapters","text":"<p>You can create custom MCP adapters for other AI platforms:</p> <pre><code>import { MCPAdapter } from '@agentbridge/core';\n\nclass CustomMCPAdapter implements MCPAdapter {\n  constructor(private registry) {}\n\n  convertToMCPSchema(functionDef) {\n    // Convert function definition to your custom schema\n    return {\n      // Your custom schema\n    };\n  }\n\n  convertFromMCPCall(mcpCall) {\n    // Convert from your custom call format to AgentBridge format\n    return {\n      name: mcpCall.functionName,\n      params: mcpCall.args,\n      context: this.mapContext(mcpCall.context)\n    };\n  }\n\n  mapContext(context) {\n    // Map context\n    return {\n      // Mapped context\n    };\n  }\n\n  mapResponse(response) {\n    // Map response\n    return {\n      // Mapped response\n    };\n  }\n\n  getFunctionSchema() {\n    // Return complete schema for all functions\n    return {\n      // Your custom schema\n    };\n  }\n}\n\n// Register the custom adapter\nagentBridge.registerMCPAdapter('custom', new CustomMCPAdapter(agentBridge.registry));\n</code></pre>"},{"location":"advanced/mcp-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Schema Documentation: Ensure your function descriptions and parameter descriptions are clear and detailed</li> <li>Type Safety: Use specific types rather than \"any\" for better documentation in MCP schemas</li> <li>Context Handling: Maintain consistent context across function calls for better agent interactions</li> <li>Design Information: Regularly update design information when the UI changes</li> <li>Error Handling: Provide meaningful error responses that agents can understand and adapt to</li> </ol>"},{"location":"advanced/mcp-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"advanced/mcp-integration/#common-issues","title":"Common Issues","text":"<ul> <li>Schema Conversion Errors: Check that your function parameters follow the type system supported by the MCP</li> <li>Missing Design Information: Ensure design collection is triggered after component rendering</li> <li>Function Not Found: Verify that functions are registered before generating MCP schemas</li> <li>Context Mapping Failures: Check that context objects contain all required fields</li> </ul>"},{"location":"advanced/mcp-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Explore advanced MCP features in our MCP Advanced Guide</li> <li>Learn about UI Component Registration</li> <li>See Design Information Collection for more details on capturing UI structure </li> </ul>"},{"location":"core/api-reference/","title":"Api Reference","text":"<p>This page is under construction. It will contain documentation about Api Reference in the Core section.</p>"},{"location":"core/api-reference/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"core/function-registry/","title":"Function Registry","text":"<p>This page is under construction. It will contain documentation about Function Registry in the Core section.</p>"},{"location":"core/function-registry/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"core/overview/","title":"Overview","text":"<p>This page is under construction. It will contain documentation about Overview in the Core section.</p>"},{"location":"core/overview/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"core/type-system/","title":"Type System","text":"<p>This page is under construction. It will contain documentation about Type System in the Core section.</p>"},{"location":"core/type-system/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"development/architecture/","title":"AgentBridge Architecture","text":"<p>This document provides an overview of the AgentBridge framework architecture, explaining how the different components work together to enable AI agents to interact with applications.</p>"},{"location":"development/architecture/#overview","title":"Overview","text":"<p>AgentBridge is designed with a modular architecture that separates the core functionality from the platform-specific implementations. This allows for consistent behavior across different platforms and frameworks while enabling platform-specific optimizations.</p> <pre><code>graph TD\n    AgentBridge[AgentBridge Core] --&gt; Registry\n    AgentBridge --&gt; TypeSystem[Type System]\n    AgentBridge --&gt; AuthSystem[Authentication]\n\n    AgentBridge --&gt; FrameworkAdapter[Framework Adapter Interface]\n\n    FrameworkAdapter --&gt; ReactAdapter[React Adapter]\n    FrameworkAdapter --&gt; AngularAdapter[Angular Adapter]\n    FrameworkAdapter --&gt; ReactNativeAdapter[React Native Adapter]\n    FrameworkAdapter --&gt; FlutterAdapter[Flutter Adapter]\n\n    ReactAdapter --&gt; ReactComponents[React Components]\n    AngularAdapter --&gt; AngularComponents[Angular Components]\n    ReactNativeAdapter --&gt; RNComponents[React Native Components]\n    FlutterAdapter --&gt; FlutterComponents[Flutter Components]\n\n    AIAgent[AI Agent] --&gt; |Function Call| AgentBridge\n    AIAgent --&gt; |Component Interaction| FrameworkAdapter\n\n    Registry --&gt; FunctionDef[Function Definitions]\n\n    subgraph \"Application Layer\"\n        ReactComponents\n        AngularComponents\n        RNComponents\n        FlutterComponents\n    end\n\n    subgraph \"Adapter Layer\"\n        ReactAdapter\n        AngularAdapter\n        ReactNativeAdapter\n        FlutterAdapter\n    end\n\n    subgraph \"Core Layer\"\n        AgentBridge\n        Registry\n        TypeSystem\n        AuthSystem\n    end\n</code></pre>"},{"location":"development/architecture/#core-components","title":"Core Components","text":""},{"location":"development/architecture/#agentbridge","title":"AgentBridge","text":"<p>The <code>AgentBridge</code> class is the central component of the framework. It provides the following functionality:</p> <ul> <li>Function registration and execution</li> <li>Authentication and authorization</li> <li>Context management</li> <li>Type validation</li> <li>Error handling</li> </ul> <p>The core functionality is platform-agnostic and is used by all platform-specific adapters.</p>"},{"location":"development/architecture/#frameworkadapter","title":"FrameworkAdapter","text":"<p>The <code>FrameworkAdapter</code> interface defines the contract that all platform-specific adapters must implement. It includes methods for:</p> <ul> <li>Initializing the adapter</li> <li>Registering UI components</li> <li>Handling function calls</li> <li>Converting between different frameworks</li> </ul>"},{"location":"development/architecture/#registry","title":"Registry","text":"<p>The <code>Registry</code> class manages the registration and lookup of functions. It provides:</p> <ul> <li>Function registration</li> <li>Function lookup</li> <li>Authentication checks</li> <li>Rate limiting</li> </ul>"},{"location":"development/architecture/#type-system","title":"Type System","text":"<p>The type system provides validation for function parameters and return values. It ensures that functions are called with the correct parameters and that they return valid results.</p>"},{"location":"development/architecture/#adapter-architecture","title":"Adapter Architecture","text":"<p>Each supported platform has its own adapter that implements the <code>FrameworkAdapter</code> interface. The adapters provide platform-specific functionality while maintaining a consistent API.</p>"},{"location":"development/architecture/#react-adapter","title":"React Adapter","text":"<p>The React adapter (<code>ReactAdapter</code>) integrates AgentBridge with React applications. It provides:</p> <ul> <li>React-specific hooks and components</li> <li>Integration with React's component lifecycle</li> <li>Context-based state management</li> </ul>"},{"location":"development/architecture/#angular-adapter","title":"Angular Adapter","text":"<p>The Angular adapter (<code>AngularAdapter</code>) integrates AgentBridge with Angular applications. It provides:</p> <ul> <li>Angular services and components</li> <li>Integration with Angular's dependency injection</li> <li>Observable-based state management</li> </ul>"},{"location":"development/architecture/#react-native-adapter","title":"React Native Adapter","text":"<p>The React Native adapter extends the React adapter with mobile-specific functionality. It adds:</p> <ul> <li>Mobile device API access</li> <li>React Native component integration</li> <li>Mobile-specific context information</li> </ul>"},{"location":"development/architecture/#flutter-adapter","title":"Flutter Adapter","text":"<p>The Flutter adapter (<code>FlutterAdapter</code>) integrates AgentBridge with Flutter applications. It provides:</p> <ul> <li>Flutter widgets and services</li> <li>Integration with Flutter's widget lifecycle</li> <li>Mobile-specific functions</li> </ul>"},{"location":"development/architecture/#component-integration","title":"Component Integration","text":"<p>AgentBridge allows AI agents to interact with UI components through a component registry system.</p> <pre><code>sequenceDiagram\n    participant App as Application\n    participant Component as UI Component\n    participant Adapter as Framework Adapter\n    participant Bridge as AgentBridge\n    participant Agent as AI Agent\n\n    App-&gt;&gt;Component: Render Component\n    Component-&gt;&gt;Adapter: Register with ID and Type\n    Adapter-&gt;&gt;Bridge: Store Component Info\n\n    Agent-&gt;&gt;Bridge: Get Available Components\n    Bridge-&gt;&gt;Adapter: Retrieve Components\n    Adapter-&gt;&gt;Bridge: Return Component List\n    Bridge-&gt;&gt;Agent: Components with IDs and Types\n\n    Agent-&gt;&gt;Bridge: Call Function to Interact with Component\n    Bridge-&gt;&gt;Adapter: Handle Component Interaction\n    Adapter-&gt;&gt;Component: Update State/Trigger Event\n    Component-&gt;&gt;App: Re-render with New State\n</code></pre>"},{"location":"development/architecture/#component-registry","title":"Component Registry","text":"<p>The component registry tracks all registered UI components and their current state. It allows AI agents to:</p> <ul> <li>Discover available components</li> <li>Read component properties and state</li> <li>Update component state</li> <li>Trigger component events</li> </ul>"},{"location":"development/architecture/#component-registration-process","title":"Component Registration Process","text":"<ol> <li>A UI component (button, input, etc.) is rendered in the application</li> <li>The component registers itself with AgentBridge through the framework adapter</li> <li>The component provides its ID, type, and initial properties</li> <li>AgentBridge adds the component to the registry</li> </ol>"},{"location":"development/architecture/#component-interaction-process","title":"Component Interaction Process","text":"<ol> <li>An AI agent discovers available components through the <code>getComponents</code> function</li> <li>The agent selects a component to interact with based on its ID or type</li> <li>The agent calls a function to update the component's state or trigger an event</li> <li>The framework adapter handles the function call and updates the component</li> <li>The component re-renders with the updated state</li> </ol>"},{"location":"development/architecture/#function-calling-process","title":"Function Calling Process","text":"<p>When an AI agent calls a function through AgentBridge, the following process occurs:</p> <ol> <li>The agent sends a function call request with the function name, parameters, and context</li> <li>AgentBridge validates the request (authentication, parameters, rate limits, etc.)</li> <li>AgentBridge looks up the function in the registry</li> <li>The function is executed with the provided parameters and context</li> <li>The result is returned to the agent</li> </ol>"},{"location":"development/architecture/#context-management","title":"Context Management","text":"<p>AgentBridge provides context information to functions when they are called. This context includes:</p> <ul> <li>Agent information (ID, name, capabilities)</li> <li>User information (if authenticated)</li> <li>Application information (ID, environment)</li> <li>Request information (IP, timestamp, etc.)</li> </ul>"},{"location":"development/architecture/#security-model","title":"Security Model","text":"<p>AgentBridge includes several security features:</p>"},{"location":"development/architecture/#authentication","title":"Authentication","text":"<p>Functions can require authentication to be called. AgentBridge supports different authentication levels:</p> <ul> <li><code>public</code>: No authentication required</li> <li><code>user</code>: User authentication required</li> <li><code>admin</code>: Administrative privileges required</li> </ul>"},{"location":"development/architecture/#rate-limiting","title":"Rate Limiting","text":"<p>Functions can be rate-limited to prevent abuse. Rate limits can be set per function and include:</p> <ul> <li>Maximum number of requests</li> <li>Time window for rate limiting</li> <li>Scope of rate limiting (per user, per IP, global)</li> </ul>"},{"location":"development/architecture/#permissions","title":"Permissions","text":"<p>Functions can check permissions before executing. Permissions can be based on:</p> <ul> <li>User roles</li> <li>Custom permission logic</li> <li>Application-specific rules</li> </ul>"},{"location":"development/architecture/#error-handling","title":"Error Handling","text":"<p>AgentBridge provides structured error handling for function calls:</p> <ul> <li>Each function call returns a result object with success/error information</li> <li>Errors include a code, message, and optional details</li> <li>Execution metadata (duration, timestamps) is included in the result</li> </ul>"},{"location":"development/architecture/#cross-framework-interoperability","title":"Cross-Framework Interoperability","text":"<p>AgentBridge allows components from different frameworks to interact with each other through a common interface. This is achieved through:</p> <ul> <li>Framework adapters that implement a common interface</li> <li>A serialization format for component state</li> <li>Conversion functions for component properties</li> </ul>"},{"location":"development/architecture/#extension-points","title":"Extension Points","text":"<p>AgentBridge can be extended in several ways:</p> <ul> <li>Custom adapters for new frameworks</li> <li>Custom component types</li> <li>Custom function implementations</li> <li>Custom authentication providers</li> <li>Custom type validators</li> </ul>"},{"location":"development/architecture/#package-structure","title":"Package Structure","text":"<p>The AgentBridge framework is organized into the following packages:</p> <ul> <li><code>@agentbridge/core</code>: Core functionality, type system, registry</li> <li><code>@agentbridge/react</code>: React integration</li> <li><code>@agentbridge/angular</code>: Angular integration</li> <li><code>@agentbridge/react-native</code>: React Native integration</li> <li><code>agentbridge</code> (Flutter): Flutter integration</li> </ul>"},{"location":"development/architecture/#dependency-graph","title":"Dependency Graph","text":"<pre><code>graph LR\n    Core[\"@agentbridge/core\"]\n    React[\"@agentbridge/react\"]\n    Angular[\"@agentbridge/angular\"]\n    ReactNative[\"@agentbridge/react-native\"]\n    Flutter[\"agentbridge (Flutter)\"]\n\n    Core --&gt; React\n    Core --&gt; Angular\n    React --&gt; ReactNative\n\n    Flutter -.-&gt; |\"conceptual dependency\"| Core\n\n    classDef js fill:#f9f,stroke:#333,stroke-width:1px;\n    classDef dart fill:#9cf,stroke:#333,stroke-width:1px;\n\n    class Core,React,Angular,ReactNative js;\n    class Flutter dart;\n</code></pre>"},{"location":"development/architecture/#performance-considerations","title":"Performance Considerations","text":"<p>AgentBridge is designed with performance in mind:</p> <ul> <li>Component state updates are optimized to minimize re-renders</li> <li>Function calls are validated early to prevent unnecessary execution</li> <li>The registry uses efficient lookup mechanisms</li> <li>Adapters use platform-specific optimizations</li> </ul>"},{"location":"development/architecture/#testing-strategy","title":"Testing Strategy","text":"<p>AgentBridge can be tested at different levels:</p> <ul> <li>Unit tests for core functionality</li> <li>Component tests for UI components</li> <li>Integration tests for function calling</li> <li>End-to-end tests for AI agent interactions</li> </ul>"},{"location":"development/architecture/#deployment-architecture","title":"Deployment Architecture","text":"<p>The AgentBridge packages can be deployed in several configurations, depending on the application's requirements.</p> <pre><code>graph TD\n    subgraph \"Package Registry\"\n        NPM[\"npm Registry&lt;br&gt;(@agentbridge/*)\"]\n        PubDev[\"pub.dev&lt;br&gt;(agentbridge)\"]\n    end\n\n    subgraph \"Web Application\"\n        WebApp[\"Web App\"]\n        WebCode[\"Application Code\"]\n        CoreLib[\"@agentbridge/core\"]\n        UILib[\"@agentbridge/react or&lt;br&gt;@agentbridge/angular\"]\n\n        WebCode --&gt; CoreLib\n        WebCode --&gt; UILib\n        CoreLib --&gt; UILib\n    end\n\n    subgraph \"Mobile Application\"\n        MobileApp[\"Mobile App\"]\n        MobileCode[\"Application Code\"]\n        MobileCore[\"@agentbridge/core or&lt;br&gt;agentbridge (Flutter)\"]\n        MobileUI[\"@agentbridge/react-native or&lt;br&gt;Flutter widgets\"]\n\n        MobileCode --&gt; MobileCore\n        MobileCode --&gt; MobileUI\n        MobileCore --&gt; MobileUI\n    end\n\n    subgraph \"AI Platform\"\n        AIModel[\"AI Model\"]\n        APIClient[\"API Client\"]\n\n        AIModel --&gt; APIClient\n    end\n\n    NPM --&gt; WebApp\n    NPM --&gt; MobileApp\n    PubDev --&gt; MobileApp\n\n    WebApp --&gt; |\"Expose APIs\"| AIModel\n    MobileApp --&gt; |\"Expose APIs\"| AIModel\n</code></pre>"},{"location":"development/architecture/#model-context-protocols-mcps-integration","title":"Model Context Protocols (MCPs) Integration","text":"<p>AgentBridge can be extended to support Model Context Protocols, enabling standardized communication between AI models and applications.</p> <pre><code>graph TD\n    subgraph \"AgentBridge Core\"\n        Bridge[\"AgentBridge\"]\n        Registry[\"Function Registry\"]\n        MCPAdapter[\"MCP Adapter\"]\n        MCPManager[\"MCP Manager\"]\n        DesignInfoCollector[\"Design Info Collector\"]\n    end\n\n    subgraph \"Applications\"\n        WebApp[\"Web Application\"]\n        MobileApp[\"Mobile Application\"]\n    end\n\n    subgraph \"AI Agents\"\n        Model[\"AI Model\"]\n        ToolCalling[\"Tool Calling Interface\"]\n    end\n\n    WebApp &lt;--&gt; Bridge\n    MobileApp &lt;--&gt; Bridge\n\n    Bridge &lt;--&gt; MCPAdapter\n    MCPAdapter &lt;--&gt; ToolCalling\n    ToolCalling &lt;--&gt; Model\n\n    Registry --&gt; MCPAdapter\n    MCPManager --&gt; MCPAdapter\n    DesignInfoCollector --&gt; MCPManager\n\n    classDef core fill:#f9f,stroke:#333,stroke-width:1px;\n    classDef app fill:#9cf,stroke:#333,stroke-width:1px;\n    classDef ai fill:#fd9,stroke:#333,stroke-width:1px;\n\n    class Bridge,Registry,MCPAdapter,MCPManager,DesignInfoCollector core;\n    class WebApp,MobileApp app;\n    class Model,ToolCalling ai;\n</code></pre>"},{"location":"development/architecture/#mcp-architecture-components","title":"MCP Architecture Components","text":"<p>The MCP integration architecture consists of several new components:</p> <ol> <li>MCP Adapter: Translates between AgentBridge's internal API and MCP formats.</li> <li>MCP Manager: Manages multiple MCP protocol implementations and handles protocol-specific operations.</li> <li>Design Info Collector: Captures UI component structure and design information for AI agents.</li> </ol>"},{"location":"development/architecture/#mcp-implementation-structure","title":"MCP Implementation Structure","text":"<pre><code>classDiagram\n    class MCPAdapter {\n        &lt;&lt;interface&gt;&gt;\n        +convertToMCPSchema(functionDef) MCPFunctionSchema\n        +convertFromMCPCall(mcpCall) FunctionCallRequest\n        +mapContext(context) MCPContext\n        +mapResponse(response) MCPResponse\n        +getFunctionSchema() MCPSchema\n    }\n\n    class OpenAIMCPAdapter {\n        +convertToMCPSchema(functionDef) OpenAIFunctionSchema\n        +convertFromMCPCall(mcpCall) FunctionCallRequest\n        +mapContext(context) OpenAIContext\n        +mapResponse(response) OpenAIResponse\n        +getFunctionSchema() OpenAISchema\n    }\n\n    class AnthropicMCPAdapter {\n        +convertToMCPSchema(functionDef) AnthropicToolSchema\n        +convertFromMCPCall(toolCall) FunctionCallRequest\n        +mapContext(context) AnthropicContext\n        +mapResponse(response) AnthropicResponse\n        +getFunctionSchema() AnthropicSchema\n    }\n\n    class MCPManager {\n        -mcpAdapters: Map&lt;string, MCPAdapter&gt;\n        +registerAdapter(name, adapter) void\n        +getAdapter(name) MCPAdapter\n        +getSupportedProtocols() string[]\n        +getSchemaForProtocol(protocol) any\n    }\n\n    MCPAdapter &lt;|-- OpenAIMCPAdapter\n    MCPAdapter &lt;|-- AnthropicMCPAdapter\n    MCPManager --&gt; MCPAdapter\n    AgentBridge --&gt; MCPManager\n</code></pre>"},{"location":"development/architecture/#design-information-collection","title":"Design Information Collection","text":"<p>To support AI agents in understanding and manipulating UI components, AgentBridge includes a Design Information Collection system that captures relevant design data from components.</p> <pre><code>classDiagram\n    class ComponentDesignInfo {\n        +layout LayoutInfo\n        +styling StylingInfo\n        +screen? ScreenInfo\n    }\n\n    class LayoutInfo {\n        +parent? string\n        +children string[]\n        +position? Position\n        +zIndex? number\n    }\n\n    class StylingInfo {\n        +theme? string\n        +styleClasses? string[]\n        +customStyles? Map&lt;string, any&gt;\n    }\n\n    class ScreenInfo {\n        +name string\n        +route? string\n        +isActive boolean\n    }\n\n    class ComponentInfo {\n        +id string\n        +type string\n        +props Map&lt;string, any&gt;\n        +state Map&lt;string, any&gt;\n        +designInfo? ComponentDesignInfo\n    }\n\n    class ComponentTree {\n        +rootComponents string[]\n        +components Map&lt;string, ComponentInfo&gt;\n        +structure Map&lt;string, string[]&gt;\n    }\n\n    ComponentInfo --&gt; ComponentDesignInfo\n    ComponentDesignInfo --&gt; LayoutInfo\n    ComponentDesignInfo --&gt; StylingInfo\n    ComponentDesignInfo --&gt; ScreenInfo\n    ComponentTree --&gt; ComponentInfo\n</code></pre>"},{"location":"development/architecture/#mcp-function-call-process","title":"MCP Function Call Process","text":"<p>When an AI agent calls a function through an MCP, the following sequence occurs:</p> <pre><code>sequenceDiagram\n    participant Agent as AI Agent\n    participant MCP as MCP Adapter\n    participant Bridge as AgentBridge\n    participant Registry as Function Registry\n    participant Function as Function Handler\n\n    Agent-&gt;&gt;MCP: Send MCP Function Call\n    MCP-&gt;&gt;Bridge: Convert to AgentBridge Format\n    Bridge-&gt;&gt;Registry: Look up Function\n    Registry-&gt;&gt;Bridge: Return Function Definition\n    Bridge-&gt;&gt;MCP: Request Context Mapping\n    MCP-&gt;&gt;Bridge: Provide Mapped Context\n    Bridge-&gt;&gt;Function: Execute with Parameters &amp; Context\n    Function-&gt;&gt;Bridge: Return Result\n    Bridge-&gt;&gt;MCP: Convert Result to MCP Format\n    MCP-&gt;&gt;Agent: Return MCP-Compatible Response\n</code></pre>"},{"location":"development/architecture/#benefits-of-mcp-integration","title":"Benefits of MCP Integration","text":"<p>Integration with Model Context Protocols offers several benefits for AgentBridge:</p> <ol> <li> <p>Standardized Function Discovery: MCPs provide a standard way for AI agents to discover available functions, eliminating the need for custom discovery mechanisms.</p> </li> <li> <p>Context Management: MCPs define how context information is passed between agents and functions, ensuring consistent context handling.</p> </li> <li> <p>Type Compatibility: MCPs include type definitions that can be mapped to AgentBridge's type system, ensuring compatibility between AI models and applications.</p> </li> <li> <p>Tool Calling: MCPs standardize how AI agents call functions or tools, making it easier to integrate with different AI platforms.</p> </li> <li> <p>Interoperability: By supporting MCPs, AgentBridge can integrate with any AI platform that also supports the same protocols.</p> </li> <li> <p>Design Understanding: By including design information, AI agents can better understand the structure and appearance of the UI, enabling more sophisticated interactions.</p> </li> </ol>"},{"location":"development/architecture/#mcp-implementation-in-agentbridge","title":"MCP Implementation in AgentBridge","text":"<p>The implementation of MCP support in AgentBridge involves:</p> <ol> <li>MCP Adapter Layer: A new component that translates between AgentBridge's internal API and the MCP format.</li> </ol> <pre><code>// Example MCP Adapter Implementation\nclass OpenAIMCPAdapter implements MCPAdapter {\n  constructor(private registry: Registry) {}\n\n  convertToMCPSchema(functionDef: FunctionDefinition): OpenAIFunctionSchema {\n    return {\n      name: functionDef.name,\n      description: functionDef.description,\n      parameters: this.convertTypeToOpenAISchema(functionDef.parameters),\n    };\n  }\n\n  convertFromMCPCall(mcpCall: OpenAIFunctionCall): FunctionCallRequest {\n    return {\n      name: mcpCall.name,\n      params: mcpCall.arguments,\n      context: this.mapContext(mcpCall.context),\n    };\n  }\n\n  // Additional implementation methods...\n}\n</code></pre> <ol> <li>Function Schema Conversion: Converting AgentBridge function definitions to MCP tool descriptions.</li> </ol> <pre><code>// Example Schema Conversion\nconvertTypeToOpenAISchema(type: TypeDefinition): OpenAIParameterSchema {\n  switch (type.type) {\n    case 'string':\n      return {\n        type: 'string',\n        description: type.description,\n        enum: type.enum,\n      };\n    case 'number':\n      return {\n        type: 'number',\n        description: type.description,\n        minimum: type.min,\n        maximum: type.max,\n      };\n    case 'object':\n      return {\n        type: 'object',\n        description: type.description,\n        properties: Object.entries(type.properties).reduce((props, [key, propType]) =&gt; {\n          props[key] = this.convertTypeToOpenAISchema(propType);\n          return props;\n        }, {}),\n        required: type.required || [],\n      };\n    // Handle other types...\n  }\n}\n</code></pre> <ol> <li> <p>Context Mapping: Mapping AgentBridge's context to the context format specified by the MCP.</p> </li> <li> <p>Design Information Collection: Capturing UI structure and design information.</p> </li> </ol> <pre><code>// Example Design Information Collection\nclass ReactDesignInfoCollector {\n  captureComponentTree(rootElement): ComponentTree {\n    const tree: ComponentTree = {\n      rootComponents: [],\n      components: new Map(),\n      structure: {},\n    };\n\n    this.traverseComponentTree(rootElement, tree);\n    return tree;\n  }\n\n  private traverseComponentTree(element, tree: ComponentTree, parentId?: string) {\n    const id = element.props.id || generateUniqueId();\n\n    // Capture component information\n    const info: ComponentInfo = {\n      id,\n      type: element.type.name || 'UnknownComponent',\n      props: { ...element.props },\n      state: this.getComponentState(element),\n      designInfo: this.captureDesignInfo(element),\n    };\n\n    tree.components.set(id, info);\n\n    if (!parentId) {\n      tree.rootComponents.push(id);\n    } else {\n      if (!tree.structure[parentId]) {\n        tree.structure[parentId] = [];\n      }\n      tree.structure[parentId].push(id);\n    }\n\n    // Recurse for children\n    React.Children.forEach(element.props.children, child =&gt; {\n      if (React.isValidElement(child)) {\n        this.traverseComponentTree(child, tree, id);\n      }\n    });\n  }\n\n  private captureDesignInfo(element): ComponentDesignInfo {\n    // Extract layout and styling information\n    return {\n      layout: this.extractLayoutInfo(element),\n      styling: this.extractStylingInfo(element),\n      screen: this.extractScreenInfo(element),\n    };\n  }\n\n  // Helper methods to extract specific design information...\n}\n</code></pre>"},{"location":"development/architecture/#integration-with-ai-platforms","title":"Integration with AI Platforms","text":"<p>With MCP support, AgentBridge can integrate with various AI platforms:</p> <ul> <li>OpenAI (ChatGPT, GPT-4)</li> <li>Anthropic (Claude)</li> <li>Google (Gemini)</li> <li>Other platforms that support MCPs</li> </ul> <p>This integration would allow applications using AgentBridge to leverage any AI platform without significant code changes, as long as the platform supports the same MCP.</p>"},{"location":"development/architecture/#future-architecture-directions","title":"Future Architecture Directions","text":"<p>Future enhancements to the AgentBridge architecture may include:</p> <ul> <li>Server-side rendering support</li> <li>WebSocket-based real-time updates</li> <li>Component synchronization across devices</li> <li>Enhanced MCP support for multiple AI platforms</li> <li>AI agent capability discovery</li> <li>Enhanced type system with runtime validation</li> <li>Additional design information collection mechanisms</li> <li>Advanced UI reasoning capabilities for AI agents </li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>This page is under construction. It will contain documentation about Contributing in the Development section.</p>"},{"location":"development/contributing/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"development/deployment/","title":"Package Deployment Guide","text":"<p>This document provides instructions for deploying the AgentBridge packages to package registries and integrating them into applications.</p>"},{"location":"development/deployment/#package-structure","title":"Package Structure","text":"<p>AgentBridge consists of several packages that can be deployed independently:</p> <pre><code>@agentbridge/core        - Core functionality, platform-agnostic\n@agentbridge/react       - React integration\n@agentbridge/angular     - Angular integration  \n@agentbridge/react-native - React Native integration\nagentbridge              - Flutter integration package\n</code></pre>"},{"location":"development/deployment/#prerequisites","title":"Prerequisites","text":"<p>Before deploying the packages, ensure you have:</p> <ul> <li>Node.js 14.x or higher (for JavaScript packages)</li> <li>npm 7.x or higher or yarn 1.22.x or higher</li> <li>Flutter 3.0.0 or higher (for Flutter package)</li> <li>Access to the package registries (npm, pub.dev)</li> <li>Appropriate authentication credentials</li> </ul>"},{"location":"development/deployment/#version-management","title":"Version Management","text":"<p>AgentBridge follows Semantic Versioning (SemVer) for all packages:</p> <ul> <li>Major version: Breaking changes that require code updates in consuming applications</li> <li>Minor version: New features added in a backward-compatible manner</li> <li>Patch version: Backward-compatible bug fixes</li> </ul> <p>All packages should be versioned together to maintain compatibility.</p>"},{"location":"development/deployment/#building-packages-for-deployment","title":"Building Packages for Deployment","text":""},{"location":"development/deployment/#javascript-packages-core-react-angular-react-native","title":"JavaScript Packages (Core, React, Angular, React Native)","text":"<ol> <li>Clean the build artifacts:</li> </ol> <pre><code>npm run clean\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Build the packages:</li> </ol> <pre><code>npm run build\n</code></pre> <ol> <li>Run tests to ensure everything works:</li> </ol> <pre><code>npm test\n</code></pre>"},{"location":"development/deployment/#flutter-package","title":"Flutter Package","text":"<ol> <li>Ensure your Flutter environment is set up:</li> </ol> <pre><code>flutter doctor\n</code></pre> <ol> <li>Run tests:</li> </ol> <pre><code>flutter test\n</code></pre> <ol> <li>Analyze the code:</li> </ol> <pre><code>flutter analyze\n</code></pre>"},{"location":"development/deployment/#publishing-packages","title":"Publishing Packages","text":""},{"location":"development/deployment/#publishing-javascript-packages-to-npm","title":"Publishing JavaScript Packages to npm","text":"<ol> <li>Log in to npm:</li> </ol> <pre><code>npm login\n</code></pre> <ol> <li>Publish the packages in the correct order (core first, then the framework-specific packages):</li> </ol> <pre><code># In the core package directory\nnpm publish --access public\n\n# In the React package directory\nnpm publish --access public\n\n# In the Angular package directory\nnpm publish --access public\n\n# In the React Native package directory\nnpm publish --access public\n</code></pre>"},{"location":"development/deployment/#publishing-the-flutter-package-to-pubdev","title":"Publishing the Flutter Package to pub.dev","text":"<ol> <li>Review the package with the dry-run command:</li> </ol> <pre><code>flutter pub publish --dry-run\n</code></pre> <ol> <li>Publish the package:</li> </ol> <pre><code>flutter pub publish\n</code></pre>"},{"location":"development/deployment/#cicd-integration","title":"CI/CD Integration","text":"<p>It's recommended to set up a CI/CD pipeline for automated testing and deployment. Below is a sample GitHub Actions workflow:</p> <pre><code>name: Deploy Packages\n\non:\n  release:\n    types: [created]\n\njobs:\n  deploy-js-packages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16.x'\n          registry-url: 'https://registry.npmjs.org'\n\n      # Build and publish @agentbridge/core\n      - run: cd packages/core &amp;&amp; npm ci\n      - run: cd packages/core &amp;&amp; npm run build\n      - run: cd packages/core &amp;&amp; npm test\n      - run: cd packages/core &amp;&amp; npm publish --access public\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      # Repeat for other packages\n\n  deploy-flutter-package:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: subosito/flutter-action@v2\n        with:\n          flutter-version: '3.x'\n          channel: 'stable'\n      - run: cd packages/mobile/flutter &amp;&amp; flutter pub get\n      - run: cd packages/mobile/flutter &amp;&amp; flutter test\n      - run: cd packages/mobile/flutter &amp;&amp; flutter pub publish --force\n        env:\n          PUB_DEV_PUBLISH_ACCESS_TOKEN: ${{ secrets.PUB_DEV_TOKEN }}\n          PUB_DEV_PUBLISH_REFRESH_TOKEN: ${{ secrets.PUB_DEV_REFRESH_TOKEN }}\n</code></pre>"},{"location":"development/deployment/#package-registry-security","title":"Package Registry Security","text":""},{"location":"development/deployment/#npm-package-security","title":"npm Package Security","text":"<ul> <li>Use two-factor authentication (2FA) for the npm account</li> <li>Configure package access to restrict who can publish</li> <li>Add <code>.npmignore</code> files to exclude unnecessary files from the package</li> </ul>"},{"location":"development/deployment/#pubdev-package-security","title":"pub.dev Package Security","text":"<ul> <li>Use Google accounts with strong security measures</li> <li>Keep credentials secure and never commit them to the repository</li> <li>Follow pub.dev security best practices</li> </ul>"},{"location":"development/deployment/#versioning-and-changelogs","title":"Versioning and Changelogs","text":"<p>Each package should maintain a <code>CHANGELOG.md</code> file that documents changes between versions. Here's a sample format:</p> <pre><code># Changelog\n\n## 1.1.0 (2023-08-15)\n\n### Features\n- Added support for custom component types\n- Improved error handling for function calls\n\n### Fixes\n- Fixed issue with component registration in React adapter\n- Resolved type validation bug in core package\n\n## 1.0.0 (2023-07-01)\n\nInitial stable release.\n</code></pre>"},{"location":"development/deployment/#release-checklist","title":"Release Checklist","text":"<p>Before releasing a new version, complete this checklist:</p> <ol> <li>Update version numbers in all package.json/pubspec.yaml files</li> <li>Update CHANGELOG.md files with all notable changes</li> <li>Ensure all tests pass across all packages</li> <li>Verify cross-package compatibility</li> <li>Build all packages to ensure they compile correctly</li> <li>Create a GitHub release with appropriate tags</li> <li>Deploy packages to registries</li> <li>Verify that packages can be installed and used in sample applications</li> </ol>"},{"location":"development/deployment/#backward-compatibility","title":"Backward Compatibility","text":"<p>When deploying new versions, consider the following to maintain backward compatibility:</p> <ul> <li>Avoid removing public APIs without proper deprecation notices</li> <li>Provide migration guides for major version upgrades</li> <li>Test with previous versions to identify potential issues</li> <li>Add feature flags for new functionality that might impact existing behavior</li> </ul>"},{"location":"development/deployment/#managing-dependencies","title":"Managing Dependencies","text":"<ul> <li>Keep dependencies up to date but stable</li> <li>Lock dependency versions to prevent unexpected changes</li> <li>Test with both minimum and latest dependency versions</li> <li>Document any specific dependency requirements</li> </ul>"},{"location":"development/deployment/#troubleshooting-deployment-issues","title":"Troubleshooting Deployment Issues","text":""},{"location":"development/deployment/#common-npm-deployment-issues","title":"Common npm Deployment Issues","text":"<ul> <li>Authentication errors: Ensure your npm token is valid and you have the correct permissions</li> <li>Version conflicts: Make sure you're not trying to publish a version that already exists</li> <li>Package size issues: Check for large files that should be excluded in .npmignore</li> </ul>"},{"location":"development/deployment/#common-pubdev-deployment-issues","title":"Common pub.dev Deployment Issues","text":"<ul> <li>Pub points: Address issues that might reduce pub points score</li> <li>Analysis issues: Fix any code quality issues reported by the analyzer</li> <li>Dependency conflicts: Resolve any conflicts in the dependency graph</li> </ul>"},{"location":"development/deployment/#post-deployment-verification","title":"Post-Deployment Verification","text":"<p>After deploying packages, verify that:</p> <ol> <li>Packages can be installed from the registries</li> <li>Sample applications work with the new versions</li> <li>Documentation reflects the current API and features</li> <li>Release notes are clear and complete</li> </ol>"},{"location":"development/deployment/#canary-releases","title":"Canary Releases","text":"<p>For testing new features before a full release, consider using canary releases:</p> <pre><code># For npm packages\nnpm publish --tag canary\n\n# For Flutter packages\n# Use a version suffix like \"1.0.0-canary.1\" in pubspec.yaml\nflutter pub publish --preview\n</code></pre>"},{"location":"development/deployment/#rolling-back-releases","title":"Rolling Back Releases","text":"<p>If issues are discovered after deployment:</p>"},{"location":"development/deployment/#npm-packages","title":"npm Packages","text":"<pre><code>npm deprecate @agentbridge/package@version \"Critical issues found, please use version X.Y.Z instead\"\n</code></pre>"},{"location":"development/deployment/#flutter-packages","title":"Flutter Packages","text":"<p>Flutter packages cannot be unpublished, but you can:</p> <ol> <li>Quickly release a patch version that fixes the issue</li> <li>Mark the problematic version as discontinued in the package documentation </li> </ol>"},{"location":"development/mcp-evaluation/","title":"Model Context Protocols (MCPs) Integration Evaluation","text":"<p>This document evaluates the potential integration of Model Context Protocols (MCPs) into the AgentBridge framework, addressing key considerations for implementation and expected benefits.</p>"},{"location":"development/mcp-evaluation/#what-are-model-context-protocols","title":"What are Model Context Protocols?","text":"<p>Model Context Protocols (MCPs) are open standards that define how AI models can seamlessly connect to external data sources, tools, or services. They provide a standardized way for AI agents to:</p> <ul> <li>Discover available functions and tools</li> <li>Exchange context information in real time</li> <li>Maintain consistent communication across various systems</li> <li>Call external functions with standardized parameter formats</li> <li>Process responses in a consistent manner</li> </ul> <p>MCPs act as a universal \"connector\" or \"adapter\" between an AI agent's internal context and the real-world data and functionality it needs to access.</p>"},{"location":"development/mcp-evaluation/#current-agentbridge-architecture","title":"Current AgentBridge Architecture","text":"<p>AgentBridge currently provides a framework for exposing application functionality to AI agents, but without a standardized protocol for discovery and interaction. The current approach requires:</p> <ul> <li>Custom integration code for each AI model integration</li> <li>Proprietary function definition formats</li> <li>Application-specific context management</li> <li>Custom type definitions and validations</li> </ul> <p>While functional, this approach limits interoperability and increases the complexity of integrating with new AI platforms.</p> <pre><code>graph TD\n    subgraph \"Without MCPs\"\n        AIAgent1[AI Agent A] --&gt; |Custom Integration| AgentBridge1[AgentBridge]\n        AIAgent2[AI Agent B] --&gt; |Custom Integration| AgentBridge2[AgentBridge]\n        AIAgent3[AI Agent C] --&gt; |Custom Integration| AgentBridge3[AgentBridge]\n    end\n</code></pre>"},{"location":"development/mcp-evaluation/#key-evaluation-questions","title":"Key Evaluation Questions","text":""},{"location":"development/mcp-evaluation/#1-discovery-consumption","title":"1. Discovery &amp; Consumption","text":"<p>Question: Can our agents dynamically discover and call the exposed SDK functions through an MCP-based protocol?</p> <p>Analysis:</p> <p>Integrating MCPs would provide significant improvements to function discovery and consumption:</p> <ul> <li> <p>Dynamic Function Discovery: MCPs would allow AI agents to dynamically discover available functions in the AgentBridge registry without prior knowledge of the application's capabilities.</p> </li> <li> <p>Schema-Based Discoverability: Function parameters, types, and descriptions would be exposed in a standardized format that any MCP-compatible AI agent could understand.</p> </li> <li> <p>Runtime Adaptability: As new functions are registered with AgentBridge, they would automatically become available to AI agents without requiring code changes.</p> </li> <li> <p>Consistent Invocation Format: All function calls would follow the same standardized pattern, simplifying integration with different AI models.</p> </li> </ul> <p>Implementation Requirements:</p> <ul> <li>Extend the function registry to expose functions in MCP-compatible format</li> <li>Implement a discovery endpoint/mechanism that adheres to MCP specifications</li> <li>Create schema translation utilities to convert between AgentBridge and MCP type formats</li> <li>Build examples demonstrating dynamic discovery</li> </ul>"},{"location":"development/mcp-evaluation/#2-context-management","title":"2. Context Management","text":"<p>Question: How would MCPs help maintain and pass the necessary context between our agents and the SDKs?</p> <p>Analysis:</p> <p>MCPs would significantly improve context management in the AgentBridge ecosystem:</p> <ul> <li> <p>Standardized Context Format: MCPs define a standard format for context information, ensuring consistent context handling across different AI platforms.</p> </li> <li> <p>Context Persistence: MCPs include mechanisms for maintaining context across multiple function calls, enabling more complex agent interactions.</p> </li> <li> <p>User Authentication Context: MCPs can standardize how user authentication information is passed between agents and functions, improving security consistency.</p> </li> <li> <p>Application State Sharing: MCPs can standardize how application state is shared with AI agents, allowing for more contextually-aware interactions.</p> </li> </ul> <p>Implementation Requirements:</p> <ul> <li>Develop a context management system that adheres to MCP specifications</li> <li>Create context mappers to translate between AgentBridge's internal context and MCP context format</li> <li>Implement context persistence mechanisms</li> <li>Add context validation to ensure security</li> </ul>"},{"location":"development/mcp-evaluation/#3-standardization","title":"3. Standardization","text":"<p>Question: Would using MCPs standardize the interaction across different modules, making it easier for agents to operate regardless of the underlying data sources?</p> <p>Analysis:</p> <p>Adopting MCPs would significantly enhance standardization across the AgentBridge ecosystem:</p> <ul> <li> <p>Cross-Platform Consistency: With MCPs, interactions would be consistent whether the agent is working with a React, Angular, Flutter, or any other platform implementation.</p> </li> <li> <p>Reduced Integration Complexity: New AI platforms could be integrated with minimal additional code if they support the same MCP standard.</p> </li> <li> <p>Unified Type System: MCPs define standard types that could be mapped to AgentBridge's type system, ensuring consistent validation.</p> </li> <li> <p>Protocol Evolution: As MCPs evolve with industry standards, AgentBridge would benefit from improvements without requiring major internal changes.</p> </li> </ul> <p>Implementation Examples:</p> <pre><code>// Example of how a function might be registered with MCP support\nagentBridge.registerFunction({\n  name: 'getWeather',\n  description: 'Get current weather for a location',\n  parameters: {\n    type: 'object',\n    properties: {\n      location: {\n        type: 'string',\n        description: 'City name or coordinates'\n      },\n      units: {\n        type: 'string',\n        enum: ['metric', 'imperial'],\n        default: 'metric'\n      }\n    },\n    required: ['location']\n  },\n  returnType: {\n    type: 'object',\n    properties: {\n      temperature: { type: 'number' },\n      conditions: { type: 'string' },\n      humidity: { type: 'number' }\n    }\n  },\n  handler: async (params, context) =&gt; {\n    // Function implementation\n    return {\n      temperature: 22.5,\n      conditions: 'Sunny',\n      humidity: 45\n    };\n  }\n});\n</code></pre>"},{"location":"development/mcp-evaluation/#4-implementation-complexity","title":"4. Implementation Complexity","text":"<p>Question: What would be the effort required to integrate MCPs into our current architecture? Is this integration viable at this stage?</p> <p>Analysis:</p> <p>Implementing MCP support in AgentBridge would involve moderate complexity:</p> <ul> <li> <p>Adaptation Layer: An MCP adapter component would need to be built to translate between AgentBridge's internal API and the MCP format.</p> </li> <li> <p>Schema Mapping: Mapping between AgentBridge's function definitions and MCP tool descriptions would require careful type translation.</p> </li> <li> <p>Backward Compatibility: The implementation should maintain backward compatibility with existing AgentBridge integrations.</p> </li> <li> <p>Testing Requirements: Comprehensive testing would be needed to ensure compatibility with different AI platforms and MCP implementations.</p> </li> </ul> <p>Viability Assessment:</p> <p>MCP integration is highly viable at this stage for several reasons:</p> <ol> <li> <p>Foundation Available: AgentBridge already has most of the foundational components needed (function registry, type system, adapters).</p> </li> <li> <p>Incremental Implementation: MCP support can be added incrementally without disrupting existing functionality.</p> </li> <li> <p>Return on Investment: The effort required is moderate, but the benefits in terms of interoperability and standardization are substantial.</p> </li> <li> <p>Timing: As MCPs are gaining industry adoption, implementing support now positions AgentBridge favorably in the ecosystem.</p> </li> </ol> <pre><code>graph TD\n    subgraph \"With MCPs\"\n        AIAgent[Any AI Agent with MCP Support] --&gt; |Standard Protocol| MCPLayer[MCP Adapter Layer]\n        MCPLayer --&gt; AgentBridge[AgentBridge]\n    end\n</code></pre>"},{"location":"development/mcp-evaluation/#implementation-path","title":"Implementation Path","text":""},{"location":"development/mcp-evaluation/#phase-1-research-and-design","title":"Phase 1: Research and Design","text":"<ol> <li>Standard Selection: Evaluate and select specific MCP standards to implement (e.g., OpenAI's function calling schema, Anthropic's tool use schema)</li> <li>Gap Analysis: Identify gaps between current AgentBridge capabilities and MCP requirements</li> <li>Architecture Design: Design the MCP adapter component and integration points</li> <li>POC Development: Create proof-of-concept implementations for key scenarios</li> </ol>"},{"location":"development/mcp-evaluation/#phase-2-core-implementation","title":"Phase 2: Core Implementation","text":"<ol> <li>MCP Adapter Development: Implement the core MCP adapter component</li> <li>Schema Translation: Build utilities for translating between AgentBridge and MCP schemas</li> <li>Context Management: Implement standardized context handling according to MCP specifications</li> <li>Discovery Mechanism: Create MCP-compliant discovery endpoints/mechanisms</li> </ol>"},{"location":"development/mcp-evaluation/#phase-3-platform-integration-and-testing","title":"Phase 3: Platform Integration and Testing","text":"<ol> <li>AI Platform Testing: Test with multiple AI platforms (OpenAI, Anthropic, etc.)</li> <li>Framework Adapter Updates: Update framework adapters to leverage MCP capabilities</li> <li>Performance Optimization: Optimize performance of the MCP integration</li> <li>Documentation: Create comprehensive documentation for MCP integration</li> </ol>"},{"location":"development/mcp-evaluation/#comparison-of-with-and-without-mcps","title":"Comparison of With and Without MCPs","text":"Aspect Without MCPs With MCPs AI Platform Integration Custom integration for each platform Standardized integration for all MCP-supporting platforms Function Discovery Manual documentation and configuration Automatic, standardized discovery Type System Custom type definitions Standard types with mapping to custom types Context Management Custom context handling Standardized context format and persistence Maintenance Cost Higher (multiple custom integrations) Lower (single standard to maintain) Extensibility Requires code changes for new capabilities Dynamic discovery of new capabilities Developer Experience Varied across platforms Consistent across platforms"},{"location":"development/mcp-evaluation/#example-openai-function-calling-as-mcp","title":"Example: OpenAI Function Calling as MCP","text":"<p>OpenAI's function calling schema is an example of an emerging MCP standard. Here's how it might be integrated with AgentBridge:</p> <pre><code>// Current AgentBridge function definition\nagentBridge.registerFunction(\n  'searchProducts',\n  'Search for products in the inventory',\n  {\n    type: 'object',\n    properties: {\n      query: { type: 'string' },\n      category: { type: 'string', optional: true },\n      maxResults: { type: 'number', optional: true }\n    }\n  },\n  async (params, context) =&gt; {\n    // Function implementation\n    return { results: [] };\n  }\n);\n\n// With MCP adapter, this would automatically be exposed in OpenAI format:\n{\n  \"name\": \"searchProducts\",\n  \"description\": \"Search for products in the inventory\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"query\": {\n        \"type\": \"string\",\n        \"description\": \"Search query\"\n      },\n      \"category\": {\n        \"type\": \"string\",\n        \"description\": \"Product category\"\n      },\n      \"maxResults\": {\n        \"type\": \"number\",\n        \"description\": \"Maximum number of results to return\"\n      }\n    },\n    \"required\": [\"query\"]\n  }\n}\n</code></pre>"},{"location":"development/mcp-evaluation/#recommendations","title":"Recommendations","text":"<p>Based on this evaluation, we recommend:</p> <ol> <li> <p>Proceed with MCP Integration: The benefits of standardization, improved discoverability, and reduced integration complexity justify the implementation effort.</p> </li> <li> <p>Phased Approach: Implement MCP support incrementally, starting with the most widely adopted standards (e.g., OpenAI's function calling schema).</p> </li> <li> <p>Maintain Backward Compatibility: Ensure that existing AgentBridge integrations continue to work without modification.</p> </li> <li> <p>Create Reference Implementations: Develop comprehensive examples demonstrating MCP integration with different AI platforms.</p> </li> <li> <p>Documentation and Training: Provide detailed documentation and training materials for developers implementing MCP-based integrations.</p> </li> <li> <p>Monitoring and Feedback: Establish metrics to monitor the effectiveness of MCP integration and gather feedback for continuous improvement.</p> </li> </ol>"},{"location":"development/mcp-evaluation/#conclusion","title":"Conclusion","text":"<p>Integrating Model Context Protocols into the AgentBridge framework would provide significant benefits in terms of standardization, discoverability, context management, and reduced integration complexity. The implementation effort is moderate and can be approached incrementally, with each phase delivering tangible benefits.</p> <p>Given AgentBridge's goal of providing a unified interface for AI agents to interact with applications across different platforms and frameworks, MCP integration aligns perfectly with this mission and would position AgentBridge as a forward-thinking framework in the AI ecosystem.</p> <p>By adopting MCPs, AgentBridge would enable more seamless integration with a wider range of AI platforms, reducing the burden on developers and enabling more sophisticated agent-application interactions. </p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install AgentBridge in your application. AgentBridge is available for different platforms and frameworks, including React, Angular, React Native, and Flutter.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 14.x or higher (for web applications)</li> <li>Flutter 3.0.0 or higher (for Flutter applications)</li> <li>npm 7.x or higher or yarn 1.22.x or higher</li> </ul>"},{"location":"getting-started/installation/#installing-the-core-package","title":"Installing the Core Package","text":"<p>The core package provides the fundamental functionality of AgentBridge and is required by all platform-specific SDKs.</p>"},{"location":"getting-started/installation/#using-npm","title":"Using npm","text":"<pre><code>npm install @agentbridge/core\n</code></pre>"},{"location":"getting-started/installation/#using-yarn","title":"Using yarn","text":"<pre><code>yarn add @agentbridge/core\n</code></pre>"},{"location":"getting-started/installation/#web-sdks","title":"Web SDKs","text":""},{"location":"getting-started/installation/#react","title":"React","text":"<p>The React SDK provides components and hooks for integrating AgentBridge with React applications.</p> <pre><code>npm install @agentbridge/react\n</code></pre>"},{"location":"getting-started/installation/#angular","title":"Angular","text":"<p>The Angular SDK provides services, components, and directives for integrating AgentBridge with Angular applications.</p> <pre><code>npm install @agentbridge/angular\n</code></pre>"},{"location":"getting-started/installation/#mobile-sdks","title":"Mobile SDKs","text":""},{"location":"getting-started/installation/#react-native","title":"React Native","text":"<p>The React Native SDK extends the React SDK and adds mobile-specific functionality for React Native applications.</p> <pre><code>npm install @agentbridge/react-native\n</code></pre>"},{"location":"getting-started/installation/#flutter","title":"Flutter","text":"<p>The Flutter SDK provides widgets and services for integrating AgentBridge with Flutter applications.</p> <pre><code>flutter pub add agentbridge\n</code></pre>"},{"location":"getting-started/installation/#environment-setup","title":"Environment Setup","text":""},{"location":"getting-started/installation/#web-applications","title":"Web Applications","text":"<p>For web applications, you need to make sure that your bundler (webpack, Rollup, etc.) is configured correctly to handle the AgentBridge packages.</p>"},{"location":"getting-started/installation/#react-native-applications","title":"React Native Applications","text":"<p>For React Native applications, you may need to install additional dependencies depending on the features you use:</p> <pre><code>npm install @agentbridge/react\n</code></pre>"},{"location":"getting-started/installation/#flutter-applications","title":"Flutter Applications","text":"<p>For Flutter applications, add the following dependency to your <code>pubspec.yaml</code> file:</p> <pre><code>dependencies:\n  agentbridge: ^0.1.0\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that AgentBridge is installed correctly, you can create a simple test application that imports the core package and initializes the AgentBridge instance:</p>"},{"location":"getting-started/installation/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>import { createAgentBridge } from '@agentbridge/core';\n\nconst bridge = createAgentBridge();\nconsole.log('AgentBridge initialized:', bridge);\n</code></pre>"},{"location":"getting-started/installation/#dart-flutter","title":"Dart (Flutter)","text":"<pre><code>import 'package:agentbridge/agentbridge.dart';\n\nvoid main() {\n  final bridge = AgentBridge();\n  print('AgentBridge initialized: $bridge');\n}\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have installed AgentBridge, you can proceed to the Quick Start guide to learn how to use it in your application. </p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will help you get started with AgentBridge by building a simple application that exposes functionality to AI agents. We'll cover the basics of initializing AgentBridge, registering functions, and registering UI components.</p>"},{"location":"getting-started/quick-start/#basic-setup","title":"Basic Setup","text":"<p>First, let's create a new project and install the required dependencies:</p> React <pre><code>npx create-react-app my-agentbridge-app\ncd my-agentbridge-app\nnpm install @agentbridge/core @agentbridge/react\n</code></pre> Angular <pre><code>ng new my-agentbridge-app\ncd my-agentbridge-app\nnpm install @agentbridge/core @agentbridge/angular\n</code></pre> React Native <pre><code>npx react-native init MyAgentBridgeApp\ncd MyAgentBridgeApp\nnpm install @agentbridge/core @agentbridge/react-native\n</code></pre> Flutter <pre><code>flutter create my_agentbridge_app\ncd my_agentbridge_app\n# Add agentbridge dependency to pubspec.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#initializing-agentbridge","title":"Initializing AgentBridge","text":"<p>Now let's initialize AgentBridge in our application:</p> React <pre><code>// src/App.js\nimport React from 'react';\nimport { AgentBridgeProvider, createAgentBridge } from '@agentbridge/react';\n\n// Create an AgentBridge instance\nconst bridge = createAgentBridge();\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider bridge={bridge}&gt;\n      &lt;div className=\"App\"&gt;\n        &lt;h1&gt;My AgentBridge App&lt;/h1&gt;\n        {/* Your components go here */}\n      &lt;/div&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre> Angular <pre><code>// app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AgentBridgeModule } from '@agentbridge/angular';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AgentBridgeModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> React Native <pre><code>// App.js\nimport React from 'react';\nimport { SafeAreaView, Text } from 'react-native';\nimport { AgentBridgeProvider, createAgentBridge } from '@agentbridge/react-native';\n\n// Create an AgentBridge instance\nconst bridge = createAgentBridge();\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider bridge={bridge}&gt;\n      &lt;SafeAreaView&gt;\n        &lt;Text&gt;My AgentBridge App&lt;/Text&gt;\n        {/* Your components go here */}\n      &lt;/SafeAreaView&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre> Flutter <pre><code>// lib/main.dart\nimport 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    // Create an AgentBridge instance\n    final bridge = AgentBridge();\n\n    return MaterialApp(\n      title: 'AgentBridge Demo',\n      home: AgentBridgeProvider(\n        bridge: bridge,\n        child: Scaffold(\n          appBar: AppBar(\n            title: const Text('AgentBridge Demo'),\n          ),\n          body: const Center(\n            child: Text('My AgentBridge App'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#registering-functions","title":"Registering Functions","text":"<p>Now let's register some functions that AI agents can call:</p> React <pre><code>// src/App.js\nimport React, { useEffect } from 'react';\nimport { AgentBridgeProvider, createAgentBridge, useAgentBridge } from '@agentbridge/react';\n\nconst bridge = createAgentBridge();\n\nfunction FunctionRegistration() {\n  const { registerFunction } = useAgentBridge();\n\n  useEffect(() =&gt; {\n    // Register a simple function\n    registerFunction(\n      'greet',\n      'Greet a user by name',\n      {\n        type: 'object',\n        properties: {\n          name: { type: 'string' }\n        },\n        required: ['name']\n      },\n      async ({ name }) =&gt; {\n        return { message: `Hello, ${name}!` };\n      }\n    );\n  }, [registerFunction]);\n\n  return null;\n}\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider bridge={bridge}&gt;\n      &lt;FunctionRegistration /&gt;\n      &lt;div className=\"App\"&gt;\n        &lt;h1&gt;My AgentBridge App&lt;/h1&gt;\n      &lt;/div&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre> Angular <pre><code>// app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    &lt;div class=\"app\"&gt;\n      &lt;h1&gt;My AgentBridge App&lt;/h1&gt;\n    &lt;/div&gt;\n  `\n})\nexport class AppComponent implements OnInit {\n  constructor(private agentBridgeService: AgentBridgeService) {}\n\n  ngOnInit() {\n    // Register a simple function\n    this.agentBridgeService.registerFunction(\n      'greet',\n      'Greet a user by name',\n      {\n        type: 'object',\n        properties: {\n          name: { type: 'string' }\n        },\n        required: ['name']\n      },\n      async ({ name }) =&gt; {\n        return { message: `Hello, ${name}!` };\n      }\n    );\n  }\n}\n</code></pre> Flutter <pre><code>// lib/main.dart\nimport 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() =&gt; _MyAppState();\n}\n\nclass _MyAppState extends State&lt;MyApp&gt; {\n  late final AgentBridge bridge;\n\n  @override\n  void initState() {\n    super.initState();\n    bridge = AgentBridge();\n\n    // Register a simple function\n    bridge.registerFunction(\n      name: 'greet',\n      description: 'Greet a user by name',\n      handler: (params, context) async {\n        final name = params['name'] as String;\n        return { 'message': 'Hello, $name!' };\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'AgentBridge Demo',\n      home: AgentBridgeProvider(\n        bridge: bridge,\n        child: Scaffold(\n          appBar: AppBar(\n            title: const Text('AgentBridge Demo'),\n          ),\n          body: const Center(\n            child: Text('My AgentBridge App'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#registering-ui-components","title":"Registering UI Components","text":"<p>Now let's register some UI components that AI agents can interact with:</p> React <pre><code>// src/App.js\nimport React, { useState } from 'react';\nimport { AgentBridgeProvider, createAgentBridge, useAgentComponent } from '@agentbridge/react';\n\nconst bridge = createAgentBridge();\n\nfunction AgentButton() {\n  const [clickCount, setClickCount] = useState(0);\n\n  const buttonProps = useAgentComponent('main-button', 'button', {\n    clickCount\n  });\n\n  const handleClick = () =&gt; {\n    setClickCount(clickCount + 1);\n  };\n\n  return (\n    &lt;button\n      {...buttonProps}\n      onClick={handleClick}\n      style={{ padding: '10px 20px', fontSize: '16px' }}\n    &gt;\n      Click me! ({clickCount})\n    &lt;/button&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider bridge={bridge}&gt;\n      &lt;div className=\"App\"&gt;\n        &lt;h1&gt;My AgentBridge App&lt;/h1&gt;\n        &lt;AgentButton /&gt;\n      &lt;/div&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre> Angular <pre><code>&lt;!-- app.component.html --&gt;\n&lt;div class=\"app\"&gt;\n  &lt;h1&gt;My AgentBridge App&lt;/h1&gt;\n  &lt;agent-button agentId=\"main-button\" (clicked)=\"handleButtonClick()\"&gt;\n    Click me! ({{ clickCount }})\n  &lt;/agent-button&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  clickCount = 0;\n\n  handleButtonClick() {\n    this.clickCount++;\n  }\n}\n</code></pre> Flutter <pre><code>// lib/main.dart\nimport 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() =&gt; _MyAppState();\n}\n\nclass _MyAppState extends State&lt;MyApp&gt; {\n  late final AgentBridge bridge;\n  int clickCount = 0;\n\n  @override\n  void initState() {\n    super.initState();\n    bridge = AgentBridge();\n  }\n\n  void handleButtonClick() {\n    setState(() {\n      clickCount++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'AgentBridge Demo',\n      home: AgentBridgeProvider(\n        bridge: bridge,\n        child: Scaffold(\n          appBar: AppBar(\n            title: const Text('AgentBridge Demo'),\n          ),\n          body: Center(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                const Text('My AgentBridge App'),\n                const SizedBox(height: 20),\n                AgentButton(\n                  agentId: 'main-button',\n                  onPressed: handleButtonClick,\n                  child: Text('Click me! ($clickCount)'),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#testing-with-an-ai-agent","title":"Testing with an AI Agent","text":"<p>Now that we've set up our application with AgentBridge, let's test it with an AI agent. For this example, we'll use the console to simulate an AI agent calling our functions and interacting with our components.</p> JavaScript <pre><code>// Open the browser console and run:\n\n// Get the AgentBridge instance\nconst bridge = window._agentBridge;\n\n// Call the greet function\nbridge.callFunction('greet', { name: 'John' })\n  .then(result =&gt; console.log(result));\n// Output: { success: true, data: { message: \"Hello, John!\" }, ... }\n\n// Get all registered components\nbridge.callFunction('getComponents', {})\n  .then(result =&gt; console.log(result));\n// Output: Information about registered components\n\n// Trigger a click on the button\nbridge.callFunction('triggerComponentEvent', {\n  componentId: 'main-button',\n  event: 'click'\n})\n  .then(result =&gt; console.log(result));\n// This will increment the click counter\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've built your first application with AgentBridge. Here are some next steps to explore:</p> <ol> <li>Learn about the Core API in more detail</li> <li>Explore the UI component APIs for your framework:</li> <li>React Components</li> <li>Angular Components</li> <li>Flutter Components</li> <li>Learn about authentication and permissions</li> <li>Explore error handling strategies</li> </ol>"},{"location":"mobile/flutter/components/","title":"Flutter Components","text":"<p>This page documents all the UI components available in the AgentBridge Flutter SDK. These components are designed to be easily controlled by AI agents while providing a native Flutter experience.</p>"},{"location":"mobile/flutter/components/#core-components","title":"Core Components","text":"<p>The AgentBridge Flutter SDK provides several ready-to-use components that can be controlled by AI agents:</p>"},{"location":"mobile/flutter/components/#agentbutton","title":"AgentButton","text":"<p>A button component that can be controlled by AI agents.</p> <pre><code>AgentButton(\n  id: 'submit-button',\n  label: 'Submit',\n  onPressed: () {\n    // Your action here\n  },\n  style: AgentButtonStyle(\n    backgroundColor: Colors.blue,\n    textColor: Colors.white,\n    borderRadius: 8.0,\n    padding: const EdgeInsets.symmetric(\n      horizontal: 16.0, \n      vertical: 8.0\n    ),\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the button <code>label</code> String Text to display on the button <code>onPressed</code> Function Callback function when button is pressed <code>style</code> AgentButtonStyle Style configuration for the button <code>disabled</code> bool Whether the button is disabled <code>loading</code> bool Whether to show a loading indicator <code>icon</code> Icon Optional icon to display with the button <code>iconPosition</code> IconPosition Position of the icon (left or right)"},{"location":"mobile/flutter/components/#agenttextfield","title":"AgentTextField","text":"<p>A text field component that can be controlled by AI agents.</p> <pre><code>AgentTextField(\n  id: 'email-input',\n  label: 'Email Address',\n  placeholder: 'Enter your email',\n  onChanged: (value) {\n    // Handle text change\n  },\n  onSubmitted: (value) {\n    // Handle submission\n  },\n  keyboardType: TextInputType.emailAddress,\n  style: AgentTextFieldStyle(\n    borderColor: Colors.grey,\n    focusedBorderColor: Colors.blue,\n    borderRadius: 4.0,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_1","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the text field <code>label</code> String Label text for the field <code>placeholder</code> String Placeholder text when empty <code>value</code> String Current value of the text field <code>onChanged</code> Function(String) Callback when text changes <code>onSubmitted</code> Function(String) Callback when the enter key is pressed <code>keyboardType</code> TextInputType Type of keyboard to show <code>obscureText</code> bool Whether to hide the text (for passwords) <code>maxLines</code> int Maximum number of lines to show <code>minLines</code> int Minimum number of lines to show <code>maxLength</code> int Maximum length of the text <code>enabled</code> bool Whether the text field is enabled <code>style</code> AgentTextFieldStyle Style configuration for the text field"},{"location":"mobile/flutter/components/#agentswitch","title":"AgentSwitch","text":"<p>A switch component that can be toggled on or off by AI agents.</p> <pre><code>AgentSwitch(\n  id: 'notifications-switch',\n  label: 'Enable Notifications',\n  value: notificationsEnabled,\n  onChanged: (newValue) {\n    setState(() {\n      notificationsEnabled = newValue;\n    });\n  },\n  style: AgentSwitchStyle(\n    activeColor: Colors.green,\n    inactiveColor: Colors.grey,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_2","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the switch <code>label</code> String Label text for the switch <code>value</code> bool Current state of the switch <code>onChanged</code> Function(bool) Callback when switch value changes <code>disabled</code> bool Whether the switch is disabled <code>style</code> AgentSwitchStyle Style configuration for the switch"},{"location":"mobile/flutter/components/#agentdropdown","title":"AgentDropdown","text":"<p>A dropdown component that allows selection from a list of options.</p> <pre><code>AgentDropdown&lt;String&gt;(\n  id: 'country-dropdown',\n  label: 'Select Country',\n  value: selectedCountry,\n  items: countries.map((country) =&gt; \n    AgentDropdownItem(\n      value: country,\n      label: country,\n    )\n  ).toList(),\n  onChanged: (newValue) {\n    setState(() {\n      selectedCountry = newValue;\n    });\n  },\n  style: AgentDropdownStyle(\n    borderColor: Colors.grey,\n    borderRadius: 4.0,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_3","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the dropdown <code>label</code> String Label text for the dropdown <code>value</code> T Currently selected value <code>items</code> List&gt; List of dropdown items <code>onChanged</code> Function(T) Callback when selection changes <code>hint</code> String Hint text when no item is selected <code>disabled</code> bool Whether the dropdown is disabled <code>style</code> AgentDropdownStyle Style configuration for the dropdown"},{"location":"mobile/flutter/components/#agentcheckbox","title":"AgentCheckbox","text":"<p>A checkbox component that can be checked or unchecked by AI agents.</p> <pre><code>AgentCheckbox(\n  id: 'terms-checkbox',\n  label: 'I agree to the terms and conditions',\n  value: termsAccepted,\n  onChanged: (newValue) {\n    setState(() {\n      termsAccepted = newValue;\n    });\n  },\n  style: AgentCheckboxStyle(\n    activeColor: Colors.blue,\n    checkColor: Colors.white,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_4","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the checkbox <code>label</code> String Label text for the checkbox <code>value</code> bool Current state of the checkbox <code>onChanged</code> Function(bool) Callback when checkbox value changes <code>disabled</code> bool Whether the checkbox is disabled <code>style</code> AgentCheckboxStyle Style configuration for the checkbox"},{"location":"mobile/flutter/components/#agentslider","title":"AgentSlider","text":"<p>A slider component that can be adjusted by AI agents.</p> <pre><code>AgentSlider(\n  id: 'volume-slider',\n  label: 'Volume',\n  value: volume,\n  min: 0.0,\n  max: 100.0,\n  divisions: 10,\n  onChanged: (newValue) {\n    setState(() {\n      volume = newValue;\n    });\n  },\n  style: AgentSliderStyle(\n    activeColor: Colors.blue,\n    inactiveColor: Colors.grey,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_5","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the slider <code>label</code> String Label text for the slider <code>value</code> double Current value of the slider <code>min</code> double Minimum value of the slider <code>max</code> double Maximum value of the slider <code>divisions</code> int Number of discrete divisions <code>onChanged</code> Function(double) Callback when slider value changes <code>disabled</code> bool Whether the slider is disabled <code>style</code> AgentSliderStyle Style configuration for the slider"},{"location":"mobile/flutter/components/#building-custom-components","title":"Building Custom Components","text":"<p>You can create custom components that can be controlled by AI agents by using the <code>AgentComponentMixin</code>. Here's how to create a custom component:</p>"},{"location":"mobile/flutter/components/#creating-a-custom-component","title":"Creating a Custom Component","text":"<pre><code>class CustomAgentCard extends StatefulWidget with AgentComponentMixin {\n  final String id;\n  final String title;\n  final String description;\n  final VoidCallback? onTap;\n\n  CustomAgentCard({\n    required this.id,\n    required this.title,\n    this.description = '',\n    this.onTap,\n  }) : super(id: id);\n\n  @override\n  _CustomAgentCardState createState() =&gt; _CustomAgentCardState();\n\n  @override\n  Map&lt;String, dynamic&gt; getAgentProperties() {\n    return {\n      'title': title,\n      'description': description,\n      'canTap': onTap != null,\n    };\n  }\n\n  @override\n  List&lt;String&gt; getAgentActions() {\n    return ['tap'];\n  }\n\n  @override\n  Future&lt;dynamic&gt; handleAgentAction(String action, Map&lt;String, dynamic&gt; params) async {\n    if (action == 'tap' &amp;&amp; onTap != null) {\n      onTap!();\n      return true;\n    }\n    return false;\n  }\n}\n\nclass _CustomAgentCardState extends State&lt;CustomAgentCard&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      child: InkWell(\n        onTap: widget.onTap,\n        child: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(\n                widget.title,\n                style: Theme.of(context).textTheme.headline6,\n              ),\n              if (widget.description.isNotEmpty)\n                Text(\n                  widget.description,\n                  style: Theme.of(context).textTheme.bodyText2,\n                ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/components/#using-the-custom-component","title":"Using the Custom Component","text":"<pre><code>CustomAgentCard(\n  id: 'feature-card',\n  title: 'Premium Feature',\n  description: 'Unlock this feature by upgrading your account',\n  onTap: () {\n    // Handle tap\n  },\n)\n</code></pre>"},{"location":"mobile/flutter/components/#component-registration","title":"Component Registration","text":"<p>All components using <code>AgentComponentMixin</code> are automatically registered with the AgentBridge registry when they are rendered. This makes them discoverable and controllable by AI agents.</p>"},{"location":"mobile/flutter/components/#best-practices","title":"Best Practices","text":"<ol> <li>Unique IDs: Always provide unique IDs for your components</li> <li>Descriptive Properties: Make your component properties descriptive for AI agents</li> <li>Consistent Actions: Use consistent action names across similar components</li> <li>Proper State Management: Update your component state properly when actions are triggered</li> <li>Accessibility: Ensure your components are accessible to all users</li> <li>Error Handling: Handle errors gracefully in action handlers</li> </ol>"},{"location":"mobile/flutter/components/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the AgentBridge Flutter API</li> <li>Explore Mobile-Specific Features</li> <li>See Examples of AgentBridge components in action </li> </ul>"},{"location":"mobile/flutter/overview/","title":"Flutter SDK Overview","text":"<p>The AgentBridge Flutter SDK provides widgets, services, and utilities that integrate the AgentBridge framework with Flutter applications. This SDK makes it easy to expose application functionality and UI components to AI agents in a mobile environment.</p>"},{"location":"mobile/flutter/overview/#features","title":"Features","text":"<ul> <li>Flutter Integration: Seamless integration with Flutter's widget system</li> <li>State Management: Uses Flutter's state management for component tracking</li> <li>UI Widgets: Ready-to-use Flutter widgets that can be controlled by AI agents</li> <li>Mobile-Specific Functions: Functions tailored for mobile applications (vibration, sensors, etc.)</li> <li>Provider Integration: Works with Provider for dependency injection</li> <li>Utilities: Helper classes and mixins for easy integration</li> </ul>"},{"location":"mobile/flutter/overview/#installation","title":"Installation","text":"<p>Add AgentBridge to your Flutter application by adding it to your <code>pubspec.yaml</code> file:</p> <pre><code>dependencies:\n  agentbridge: ^0.1.0\n</code></pre> <p>Then run:</p> <pre><code>flutter pub get\n</code></pre>"},{"location":"mobile/flutter/overview/#basic-setup","title":"Basic Setup","text":"<p>To use AgentBridge in your Flutter application, wrap your app with the <code>AgentBridgeProvider</code>:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    // Create an AgentBridge instance\n    final bridge = AgentBridge();\n\n    return MaterialApp(\n      title: 'AgentBridge Demo',\n      home: AgentBridgeProvider(\n        bridge: bridge,\n        child: MyHomePage(),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#registering-functions","title":"Registering Functions","text":"<p>You can register functions that AI agents can call using the <code>AgentBridge</code> instance:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key}) : super(key: key);\n\n  @override\n  _MyHomePageState createState() =&gt; _MyHomePageState();\n}\n\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\n  @override\n  void initState() {\n    super.initState();\n\n    // Get the AgentBridge instance from the provider\n    final bridge = context.agentBridge();\n\n    // Register a function\n    bridge.registerFunction(\n      name: 'getDeviceInfo',\n      description: 'Get information about the device',\n      handler: (params, context) async {\n        return {\n          'platform': Theme.of(context).platform.toString(),\n          'screenSize': {\n            'width': MediaQuery.of(context).size.width,\n            'height': MediaQuery.of(context).size.height,\n          },\n          'timestamp': DateTime.now().toIso8601String(),\n        };\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('AgentBridge Demo'),\n      ),\n      body: Center(\n        child: Text('AgentBridge Flutter Demo'),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#using-agentbridge-widgets","title":"Using AgentBridge Widgets","text":"<p>The Flutter SDK provides several widgets that can be controlled by AI agents:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass MyUIPage extends StatefulWidget {\n  const MyUIPage({Key? key}) : super(key: key);\n\n  @override\n  _MyUIPageState createState() =&gt; _MyUIPageState();\n}\n\nclass _MyUIPageState extends State&lt;MyUIPage&gt; {\n  int _counter = 0;\n  String _inputValue = '';\n  bool _switchValue = false;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('AgentBridge Widgets'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            // Using AgentButton\n            AgentButton(\n              agentId: 'counter-button',\n              onPressed: _incrementCounter,\n              child: Text('Increment: $_counter'),\n            ),\n\n            // Using AgentTextField\n            AgentTextField(\n              agentId: 'text-input',\n              initialValue: _inputValue,\n              hintText: 'Enter some text',\n              onChanged: (value) {\n                setState(() {\n                  _inputValue = value;\n                });\n              },\n            ),\n\n            // Using AgentSwitch\n            AgentSwitch(\n              agentId: 'toggle-switch',\n              initialValue: _switchValue,\n              onChanged: (value) {\n                setState(() {\n                  _switchValue = value;\n                });\n              },\n            ),\n\n            // Using AgentDropdown\n            AgentDropdown&lt;String&gt;(\n              agentId: 'dropdown',\n              initialValue: 'option1',\n              items: [\n                DropdownMenuItem(\n                  value: 'option1',\n                  child: Text('Option 1'),\n                ),\n                DropdownMenuItem(\n                  value: 'option2',\n                  child: Text('Option 2'),\n                ),\n                DropdownMenuItem(\n                  value: 'option3',\n                  child: Text('Option 3'),\n                ),\n              ],\n              onChanged: (value) {\n                print('Selected: $value');\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#using-the-agentcomponentmixin","title":"Using the AgentComponentMixin","text":"<p>For more complex widgets, you can use the <code>AgentComponentMixin</code> to create your own components that can be controlled by AI agents:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass MyCustomWidget extends StatefulWidget {\n  final String agentId;\n  final String title;\n\n  const MyCustomWidget({\n    Key? key,\n    required this.agentId,\n    required this.title,\n  }) : super(key: key);\n\n  @override\n  _MyCustomWidgetState createState() =&gt; _MyCustomWidgetState();\n}\n\nclass _MyCustomWidgetState extends State&lt;MyCustomWidget&gt; with AgentComponentMixin {\n  bool _expanded = false;\n\n  @override\n  String get agentId =&gt; widget.agentId;\n\n  @override\n  String get agentType =&gt; 'custom-widget';\n\n  @override\n  Map&lt;String, dynamic&gt; get agentProps =&gt; {\n    'title': widget.title,\n    'expanded': _expanded,\n  };\n\n  void _toggleExpanded() {\n    setState(() {\n      _expanded = !_expanded;\n    });\n\n    // Update the component state\n    updateAgentState({\n      'expanded': _expanded,\n      'lastToggled': DateTime.now().toIso8601String(),\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      child: Column(\n        children: [\n          ListTile(\n            title: Text(widget.title),\n            trailing: IconButton(\n              icon: Icon(_expanded ? Icons.expand_less : Icons.expand_more),\n              onPressed: _toggleExpanded,\n            ),\n          ),\n          if (_expanded)\n            Padding(\n              padding: const EdgeInsets.all(16.0),\n              child: Text('Expanded content here'),\n            ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#calling-functions","title":"Calling Functions","text":"<p>You can call functions registered with AgentBridge from your Flutter code:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass FunctionCallPage extends StatefulWidget {\n  const FunctionCallPage({Key? key}) : super(key: key);\n\n  @override\n  _FunctionCallPageState createState() =&gt; _FunctionCallPageState();\n}\n\nclass _FunctionCallPageState extends State&lt;FunctionCallPage&gt; {\n  String _result = 'No result yet';\n\n  Future&lt;void&gt; _callFunction() async {\n    try {\n      // Get the adapter from the context\n      final adapter = context.adapter();\n\n      // Call a function\n      final result = await adapter.callFunction(\n        'getDeviceInfo',\n        {},\n      );\n\n      setState(() {\n        _result = result.data.toString();\n      });\n    } catch (e) {\n      setState(() {\n        _result = 'Error: $e';\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Function Call Demo'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            ElevatedButton(\n              onPressed: _callFunction,\n              child: const Text('Call Function'),\n            ),\n            const SizedBox(height: 20),\n            Text('Result: $_result'),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#mobile-specific-features","title":"Mobile-Specific Features","text":"<p>The Flutter SDK provides mobile-specific features that are not available in the web SDKs:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass MobileFeaturesPage extends StatefulWidget {\n  const MobileFeaturesPage({Key? key}) : super(key: key);\n\n  @override\n  _MobileFeaturesPageState createState() =&gt; _MobileFeaturesPageState();\n}\n\nclass _MobileFeaturesPageState extends State&lt;MobileFeaturesPage&gt; {\n  @override\n  void initState() {\n    super.initState();\n\n    // Get the AgentBridge instance from the provider\n    final bridge = context.agentBridge();\n\n    // Register mobile-specific functions\n    bridge.registerFunction(\n      name: 'vibrate',\n      description: 'Make the device vibrate',\n      handler: (params, context) async {\n        // In a real implementation, we would use HapticFeedback or Vibration plugin\n        print('Vibrating device...');\n        return { 'success': true };\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Mobile Features'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            ElevatedButton(\n              onPressed: () {\n                context.callFunction('vibrate', {});\n              },\n              child: const Text('Vibrate Device'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about the Flutter components</li> <li>Explore the Core API</li> <li>Learn about authentication and permissions </li> </ul>"},{"location":"mobile/react-native/components/","title":"React Native Components","text":"<p>This page documents all the UI components available in the AgentBridge React Native SDK. These components are designed to be easily controlled by AI agents while providing a native mobile experience.</p>"},{"location":"mobile/react-native/components/#core-components","title":"Core Components","text":"<p>The AgentBridge React Native SDK provides several ready-to-use components that can be controlled by AI agents:</p>"},{"location":"mobile/react-native/components/#agentbutton","title":"AgentButton","text":"<p>A button component that can be controlled by AI agents.</p> <pre><code>import { AgentButton } from '@agentbridge/react-native';\n\nfunction MyComponent() {\n  return (\n    &lt;AgentButton\n      id=\"submit-button\"\n      label=\"Submit\"\n      onPress={() =&gt; {\n        // Your action here\n      }}\n      style={{\n        backgroundColor: '#4285F4',\n        borderRadius: 8,\n        padding: 12,\n      }}\n      textStyle={{\n        color: 'white',\n        fontSize: 16,\n        fontWeight: 'bold',\n      }}\n      disabled={false}\n      loading={false}\n      icon=\"arrow-right\"\n      iconPosition=\"right\"\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#props","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the button <code>label</code> string Text to display on the button <code>onPress</code> function Callback function when button is pressed <code>style</code> object Style object for the button container <code>textStyle</code> object Style object for the button text <code>disabled</code> boolean Whether the button is disabled <code>loading</code> boolean Whether to show a loading indicator <code>icon</code> string | ReactNode Icon to display with the button <code>iconPosition</code> 'left' | 'right' Position of the icon"},{"location":"mobile/react-native/components/#agenttextfield","title":"AgentTextField","text":"<p>A text field component that can be controlled by AI agents.</p> <pre><code>import { AgentTextField } from '@agentbridge/react-native';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [value, setValue] = useState('');\n\n  return (\n    &lt;AgentTextField\n      id=\"email-input\"\n      label=\"Email Address\"\n      placeholder=\"Enter your email\"\n      value={value}\n      onChangeText={setValue}\n      onSubmitEditing={() =&gt; {\n        // Handle submission\n      }}\n      keyboardType=\"email-address\"\n      style={{\n        borderColor: '#ddd',\n        borderWidth: 1,\n        borderRadius: 8,\n        padding: 10,\n      }}\n      labelStyle={{\n        fontSize: 16,\n        color: '#333',\n        marginBottom: 8,\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#props_1","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the text field <code>label</code> string Label text for the field <code>placeholder</code> string Placeholder text when empty <code>value</code> string Current value of the text field <code>onChangeText</code> function Callback when text changes <code>onSubmitEditing</code> function Callback when the return key is pressed <code>keyboardType</code> string Type of keyboard to display <code>secureTextEntry</code> boolean Whether to hide the text (for passwords) <code>style</code> object Style object for the text input <code>labelStyle</code> object Style object for the label <code>disabled</code> boolean Whether the text field is disabled <code>error</code> string Error message to display <code>maxLength</code> number Maximum length of the text <code>multiline</code> boolean Whether to allow multiple lines of text <code>numberOfLines</code> number Number of lines to display (for multiline) <code>autoFocus</code> boolean Whether to auto-focus the input"},{"location":"mobile/react-native/components/#agentswitch","title":"AgentSwitch","text":"<p>A switch component that can be toggled on or off by AI agents.</p> <pre><code>import { AgentSwitch } from '@agentbridge/react-native';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [isEnabled, setIsEnabled] = useState(false);\n\n  return (\n    &lt;AgentSwitch\n      id=\"notifications-switch\"\n      label=\"Enable Notifications\"\n      value={isEnabled}\n      onValueChange={setIsEnabled}\n      disabled={false}\n      style={{\n        marginVertical: 10,\n      }}\n      trackColor={{ false: '#767577', true: '#81b0ff' }}\n      thumbColor={isEnabled ? '#f5dd4b' : '#f4f3f4'}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#props_2","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the switch <code>label</code> string Label text for the switch <code>value</code> boolean Current state of the switch <code>onValueChange</code> function Callback when switch value changes <code>disabled</code> boolean Whether the switch is disabled <code>style</code> object Style object for the container <code>labelStyle</code> object Style object for the label <code>trackColor</code> object Colors for the track ({ false: string, true: string }) <code>thumbColor</code> string Color of the foreground switch grip <code>labelPosition</code> 'left' | 'right' Position of the label"},{"location":"mobile/react-native/components/#agentdropdown","title":"AgentDropdown","text":"<p>A dropdown component that allows selection from a list of options.</p> <pre><code>import { AgentDropdown } from '@agentbridge/react-native';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [selected, setSelected] = useState('');\n\n  const items = [\n    { value: 'us', label: 'United States' },\n    { value: 'ca', label: 'Canada' },\n    { value: 'mx', label: 'Mexico' },\n  ];\n\n  return (\n    &lt;AgentDropdown\n      id=\"country-dropdown\"\n      label=\"Select Country\"\n      value={selected}\n      items={items}\n      onValueChange={(value) =&gt; setSelected(value)}\n      placeholder=\"Choose a country\"\n      disabled={false}\n      style={{\n        borderColor: '#ddd',\n        borderWidth: 1,\n        borderRadius: 8,\n        padding: 10,\n      }}\n      labelStyle={{\n        fontSize: 16,\n        color: '#333',\n        marginBottom: 8,\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#props_3","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the dropdown <code>label</code> string Label text for the dropdown <code>value</code> any Currently selected value <code>items</code> array Array of items (objects with value and label) <code>onValueChange</code> function Callback when selection changes <code>placeholder</code> string Placeholder text when no item is selected <code>disabled</code> boolean Whether the dropdown is disabled <code>style</code> object Style object for the dropdown <code>labelStyle</code> object Style object for the label <code>dropdownStyle</code> object Style object for the dropdown menu <code>error</code> string Error message to display"},{"location":"mobile/react-native/components/#agentcheckbox","title":"AgentCheckbox","text":"<p>A checkbox component that can be checked or unchecked by AI agents.</p> <pre><code>import { AgentCheckbox } from '@agentbridge/react-native';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    &lt;AgentCheckbox\n      id=\"terms-checkbox\"\n      label=\"I agree to the terms and conditions\"\n      value={checked}\n      onValueChange={setChecked}\n      disabled={false}\n      style={{\n        marginVertical: 10,\n      }}\n      checkboxColor=\"#4285F4\"\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#props_4","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the checkbox <code>label</code> string Label text for the checkbox <code>value</code> boolean Current state of the checkbox <code>onValueChange</code> function Callback when checkbox value changes <code>disabled</code> boolean Whether the checkbox is disabled <code>style</code> object Style object for the container <code>labelStyle</code> object Style object for the label <code>checkboxColor</code> string Color of the checkbox when checked"},{"location":"mobile/react-native/components/#agentslider","title":"AgentSlider","text":"<p>A slider component that can be adjusted by AI agents.</p> <pre><code>import { AgentSlider } from '@agentbridge/react-native';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [value, setValue] = useState(50);\n\n  return (\n    &lt;AgentSlider\n      id=\"volume-slider\"\n      label=\"Volume\"\n      value={value}\n      onValueChange={setValue}\n      minimumValue={0}\n      maximumValue={100}\n      step={1}\n      disabled={false}\n      style={{\n        marginVertical: 15,\n      }}\n      labelStyle={{\n        fontSize: 16,\n        color: '#333',\n        marginBottom: 8,\n      }}\n      minimumTrackTintColor=\"#4285F4\"\n      maximumTrackTintColor=\"#ddd\"\n      thumbTintColor=\"white\"\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#props_5","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the slider <code>label</code> string Label text for the slider <code>value</code> number Current value of the slider <code>onValueChange</code> function Callback when slider value changes <code>minimumValue</code> number Minimum value of the slider <code>maximumValue</code> number Maximum value of the slider <code>step</code> number Step increment value <code>disabled</code> boolean Whether the slider is disabled <code>style</code> object Style object for the container <code>labelStyle</code> object Style object for the label <code>minimumTrackTintColor</code> string Color of the track to the left of the thumb <code>maximumTrackTintColor</code> string Color of the track to the right of the thumb <code>thumbTintColor</code> string Color of the thumb <code>showValue</code> boolean Whether to show the current value"},{"location":"mobile/react-native/components/#mobile-specific-components","title":"Mobile-Specific Components","text":"<p>AgentBridge provides additional components specific to mobile applications:</p>"},{"location":"mobile/react-native/components/#agenttouchable","title":"AgentTouchable","text":"<p>A touchable component that can be tapped by AI agents.</p> <pre><code>import { AgentTouchable } from '@agentbridge/react-native';\n\nfunction MyComponent() {\n  return (\n    &lt;AgentTouchable\n      id=\"card-touchable\"\n      onPress={() =&gt; {\n        // Handle press\n      }}\n      style={{\n        backgroundColor: 'white',\n        borderRadius: 8,\n        padding: 16,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 4,\n        elevation: 2,\n      }}\n    &gt;\n      &lt;Text style={{ fontSize: 18, fontWeight: 'bold' }}&gt;Card Title&lt;/Text&gt;\n      &lt;Text style={{ marginTop: 8 }}&gt;Card description text goes here&lt;/Text&gt;\n    &lt;/AgentTouchable&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#props_6","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the touchable area <code>onPress</code> function Callback when pressed <code>onLongPress</code> function Callback when long pressed <code>style</code> object Style object for the touchable area <code>disabled</code> boolean Whether the touchable is disabled <code>activeOpacity</code> number Opacity when pressed (0-1) <code>pressEffect</code> 'opacity' | 'highlight' | 'none' Type of press effect"},{"location":"mobile/react-native/components/#agentflatlist","title":"AgentFlatList","text":"<p>A list component that can be scrolled and controlled by AI agents.</p> <pre><code>import { AgentFlatList } from '@agentbridge/react-native';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [items, setItems] = useState([\n    { id: '1', title: 'Item 1' },\n    { id: '2', title: 'Item 2' },\n    { id: '3', title: 'Item 3' },\n  ]);\n\n  const renderItem = ({ item }) =&gt; (\n    &lt;AgentTouchable\n      id={`item-${item.id}`}\n      onPress={() =&gt; console.log(`Pressed item ${item.id}`)}\n      style={{ padding: 16, borderBottomWidth: 1, borderBottomColor: '#eee' }}\n    &gt;\n      &lt;Text&gt;{item.title}&lt;/Text&gt;\n    &lt;/AgentTouchable&gt;\n  );\n\n  return (\n    &lt;AgentFlatList\n      id=\"my-list\"\n      data={items}\n      renderItem={renderItem}\n      keyExtractor={(item) =&gt; item.id}\n      style={{ flex: 1 }}\n      onRefresh={() =&gt; {\n        // Handle refresh\n      }}\n      refreshing={false}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#props_7","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the list <code>data</code> array Array of data items to render <code>renderItem</code> function Function to render each item <code>keyExtractor</code> function Function to extract a key for each item <code>style</code> object Style object for the list <code>onRefresh</code> function Callback when pull-to-refresh is triggered <code>refreshing</code> boolean Whether the list is currently refreshing <code>onEndReached</code> function Callback when end of list is reached <code>onEndReachedThreshold</code> number How far from the end to trigger onEndReached <code>horizontal</code> boolean Whether the list should render horizontally"},{"location":"mobile/react-native/components/#building-custom-components","title":"Building Custom Components","text":"<p>You can create custom components that can be controlled by AI agents by using the <code>withAgentComponent</code> higher-order component (HOC) or the <code>useAgentComponent</code> hook.</p>"},{"location":"mobile/react-native/components/#using-the-hoc","title":"Using the HOC","text":"<pre><code>import { withAgentComponent } from '@agentbridge/react-native';\nimport { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\n\nfunction CustomCard({ id, title, description, onTap, isAgentControlled, registerAgentAction }) {\n  const [isPressed, setIsPressed] = useState(false);\n\n  // Register actions for the AI agent\n  useState(() =&gt; {\n    if (isAgentControlled) {\n      registerAgentAction('tap', () =&gt; {\n        if (onTap) onTap();\n        return true;\n      });\n    }\n  }, [isAgentControlled, registerAgentAction, onTap]);\n\n  return (\n    &lt;TouchableOpacity\n      activeOpacity={0.7}\n      onPress={() =&gt; {\n        setIsPressed(true);\n        setTimeout(() =&gt; setIsPressed(false), 200);\n        if (onTap) onTap();\n      }}\n      style={[\n        styles.card,\n        isPressed &amp;&amp; styles.cardPressed\n      ]}\n    &gt;\n      &lt;Text style={styles.title}&gt;{title}&lt;/Text&gt;\n      {description ? &lt;Text style={styles.description}&gt;{description}&lt;/Text&gt; : null}\n    &lt;/TouchableOpacity&gt;\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 16,\n    marginVertical: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  cardPressed: {\n    backgroundColor: '#f8f8f8',\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  description: {\n    fontSize: 14,\n    color: '#666',\n  },\n});\n\n// Wrap the component with the agent HOC\nexport default withAgentComponent(CustomCard, {\n  // Properties exposed to the AI agent\n  getAgentProperties: (props) =&gt; ({\n    title: props.title,\n    description: props.description,\n    canTap: !!props.onTap,\n  }),\n  // Actions that can be performed by the AI agent\n  agentActions: ['tap'],\n});\n</code></pre>"},{"location":"mobile/react-native/components/#using-the-hook","title":"Using the Hook","text":"<pre><code>import { useAgentComponent } from '@agentbridge/react-native';\nimport { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\n\nexport default function CustomCard({ id, title, description, onTap }) {\n  const [isPressed, setIsPressed] = useState(false);\n\n  // Use the hook to make the component controllable by AI agents\n  const { registerAgentAction } = useAgentComponent(id, {\n    // Properties exposed to the AI agent\n    properties: {\n      title,\n      description,\n      canTap: !!onTap,\n    },\n    // Actions that can be performed by the AI agent\n    actions: {\n      tap: () =&gt; {\n        if (onTap) onTap();\n        return true;\n      },\n    },\n  });\n\n  return (\n    &lt;TouchableOpacity\n      activeOpacity={0.7}\n      onPress={() =&gt; {\n        setIsPressed(true);\n        setTimeout(() =&gt; setIsPressed(false), 200);\n        if (onTap) onTap();\n      }}\n      style={[\n        styles.card,\n        isPressed &amp;&amp; styles.cardPressed\n      ]}\n    &gt;\n      &lt;Text style={styles.title}&gt;{title}&lt;/Text&gt;\n      {description ? &lt;Text style={styles.description}&gt;{description}&lt;/Text&gt; : null}\n    &lt;/TouchableOpacity&gt;\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 16,\n    marginVertical: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  cardPressed: {\n    backgroundColor: '#f8f8f8',\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  description: {\n    fontSize: 14,\n    color: '#666',\n  },\n});\n</code></pre>"},{"location":"mobile/react-native/components/#using-the-custom-component","title":"Using the Custom Component","text":"<pre><code>import CustomCard from './CustomCard';\n\nfunction MyComponent() {\n  return (\n    &lt;CustomCard\n      id=\"feature-card\"\n      title=\"Premium Feature\"\n      description=\"Unlock this feature by upgrading your account\"\n      onTap={() =&gt; {\n        // Handle tap\n        console.log('Card tapped');\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#component-provider","title":"Component Provider","text":"<p>Wrap your application with the <code>AgentBridgeProvider</code> to enable agent control:</p> <pre><code>import { AgentBridgeProvider } from '@agentbridge/react-native';\n\nexport default function App() {\n  return (\n    &lt;AgentBridgeProvider apiKey=\"your-api-key\"&gt;\n      {/* Your application components */}\n      &lt;YourComponent /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#mobile-specific-features","title":"Mobile-Specific Features","text":"<p>AgentBridge for React Native provides access to device-specific features:</p>"},{"location":"mobile/react-native/components/#device-vibration","title":"Device Vibration","text":"<pre><code>import { useAgentBridge } from '@agentbridge/react-native';\n\nfunction MyComponent() {\n  const { registerFunction } = useAgentBridge();\n\n  // Register a function to trigger device vibration\n  useEffect(() =&gt; {\n    registerFunction('vibrate', (pattern = 'default') =&gt; {\n      switch (pattern) {\n        case 'short':\n          Vibration.vibrate(10);\n          break;\n        case 'long':\n          Vibration.vibrate(500);\n          break;\n        case 'double':\n          Vibration.vibrate([0, 100, 50, 100]);\n          break;\n        default:\n          Vibration.vibrate(100);\n      }\n      return true;\n    });\n  }, [registerFunction]);\n\n  return (\n    // Component content\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#accessing-device-information","title":"Accessing Device Information","text":"<pre><code>import { useAgentBridge } from '@agentbridge/react-native';\nimport DeviceInfo from 'react-native-device-info';\n\nfunction MyComponent() {\n  const { registerFunction } = useAgentBridge();\n\n  // Register a function to get device information\n  useEffect(() =&gt; {\n    registerFunction('getDeviceInfo', async () =&gt; {\n      return {\n        model: DeviceInfo.getModel(),\n        brand: DeviceInfo.getBrand(),\n        systemVersion: DeviceInfo.getSystemVersion(),\n        isTablet: DeviceInfo.isTablet(),\n        batteryLevel: await DeviceInfo.getBatteryLevel(),\n      };\n    });\n  }, [registerFunction]);\n\n  return (\n    // Component content\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#best-practices","title":"Best Practices","text":"<ol> <li>Unique IDs: Always provide unique IDs for your components</li> <li>Descriptive Properties: Make your component properties descriptive for AI agents</li> <li>Consistent Actions: Use consistent action names across similar components</li> <li>Platform Considerations: Account for platform differences (iOS vs Android)</li> <li>Performance: Optimize component rendering to ensure smooth performance</li> <li>Accessibility: Ensure your components work with screen readers and other accessibility tools</li> <li>Error Handling: Handle errors gracefully in action handlers</li> <li>TypeScript: Use TypeScript for better type checking and developer experience</li> </ol>"},{"location":"mobile/react-native/components/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about React Native Hooks provided by AgentBridge</li> <li>Explore Mobile SDK Features</li> <li>See Examples of AgentBridge components in action </li> </ul>"},{"location":"mobile/react-native/overview/","title":"Overview","text":"<p>This page is under construction. It will contain documentation about Overview in the React Native section.</p>"},{"location":"mobile/react-native/overview/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"web/angular/components/","title":"Angular Components","text":"<p>This page documents all the UI components available in the AgentBridge Angular SDK. These components are designed to be easily controlled by AI agents while providing a seamless integration with Angular applications.</p>"},{"location":"web/angular/components/#core-components","title":"Core Components","text":"<p>The AgentBridge Angular SDK provides several ready-to-use components that can be controlled by AI agents:</p>"},{"location":"web/angular/components/#agentbutton","title":"AgentButton","text":"<p>A button component that can be controlled by AI agents.</p> <pre><code>&lt;agent-button\n  id=\"submit-button\"\n  label=\"Submit\"\n  (click)=\"handleClick()\"\n  [disabled]=\"isSubmitting\"\n  [loading]=\"isSubmitting\"\n  [style]=\"{\n    backgroundColor: '#4285F4',\n    color: 'white',\n    borderRadius: '4px',\n    padding: '8px 16px'\n  }\"\n  icon=\"arrow-right\"\n  iconPosition=\"right\"&gt;\n&lt;/agent-button&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  isSubmitting = false;\n\n  handleClick() {\n    this.isSubmitting = true;\n    // Your action here\n    setTimeout(() =&gt; {\n      this.isSubmitting = false;\n    }, 1000);\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#inputs","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the button <code>label</code> string Text to display on the button <code>disabled</code> boolean Whether the button is disabled <code>loading</code> boolean Whether to show a loading indicator <code>style</code> object Inline styles for the button <code>class</code> string CSS class names to apply <code>icon</code> string Icon to display with the button <code>iconPosition</code> 'left' | 'right' Position of the icon"},{"location":"web/angular/components/#outputs","title":"Outputs","text":"Output Type Description <code>click</code> EventEmitter Emitted when button is clicked"},{"location":"web/angular/components/#agenttextfield","title":"AgentTextField","text":"<p>A text field component that can be controlled by AI agents.</p> <pre><code>&lt;agent-text-field\n  id=\"email-input\"\n  label=\"Email Address\"\n  placeholder=\"Enter your email\"\n  [(ngModel)]=\"email\"\n  (submitted)=\"handleSubmit()\"\n  type=\"email\"\n  [style]=\"{\n    borderColor: '#ddd',\n    borderRadius: '4px',\n    padding: '8px'\n  }\"&gt;\n&lt;/agent-text-field&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  email = '';\n\n  handleSubmit() {\n    console.log('Submitted email:', this.email);\n    // Handle submission\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_1","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the text field <code>label</code> string Label text for the field <code>placeholder</code> string Placeholder text when empty <code>value</code> string Current value of the text field <code>type</code> string Input type (text, email, password, etc.) <code>disabled</code> boolean Whether the text field is disabled <code>style</code> object Inline styles for the text field <code>class</code> string CSS class names to apply <code>error</code> string Error message to display <code>maxLength</code> number Maximum length of the text <code>rows</code> number Number of rows (for textarea) <code>autoFocus</code> boolean Whether to auto-focus the input"},{"location":"web/angular/components/#outputs_1","title":"Outputs","text":"Output Type Description <code>valueChange</code> EventEmitter Emitted when text changes <code>submitted</code> EventEmitter Emitted when the enter key is pressed <code>blurred</code> EventEmitter Emitted when the input loses focus"},{"location":"web/angular/components/#agentswitch","title":"AgentSwitch","text":"<p>A switch component that can be toggled on or off by AI agents.</p> <pre><code>&lt;agent-switch\n  id=\"notifications-switch\"\n  label=\"Enable Notifications\"\n  [(ngModel)]=\"notificationsEnabled\"\n  [disabled]=\"false\"\n  [style]=\"{\n    activeColor: '#4CAF50',\n    inactiveColor: '#ccc'\n  }\"&gt;\n&lt;/agent-switch&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  notificationsEnabled = false;\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_2","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the switch <code>label</code> string Label text for the switch <code>checked</code> boolean Current state of the switch <code>disabled</code> boolean Whether the switch is disabled <code>style</code> object Inline styles for the switch <code>class</code> string CSS class names to apply <code>labelPosition</code> 'left' | 'right' Position of the label"},{"location":"web/angular/components/#outputs_2","title":"Outputs","text":"Output Type Description <code>checkedChange</code> EventEmitter Emitted when switch value changes"},{"location":"web/angular/components/#agentdropdown","title":"AgentDropdown","text":"<p>A dropdown component that allows selection from a list of options.</p> <pre><code>&lt;agent-dropdown\n  id=\"country-dropdown\"\n  label=\"Select Country\"\n  [(ngModel)]=\"selectedCountry\"\n  [options]=\"countries\"\n  placeholder=\"Choose a country\"\n  [disabled]=\"false\"\n  [style]=\"{\n    borderColor: '#ddd',\n    borderRadius: '4px'\n  }\"&gt;\n&lt;/agent-dropdown&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  selectedCountry = '';\n\n  countries = [\n    { value: 'us', label: 'United States' },\n    { value: 'ca', label: 'Canada' },\n    { value: 'mx', label: 'Mexico' }\n  ];\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_3","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the dropdown <code>label</code> string Label text for the dropdown <code>value</code> any Currently selected value <code>options</code> Array&lt;{value: any, label: string}&gt; Array of options <code>placeholder</code> string Placeholder text when no option is selected <code>disabled</code> boolean Whether the dropdown is disabled <code>style</code> object Inline styles for the dropdown <code>class</code> string CSS class names to apply <code>error</code> string Error message to display <code>multiple</code> boolean Whether multiple options can be selected <code>clearable</code> boolean Whether the selection can be cleared"},{"location":"web/angular/components/#outputs_3","title":"Outputs","text":"Output Type Description <code>valueChange</code> EventEmitter Emitted when selection changes <code>opened</code> EventEmitter Emitted when dropdown is opened <code>closed</code> EventEmitter Emitted when dropdown is closed"},{"location":"web/angular/components/#agentcheckbox","title":"AgentCheckbox","text":"<p>A checkbox component that can be checked or unchecked by AI agents.</p> <pre><code>&lt;agent-checkbox\n  id=\"terms-checkbox\"\n  label=\"I agree to the terms and conditions\"\n  [(ngModel)]=\"termsAccepted\"\n  [disabled]=\"false\"\n  [style]=\"{\n    accentColor: '#4285F4'\n  }\"&gt;\n&lt;/agent-checkbox&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  termsAccepted = false;\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_4","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the checkbox <code>label</code> string Label text for the checkbox <code>checked</code> boolean Current state of the checkbox <code>disabled</code> boolean Whether the checkbox is disabled <code>style</code> object Inline styles for the checkbox <code>class</code> string CSS class names to apply <code>indeterminate</code> boolean Whether to show indeterminate state <code>error</code> string Error message to display"},{"location":"web/angular/components/#outputs_4","title":"Outputs","text":"Output Type Description <code>checkedChange</code> EventEmitter Emitted when checkbox value changes"},{"location":"web/angular/components/#agentslider","title":"AgentSlider","text":"<p>A slider component that can be adjusted by AI agents.</p> <pre><code>&lt;agent-slider\n  id=\"volume-slider\"\n  label=\"Volume\"\n  [(ngModel)]=\"volume\"\n  [min]=\"0\"\n  [max]=\"100\"\n  [step]=\"1\"\n  [disabled]=\"false\"\n  [style]=\"{\n    activeColor: '#4285F4',\n    inactiveColor: '#ddd',\n    thumbColor: 'white'\n  }\"&gt;\n&lt;/agent-slider&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  volume = 50;\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_5","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the slider <code>label</code> string Label text for the slider <code>value</code> number Current value of the slider <code>min</code> number Minimum value of the slider <code>max</code> number Maximum value of the slider <code>step</code> number Step increment value <code>disabled</code> boolean Whether the slider is disabled <code>style</code> object Inline styles for the slider <code>class</code> string CSS class names to apply <code>showValue</code> boolean Whether to show the current value <code>orientation</code> 'horizontal' | 'vertical' Orientation of the slider"},{"location":"web/angular/components/#outputs_5","title":"Outputs","text":"Output Type Description <code>valueChange</code> EventEmitter Emitted when slider value changes"},{"location":"web/angular/components/#building-custom-components","title":"Building Custom Components","text":"<p>You can create custom components that can be controlled by AI agents by using the <code>AgentComponentDirective</code> or by extending the <code>BaseAgentComponent</code> class.</p>"},{"location":"web/angular/components/#using-agentcomponentdirective","title":"Using AgentComponentDirective","text":"<pre><code>import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { AgentComponentDirective } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-custom-card',\n  template: `\n    &lt;div class=\"custom-card\" \n         [ngClass]=\"{'hovered': isHovered}\"\n         (click)=\"handleTap()\"\n         (mouseenter)=\"isHovered = true\"\n         (mouseleave)=\"isHovered = false\"\n         [style]=\"getCardStyle()\"&gt;\n      &lt;h3&gt;{{ title }}&lt;/h3&gt;\n      &lt;p *ngIf=\"description\"&gt;{{ description }}&lt;/p&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .custom-card {\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 16px;\n      transition: all 0.2s;\n    }\n    .custom-card.hovered {\n      background-color: #f9f9f9;\n    }\n  `],\n})\nexport class CustomCardComponent {\n  @Input() id!: string;\n  @Input() title!: string;\n  @Input() description: string = '';\n  @Output() tap = new EventEmitter&lt;void&gt;();\n\n  isHovered = false;\n\n  constructor(private agentComponent: AgentComponentDirective) {\n    // Register the component with AgentBridge\n    this.agentComponent.registerComponent(this.id, {\n      // Properties exposed to the AI agent\n      getProperties: () =&gt; ({\n        title: this.title,\n        description: this.description,\n        canTap: this.tap.observers.length &gt; 0,\n      }),\n      // Actions that can be performed by the AI agent\n      actions: {\n        tap: () =&gt; {\n          this.handleTap();\n          return true;\n        }\n      }\n    });\n  }\n\n  handleTap() {\n    if (this.tap.observers.length &gt; 0) {\n      this.tap.emit();\n    }\n  }\n\n  getCardStyle() {\n    return {\n      cursor: this.tap.observers.length &gt; 0 ? 'pointer' : 'default',\n    };\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#extending-baseagentcomponent","title":"Extending BaseAgentComponent","text":"<pre><code>import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BaseAgentComponent } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-custom-card',\n  template: `\n    &lt;div class=\"custom-card\" \n         [ngClass]=\"{'hovered': isHovered}\"\n         (click)=\"handleTap()\"\n         (mouseenter)=\"isHovered = true\"\n         (mouseleave)=\"isHovered = false\"\n         [style]=\"getCardStyle()\"&gt;\n      &lt;h3&gt;{{ title }}&lt;/h3&gt;\n      &lt;p *ngIf=\"description\"&gt;{{ description }}&lt;/p&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .custom-card {\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 16px;\n      transition: all 0.2s;\n    }\n    .custom-card.hovered {\n      background-color: #f9f9f9;\n    }\n  `],\n})\nexport class CustomCardComponent extends BaseAgentComponent {\n  @Input() title!: string;\n  @Input() description: string = '';\n  @Output() tap = new EventEmitter&lt;void&gt;();\n\n  isHovered = false;\n\n  // Override the getAgentProperties method from BaseAgentComponent\n  getAgentProperties() {\n    return {\n      title: this.title,\n      description: this.description,\n      canTap: this.tap.observers.length &gt; 0,\n    };\n  }\n\n  // Override the getAgentActions method from BaseAgentComponent\n  getAgentActions() {\n    return ['tap'];\n  }\n\n  // Override the handleAgentAction method from BaseAgentComponent\n  handleAgentAction(action: string, params: any) {\n    if (action === 'tap') {\n      this.handleTap();\n      return true;\n    }\n    return false;\n  }\n\n  handleTap() {\n    if (this.tap.observers.length &gt; 0) {\n      this.tap.emit();\n    }\n  }\n\n  getCardStyle() {\n    return {\n      cursor: this.tap.observers.length &gt; 0 ? 'pointer' : 'default',\n    };\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#using-the-custom-component","title":"Using the Custom Component","text":"<pre><code>&lt;app-custom-card\n  id=\"feature-card\"\n  title=\"Premium Feature\"\n  description=\"Unlock this feature by upgrading your account\"\n  (tap)=\"handleCardTap()\"&gt;\n&lt;/app-custom-card&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  handleCardTap() {\n    console.log('Card tapped');\n    // Handle tap\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#agentbridge-module","title":"AgentBridge Module","text":"<p>To use AgentBridge components in your Angular application, you need to import the <code>AgentBridgeModule</code> in your app module:</p> <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { AgentBridgeModule } from '@agentbridge/angular';\n\nimport { AppComponent } from './app.component';\nimport { MyComponent } from './my-component.component';\nimport { CustomCardComponent } from './custom-card.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MyComponent,\n    CustomCardComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AgentBridgeModule.forRoot({\n      apiKey: 'your-api-key',\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre>"},{"location":"web/angular/components/#best-practices","title":"Best Practices","text":"<ol> <li>Unique IDs: Always provide unique IDs for your components</li> <li>Descriptive Properties: Make your component properties descriptive for AI agents</li> <li>Consistent Actions: Use consistent action names across similar components</li> <li>NgModel Integration: Use Angular's FormsModule and ngModel for easy two-way binding</li> <li>Angular Change Detection: Respect Angular's change detection cycle when handling agent actions</li> <li>Accessibility: Ensure your components adhere to accessibility standards</li> <li>Typed Interfaces: Use TypeScript interfaces for better type checking and developer experience</li> <li>Lazy Loading: Consider the impact of AgentBridge components on bundle size and lazy loading</li> </ol>"},{"location":"web/angular/components/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Angular Services provided by AgentBridge</li> <li>Explore Web SDK Features</li> <li>See Examples of AgentBridge components in action </li> </ul>"},{"location":"web/angular/overview/","title":"Angular SDK Overview","text":"<p>The AgentBridge Angular SDK provides components, services, and directives that integrate the AgentBridge framework with Angular applications. This SDK makes it easy to expose application functionality and UI components to AI agents.</p>"},{"location":"web/angular/overview/#features","title":"Features","text":"<ul> <li>Integration with Angular DI: Uses Angular's dependency injection system for services</li> <li>Reactive State Management: Observable-based state management for component tracking</li> <li>Angular Forms Integration: Works with Angular's forms system</li> <li>UI Components: Ready-to-use Angular components that can be controlled by AI agents</li> <li>Directives: Directives to easily add AI control to existing components</li> <li>Services: Angular services to manage the AgentBridge instance and its functionality</li> </ul>"},{"location":"web/angular/overview/#installation","title":"Installation","text":"<p>Install the AgentBridge Angular SDK using npm:</p> <pre><code>npm install @agentbridge/core @agentbridge/angular\n</code></pre>"},{"location":"web/angular/overview/#basic-setup","title":"Basic Setup","text":"<p>To use AgentBridge in your Angular application, add the <code>AgentBridgeModule</code> to your app module:</p> <pre><code>// app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AgentBridgeModule } from '@agentbridge/angular';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AgentBridgeModule.forRoot()  // Use forRoot() to initialize AgentBridge\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>You can configure AgentBridge by passing options to the <code>forRoot()</code> method:</p> <pre><code>AgentBridgeModule.forRoot({\n  // Provide custom AgentBridge instance\n  bridge: createAgentBridge({ /* options */ }),\n\n  // Provide custom adapter\n  adapter: new AngularAdapter(/* options */)\n})\n</code></pre>"},{"location":"web/angular/overview/#using-the-agentbridgeservice","title":"Using the AgentBridgeService","text":"<p>The <code>AgentBridgeService</code> is the main service for interacting with AgentBridge in your Angular components:</p> <pre><code>// app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    &lt;div&gt;\n      &lt;h1&gt;My AgentBridge App&lt;/h1&gt;\n      &lt;button (click)=\"triggerFunction()\"&gt;Test Function&lt;/button&gt;\n    &lt;/div&gt;\n  `\n})\nexport class AppComponent implements OnInit {\n  constructor(private agentBridgeService: AgentBridgeService) {}\n\n  ngOnInit() {\n    // Register a function\n    this.agentBridgeService.registerFunction(\n      'greet',\n      'Greet a user by name',\n      {\n        type: 'object',\n        properties: {\n          name: { type: 'string' }\n        },\n        required: ['name']\n      },\n      async ({ name }) =&gt; {\n        return { message: `Hello, ${name}!` };\n      }\n    );\n  }\n\n  triggerFunction() {\n    // Call a function\n    this.agentBridgeService.callFunction('greet', { name: 'User' })\n      .then(result =&gt; console.log(result));\n  }\n}\n</code></pre>"},{"location":"web/angular/overview/#using-components","title":"Using Components","text":"<p>The Angular SDK provides several components that can be controlled by AI agents:</p> <pre><code>&lt;!-- Example using the agent-button component --&gt;\n&lt;agent-button \n  agentId=\"my-button\"\n  [disabled]=\"isDisabled\"\n  (clicked)=\"handleButtonClick()\"&gt;\n  Click Me\n&lt;/agent-button&gt;\n\n&lt;!-- Example using the agent-input component --&gt;\n&lt;agent-input\n  agentId=\"my-input\"\n  [placeholder]=\"'Enter some text'\"\n  [(ngModel)]=\"inputValue\"&gt;\n&lt;/agent-input&gt;\n\n&lt;!-- Example using the agent-select component --&gt;\n&lt;agent-select\n  agentId=\"my-select\"\n  [(ngModel)]=\"selectedValue\"&gt;\n  &lt;option value=\"option1\"&gt;Option 1&lt;/option&gt;\n  &lt;option value=\"option2\"&gt;Option 2&lt;/option&gt;\n  &lt;option value=\"option3\"&gt;Option 3&lt;/option&gt;\n&lt;/agent-select&gt;\n</code></pre>"},{"location":"web/angular/overview/#using-the-agentcontainerdirective","title":"Using the AgentContainerDirective","text":"<p>You can use the <code>agentContainer</code> directive to make any element controllable by AI agents:</p> <pre><code>&lt;div [agentContainer]=\"'my-container'\" [agentProps]=\"containerProps\"&gt;\n  &lt;p&gt;This container can be controlled by AI agents.&lt;/p&gt;\n  &lt;agent-button agentId=\"my-button\"&gt;Click Me&lt;/agent-button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"web/angular/overview/#subscribing-to-state-changes","title":"Subscribing to State Changes","text":"<p>You can subscribe to state changes using the <code>state$</code> observable from the <code>AgentBridgeService</code>:</p> <pre><code>import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-state-monitor',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Component Registry&lt;/h2&gt;\n      &lt;pre&gt;{{ componentCount }} components registered&lt;/pre&gt;\n    &lt;/div&gt;\n  `\n})\nexport class StateMonitorComponent implements OnInit, OnDestroy {\n  private subscription: Subscription | null = null;\n  componentCount = 0;\n\n  constructor(private agentBridgeService: AgentBridgeService) {}\n\n  ngOnInit() {\n    this.subscription = this.agentBridgeService.state$.subscribe(state =&gt; {\n      this.componentCount = state.componentRegistry.size;\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n</code></pre>"},{"location":"web/angular/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about the Angular components</li> <li>Learn more about the Angular services</li> <li>Explore the Core API</li> </ul>"},{"location":"web/angular/services/","title":"Services","text":"<p>This page is under construction. It will contain documentation about Services in the Angular section.</p>"},{"location":"web/angular/services/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"web/react/components/","title":"React Components","text":"<p>This page documents all the UI components available in the AgentBridge React SDK. These components are designed to be easily controlled by AI agents while providing a seamless React experience.</p>"},{"location":"web/react/components/#core-components","title":"Core Components","text":"<p>The AgentBridge React SDK provides several ready-to-use components that can be controlled by AI agents:</p>"},{"location":"web/react/components/#agentbutton","title":"AgentButton","text":"<p>A button component that can be controlled by AI agents.</p> <pre><code>import { AgentButton } from '@agentbridge/react';\n\nfunction MyComponent() {\n  return (\n    &lt;AgentButton\n      id=\"submit-button\"\n      label=\"Submit\"\n      onClick={() =&gt; {\n        // Your action here\n      }}\n      style={{\n        backgroundColor: '#4285F4',\n        color: 'white',\n        borderRadius: '4px',\n        padding: '8px 16px',\n      }}\n      disabled={false}\n      loading={false}\n      icon=\"arrow-right\"\n      iconPosition=\"right\"\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the button <code>label</code> string Text to display on the button <code>onClick</code> function Callback function when button is clicked <code>style</code> object Inline styles for the button <code>className</code> string CSS class names to apply <code>disabled</code> boolean Whether the button is disabled <code>loading</code> boolean Whether to show a loading indicator <code>icon</code> string | ReactNode Icon to display with the button <code>iconPosition</code> 'left' | 'right' Position of the icon"},{"location":"web/react/components/#agenttextfield","title":"AgentTextField","text":"<p>A text field component that can be controlled by AI agents.</p> <pre><code>import { AgentTextField } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [value, setValue] = useState('');\n\n  return (\n    &lt;AgentTextField\n      id=\"email-input\"\n      label=\"Email Address\"\n      placeholder=\"Enter your email\"\n      value={value}\n      onChange={(e) =&gt; setValue(e.target.value)}\n      onSubmit={(value) =&gt; {\n        // Handle submission\n      }}\n      type=\"email\"\n      style={{\n        borderColor: '#ddd',\n        borderRadius: '4px',\n        padding: '8px',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_1","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the text field <code>label</code> string Label text for the field <code>placeholder</code> string Placeholder text when empty <code>value</code> string Current value of the text field <code>onChange</code> function Callback when text changes <code>onSubmit</code> function Callback when form is submitted <code>type</code> string Input type (text, email, password, etc.) <code>style</code> object Inline styles for the text field <code>className</code> string CSS class names to apply <code>disabled</code> boolean Whether the text field is disabled <code>error</code> string Error message to display <code>maxLength</code> number Maximum length of the text <code>rows</code> number Number of rows (for textarea) <code>autoFocus</code> boolean Whether to auto-focus the input"},{"location":"web/react/components/#agentswitch","title":"AgentSwitch","text":"<p>A switch component that can be toggled on or off by AI agents.</p> <pre><code>import { AgentSwitch } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    &lt;AgentSwitch\n      id=\"notifications-switch\"\n      label=\"Enable Notifications\"\n      checked={checked}\n      onChange={(value) =&gt; setChecked(value)}\n      disabled={false}\n      style={{\n        activeColor: '#4CAF50',\n        inactiveColor: '#ccc',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_2","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the switch <code>label</code> string Label text for the switch <code>checked</code> boolean Current state of the switch <code>onChange</code> function Callback when switch value changes <code>disabled</code> boolean Whether the switch is disabled <code>style</code> object Inline styles for the switch <code>className</code> string CSS class names to apply <code>labelPosition</code> 'left' | 'right' Position of the label"},{"location":"web/react/components/#agentdropdown","title":"AgentDropdown","text":"<p>A dropdown component that allows selection from a list of options.</p> <pre><code>import { AgentDropdown } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [selected, setSelected] = useState('');\n\n  const options = [\n    { value: 'us', label: 'United States' },\n    { value: 'ca', label: 'Canada' },\n    { value: 'mx', label: 'Mexico' },\n  ];\n\n  return (\n    &lt;AgentDropdown\n      id=\"country-dropdown\"\n      label=\"Select Country\"\n      value={selected}\n      options={options}\n      onChange={(value) =&gt; setSelected(value)}\n      placeholder=\"Choose a country\"\n      disabled={false}\n      style={{\n        borderColor: '#ddd',\n        borderRadius: '4px',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_3","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the dropdown <code>label</code> string Label text for the dropdown <code>value</code> any Currently selected value <code>options</code> array Array of options (objects with value and label) <code>onChange</code> function Callback when selection changes <code>placeholder</code> string Placeholder text when no option is selected <code>disabled</code> boolean Whether the dropdown is disabled <code>style</code> object Inline styles for the dropdown <code>className</code> string CSS class names to apply <code>error</code> string Error message to display <code>isMulti</code> boolean Whether multiple options can be selected <code>isClearable</code> boolean Whether the selection can be cleared"},{"location":"web/react/components/#agentcheckbox","title":"AgentCheckbox","text":"<p>A checkbox component that can be checked or unchecked by AI agents.</p> <pre><code>import { AgentCheckbox } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    &lt;AgentCheckbox\n      id=\"terms-checkbox\"\n      label=\"I agree to the terms and conditions\"\n      checked={checked}\n      onChange={(value) =&gt; setChecked(value)}\n      disabled={false}\n      style={{\n        accentColor: '#4285F4',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_4","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the checkbox <code>label</code> string Label text for the checkbox <code>checked</code> boolean Current state of the checkbox <code>onChange</code> function Callback when checkbox value changes <code>disabled</code> boolean Whether the checkbox is disabled <code>style</code> object Inline styles for the checkbox <code>className</code> string CSS class names to apply <code>indeterminate</code> boolean Whether to show indeterminate state <code>error</code> string Error message to display"},{"location":"web/react/components/#agentslider","title":"AgentSlider","text":"<p>A slider component that can be adjusted by AI agents.</p> <pre><code>import { AgentSlider } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [value, setValue] = useState(50);\n\n  return (\n    &lt;AgentSlider\n      id=\"volume-slider\"\n      label=\"Volume\"\n      value={value}\n      min={0}\n      max={100}\n      step={1}\n      onChange={(value) =&gt; setValue(value)}\n      disabled={false}\n      style={{\n        activeColor: '#4285F4',\n        inactiveColor: '#ddd',\n        thumbColor: 'white',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_5","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the slider <code>label</code> string Label text for the slider <code>value</code> number Current value of the slider <code>min</code> number Minimum value of the slider <code>max</code> number Maximum value of the slider <code>step</code> number Step increment value <code>onChange</code> function Callback when slider value changes <code>disabled</code> boolean Whether the slider is disabled <code>style</code> object Inline styles for the slider <code>className</code> string CSS class names to apply <code>showValue</code> boolean Whether to show the current value <code>orientation</code> 'horizontal' | 'vertical' Orientation of the slider"},{"location":"web/react/components/#building-custom-components","title":"Building Custom Components","text":"<p>You can create custom components that can be controlled by AI agents by using the <code>withAgentComponent</code> higher-order component (HOC) or the <code>useAgentComponent</code> hook.</p>"},{"location":"web/react/components/#using-the-hoc","title":"Using the HOC","text":"<pre><code>import { withAgentComponent } from '@agentbridge/react';\nimport { useState } from 'react';\n\nfunction CustomCard({ id, title, description, onTap, isAgentControlled, registerAgentAction }) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Register actions for the AI agent\n  useState(() =&gt; {\n    if (isAgentControlled) {\n      registerAgentAction('tap', () =&gt; {\n        if (onTap) onTap();\n        return true;\n      });\n    }\n  }, [isAgentControlled, registerAgentAction, onTap]);\n\n  return (\n    &lt;div \n      className={`custom-card ${isHovered ? 'hovered' : ''}`}\n      onClick={onTap}\n      onMouseEnter={() =&gt; setIsHovered(true)}\n      onMouseLeave={() =&gt; setIsHovered(false)}\n      style={{\n        border: '1px solid #ddd',\n        borderRadius: '8px',\n        padding: '16px',\n        cursor: onTap ? 'pointer' : 'default',\n        transition: 'all 0.2s',\n        backgroundColor: isHovered ? '#f9f9f9' : 'white',\n      }}\n    &gt;\n      &lt;h3&gt;{title}&lt;/h3&gt;\n      {description &amp;&amp; &lt;p&gt;{description}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// Wrap the component with the agent HOC\nexport default withAgentComponent(CustomCard, {\n  // Properties exposed to the AI agent\n  getAgentProperties: (props) =&gt; ({\n    title: props.title,\n    description: props.description,\n    canTap: !!props.onTap,\n  }),\n  // Actions that can be performed by the AI agent\n  agentActions: ['tap'],\n});\n</code></pre>"},{"location":"web/react/components/#using-the-hook","title":"Using the Hook","text":"<pre><code>import { useAgentComponent } from '@agentbridge/react';\nimport { useState } from 'react';\n\nexport default function CustomCard({ id, title, description, onTap }) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Use the hook to make the component controllable by AI agents\n  const { registerAgentAction } = useAgentComponent(id, {\n    // Properties exposed to the AI agent\n    properties: {\n      title,\n      description,\n      canTap: !!onTap,\n    },\n    // Actions that can be performed by the AI agent\n    actions: {\n      tap: () =&gt; {\n        if (onTap) onTap();\n        return true;\n      },\n    },\n  });\n\n  return (\n    &lt;div \n      className={`custom-card ${isHovered ? 'hovered' : ''}`}\n      onClick={onTap}\n      onMouseEnter={() =&gt; setIsHovered(true)}\n      onMouseLeave={() =&gt; setIsHovered(false)}\n      style={{\n        border: '1px solid #ddd',\n        borderRadius: '8px',\n        padding: '16px',\n        cursor: onTap ? 'pointer' : 'default',\n        transition: 'all 0.2s',\n        backgroundColor: isHovered ? '#f9f9f9' : 'white',\n      }}\n    &gt;\n      &lt;h3&gt;{title}&lt;/h3&gt;\n      {description &amp;&amp; &lt;p&gt;{description}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#using-the-custom-component","title":"Using the Custom Component","text":"<pre><code>import CustomCard from './CustomCard';\n\nfunction MyComponent() {\n  return (\n    &lt;CustomCard\n      id=\"feature-card\"\n      title=\"Premium Feature\"\n      description=\"Unlock this feature by upgrading your account\"\n      onTap={() =&gt; {\n        // Handle tap\n        console.log('Card tapped');\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#component-context-provider","title":"Component Context Provider","text":"<p>Wrap your application or component tree with the <code>AgentBridgeProvider</code> to enable agent control:</p> <pre><code>import { AgentBridgeProvider } from '@agentbridge/react';\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider apiKey=\"your-api-key\"&gt;\n      {/* Your application components */}\n      &lt;YourComponent /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#best-practices","title":"Best Practices","text":"<ol> <li>Unique IDs: Always provide unique IDs for your components</li> <li>Descriptive Properties: Make your component properties descriptive for AI agents</li> <li>Consistent Actions: Use consistent action names across similar components</li> <li>State Management: Use React state management patterns (useState, useReducer, or context) to manage component state</li> <li>Accessibility: Ensure your components adhere to accessibility standards (WAI-ARIA)</li> <li>Error Handling: Handle errors gracefully in action handlers</li> <li>TypeScript: Use TypeScript for better type checking and developer experience</li> </ol>"},{"location":"web/react/components/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about React Hooks provided by AgentBridge</li> <li>Explore Web SDK Features</li> <li>See Examples of AgentBridge components in action </li> </ul>"},{"location":"web/react/hooks/","title":"Hooks","text":"<p>This page is under construction. It will contain documentation about Hooks in the React section.</p>"},{"location":"web/react/hooks/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"web/react/overview/","title":"Overview","text":"<p>This page is under construction. It will contain documentation about Overview in the React section.</p>"},{"location":"web/react/overview/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"}]}