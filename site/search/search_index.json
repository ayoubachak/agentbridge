{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AgentBridge Documentation","text":"<p>AgentBridge is a framework for building applications that can be controlled by AI agents. It provides a unified interface for exposing functionality to AI systems across different platforms and frameworks.</p>"},{"location":"#what-is-agentbridge","title":"What is AgentBridge?","text":"<p>AgentBridge is a comprehensive SDK that enables seamless integration between AI agents and your applications. It provides a structured way to:</p> <ul> <li>Expose application functionality to AI agents through a standardized API</li> <li>Allow AI agents to interact with UI components</li> <li>Maintain consistent behavior across different platforms and frameworks</li> <li>Handle authentication, permissions, and context management</li> <li>Bridge communication between AI agents and applications with no backend requirements</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Cross-Platform Support: Works on web (React, Angular) and mobile (React Native, Flutter) applications</li> <li>Component Registry: Register UI components that can be controlled by AI agents</li> <li>Function Registry: Expose application functionality as callable functions</li> <li>Type System: Define and validate function parameters and return values</li> <li>Dual-Mode Communication:</li> <li>Pub/Sub Mode: For applications without backends, using providers like Ably, Firebase, Pusher, or Supabase</li> <li>Self-Hosted Mode: For applications with backends, using WebSockets for direct communication</li> <li>Authentication &amp; Authorization: Control access to sensitive functionality</li> <li>Context Management: Provide context to AI agents about the application state</li> <li>Adapter Architecture: Easy to extend to support new platforms and frameworks</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>agentbridge/\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 core/             # Core functionality and interfaces\n\u2502   \u251c\u2500\u2500 frameworks/       # Framework-specific implementations\n\u2502   \u2502   \u251c\u2500\u2500 react/        # React SDK\n\u2502   \u2502   \u251c\u2500\u2500 angular/      # Angular SDK\n\u2502   \u2502   \u251c\u2500\u2500 react-native/ # React Native SDK\n\u2502   \u2502   \u251c\u2500\u2500 flutter/      # Flutter SDK\n\u2502   \u251c\u2500\u2500 providers/        # Communication providers\n\u2502   \u2502   \u251c\u2500\u2500 ably/         # Ably provider\n\u2502   \u2502   \u251c\u2500\u2500 firebase/     # Firebase provider\n\u2502   \u2502   \u251c\u2500\u2500 pusher/       # Pusher provider\n\u2502   \u2502   \u251c\u2500\u2500 supabase/     # Supabase provider\n\u2502   \u251c\u2500\u2500 communication/    # Communication protocols\n\u2502   \u2502   \u251c\u2500\u2500 websocket/    # WebSocket implementation\n\u2502   \u251c\u2500\u2500 server/           # Self-hosted mode server\n</code></pre>"},{"location":"#why-agentbridge","title":"Why AgentBridge?","text":"<p>In the rapidly evolving landscape of AI-powered applications, developers need a consistent way to expose functionality to AI agents. AgentBridge solves this problem by providing:</p> <ol> <li>Consistency: The same API works across different platforms and frameworks</li> <li>Simplicity: Easy to integrate into existing applications</li> <li>Flexibility: No backend required - works with both backend and backendless applications</li> <li>Extensibility: Designed to be extended to support new platforms and frameworks</li> <li>Security: Built-in authentication and authorization controls</li> <li>Performance: Optimized for high-performance applications</li> </ol>"},{"location":"#communication-modes","title":"Communication Modes","text":"<p>AgentBridge supports two communication modes to suit different application architectures:</p>"},{"location":"#pubsub-mode","title":"Pub/Sub Mode","text":"<p>Ideal for frontend-only applications without dedicated backends. This mode uses third-party real-time messaging services to facilitate communication between AI agents and your application.</p> <ul> <li>Supported Providers:</li> <li>Ably: Reliable real-time messaging with excellent free tier</li> <li>Firebase Realtime Database: Google's real-time solution with strong ecosystem</li> <li>Pusher: Popular real-time messaging platform</li> <li>Supabase Realtime: Open-source Firebase alternative</li> </ul>"},{"location":"#self-hosted-mode","title":"Self-Hosted Mode","text":"<p>For applications with dedicated backends, this mode uses WebSockets for direct communication between your backend and frontend, with the backend acting as a mediator for AI agent interactions.</p> <ul> <li>Complete Control: Manage all communication within your own infrastructure</li> <li>Enhanced Security: Implement custom security measures</li> <li>Integration Flexibility: Integrate with existing backend services</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with AgentBridge, follow these steps:</p> <ol> <li>Installation: Learn how to install AgentBridge</li> <li>Quick Start: Build your first AI-enabled application</li> <li>Choose a Communication Mode: Decide between Pub/Sub and Self-Hosted</li> </ol>"},{"location":"#integration-examples","title":"Integration Examples","text":"<ul> <li>React Web App: Integrate with a React web application</li> <li>React Native App: Integrate with a React Native mobile app</li> <li>Angular Web App: Integrate with an Angular web application</li> <li>Flutter App: Integrate with a Flutter mobile app</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>GitHub Repository</li> <li>Core API Reference</li> <li>Function Registry</li> <li>Type System</li> </ul>"},{"location":"#license","title":"License","text":"<p>AgentBridge is released under the MIT License. </p>"},{"location":"advanced/","title":"Advanced Topics","text":"<p>This section covers advanced topics for AgentBridge development and deployment. These topics are intended for developers who are already familiar with the basics of AgentBridge and want to explore more advanced features and use cases.</p>"},{"location":"advanced/#authentication-and-security","title":"Authentication and Security","text":"<ul> <li>Authentication: Learn how to implement authentication for AI agents</li> <li>Security: Best practices for securing your AgentBridge applications</li> </ul>"},{"location":"advanced/#component-and-function-registration","title":"Component and Function Registration","text":"<ul> <li>Component Registration: Advanced techniques for registering components</li> <li>Error Handling: How to handle errors in AgentBridge components and functions</li> </ul>"},{"location":"advanced/#customization","title":"Customization","text":"<ul> <li>Custom Adapters: Create custom framework adapters</li> <li>Custom Pub/Sub Providers: Implement your own communication providers</li> </ul>"},{"location":"advanced/#model-control-protocol-mcp","title":"Model-Control Protocol (MCP)","text":"<ul> <li>MCP Integration: Integrating with the MCP protocol</li> <li>MCP Advanced: Advanced MCP usage patterns</li> </ul>"},{"location":"advanced/#server-configuration","title":"Server Configuration","text":"<ul> <li>Server Implementations: Implementing custom servers for AgentBridge</li> </ul>"},{"location":"advanced/#design-and-architecture","title":"Design and Architecture","text":"<ul> <li>Design Info: Detailed design information for AgentBridge</li> </ul>"},{"location":"advanced/#next-steps","title":"Next Steps","text":"<p>After mastering these advanced topics, consider exploring the Development section to learn how to contribute to the AgentBridge project. </p>"},{"location":"advanced/authentication/","title":"Authentication","text":"<p>This page is under construction. It will contain documentation about Authentication in the Advanced section.</p>"},{"location":"advanced/authentication/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"advanced/component-registration/","title":"Component Registration","text":"<p>This guide explains how to register UI components with AgentBridge to make them discoverable and controllable by AI agents.</p>"},{"location":"advanced/component-registration/#basic-component-registration","title":"Basic Component Registration","text":"<p>Components need to be registered with AgentBridge to make them available for AI agent interaction.</p>"},{"location":"advanced/component-registration/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>import { AgentBridge } from '@agentbridge/core';\n\nconst agentBridge = new AgentBridge();\n\n// Register a component manually\nagentBridge.registerComponent({\n  id: 'submit-button',\n  type: 'button',\n  properties: {\n    label: 'Submit',\n    disabled: false\n  },\n  actions: ['click'],\n  metadata: {\n    section: 'form',\n    importance: 'high'\n  }\n});\n</code></pre>"},{"location":"advanced/component-registration/#flutter","title":"Flutter","text":"<pre><code>import 'package:agentbridge/agentbridge.dart';\n\nvoid registerComponents() {\n  final agentBridge = AgentBridge.instance;\n\n  // Register a component manually\n  agentBridge.registerComponent(\n    ComponentDefinition(\n      id: 'submit-button',\n      type: 'button',\n      properties: {\n        'label': 'Submit',\n        'disabled': false\n      },\n      actions: ['click'],\n      metadata: {\n        'section': 'form',\n        'importance': 'high'\n      }\n    )\n  );\n}\n</code></pre>"},{"location":"advanced/component-registration/#automatic-component-registration","title":"Automatic Component Registration","text":"<p>AgentBridge provides mixins and wrappers for automatic component registration.</p>"},{"location":"advanced/component-registration/#react","title":"React","text":"<pre><code>import { AgentComponent } from '@agentbridge/react';\n\n// Using the AgentComponent HOC\nconst SubmitButton = AgentComponent({\n  id: 'submit-button',\n  type: 'button',\n  actions: ['click'],\n})(\n  ({ onClick, label, disabled }) =&gt; (\n    &lt;button onClick={onClick} disabled={disabled}&gt;\n      {label}\n    &lt;/button&gt;\n  )\n);\n\n// Usage\n&lt;SubmitButton \n  label=\"Submit\" \n  disabled={false} \n  onClick={() =&gt; handleSubmit()} \n/&gt;\n</code></pre>"},{"location":"advanced/component-registration/#flutter_1","title":"Flutter","text":"<pre><code>import 'package:agentbridge/agentbridge.dart';\n\n// Using the AgentComponentMixin\nclass CustomButton extends StatefulWidget with AgentComponentMixin {\n  final String id;\n  final String label;\n  final bool disabled;\n  final VoidCallback? onPressed;\n\n  CustomButton({\n    required this.id,\n    required this.label,\n    this.disabled = false,\n    this.onPressed,\n  }) : super(key: ValueKey(id));\n\n  @override\n  ComponentDefinition getComponentDefinition() {\n    return ComponentDefinition(\n      id: id,\n      type: 'button',\n      properties: {\n        'label': label,\n        'disabled': disabled,\n      },\n      actions: ['click'],\n    );\n  }\n\n  @override\n  State&lt;CustomButton&gt; createState() =&gt; _CustomButtonState();\n}\n\nclass _CustomButtonState extends State&lt;CustomButton&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: widget.disabled ? null : widget.onPressed,\n      child: Text(widget.label),\n    );\n  }\n}\n</code></pre>"},{"location":"advanced/component-registration/#component-properties","title":"Component Properties","text":"<p>Components have several key properties:</p> Property Description <code>id</code> Unique identifier for the component <code>type</code> Type of component (button, input, etc.) <code>properties</code> Current state and configuration of the component <code>actions</code> Supported actions the component can perform <code>metadata</code> Additional information about the component <code>children</code> IDs of child components (if applicable)"},{"location":"advanced/component-registration/#hierarchical-components","title":"Hierarchical Components","text":"<p>Components can be organized in a hierarchical structure:</p> <pre><code>// Register a parent container\nagentBridge.registerComponent({\n  id: 'signup-form',\n  type: 'form',\n  properties: {\n    title: 'Sign Up'\n  },\n  children: ['email-input', 'password-input', 'signup-button']\n});\n\n// Register child components\nagentBridge.registerComponent({\n  id: 'email-input',\n  type: 'textfield',\n  properties: {\n    label: 'Email',\n    value: '',\n    required: true\n  },\n  actions: ['input']\n});\n\nagentBridge.registerComponent({\n  id: 'password-input',\n  type: 'textfield',\n  properties: {\n    label: 'Password',\n    value: '',\n    required: true,\n    secure: true\n  },\n  actions: ['input']\n});\n\nagentBridge.registerComponent({\n  id: 'signup-button',\n  type: 'button',\n  properties: {\n    label: 'Sign Up',\n    disabled: true\n  },\n  actions: ['click']\n});\n</code></pre>"},{"location":"advanced/component-registration/#dynamic-component-updates","title":"Dynamic Component Updates","text":"<p>Keep component registrations up-to-date when properties change:</p> <pre><code>// JavaScript/TypeScript\nfunction updateButtonState(isDisabled) {\n  // Update component in registry\n  agentBridge.updateComponent('submit-button', {\n    properties: {\n      disabled: isDisabled\n    }\n  });\n}\n\n// React with hook\nimport { useAgentComponent } from '@agentbridge/react';\n\nfunction SubmitButton({ isDisabled, onClick }) {\n  // Automatically updates component in registry when props change\n  useAgentComponent('submit-button', {\n    type: 'button',\n    properties: {\n      disabled: isDisabled,\n      label: 'Submit'\n    },\n    actions: ['click']\n  });\n\n  return (\n    &lt;button disabled={isDisabled} onClick={onClick}&gt;\n      Submit\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"advanced/component-registration/#handling-component-actions","title":"Handling Component Actions","text":"<p>Register action handlers for components:</p> <pre><code>// Register action handler\nagentBridge.registerActionHandler('submit-button', 'click', async () =&gt; {\n  // Handle button click\n  await submitForm();\n  return { success: true };\n});\n\n// Or register handler during component registration\nagentBridge.registerComponent({\n  id: 'submit-button',\n  type: 'button',\n  properties: {\n    label: 'Submit'\n  },\n  actions: ['click'],\n  handlers: {\n    click: async () =&gt; {\n      await submitForm();\n      return { success: true };\n    }\n  }\n});\n</code></pre>"},{"location":"advanced/component-registration/#component-metadata","title":"Component Metadata","text":"<p>Add metadata to improve AI agent understanding:</p> <pre><code>agentBridge.registerComponent({\n  id: 'submit-button',\n  type: 'button',\n  properties: {\n    label: 'Submit'\n  },\n  actions: ['click'],\n  metadata: {\n    description: 'Submits the form data to the server',\n    importance: 'high',\n    section: 'checkout-form',\n    purpose: 'finalize-transaction',\n    visibleToUser: true,\n    accessibilityLabel: 'Submit payment information',\n    position: {\n      x: 150,\n      y: 300\n    }\n  }\n});\n</code></pre>"},{"location":"advanced/component-registration/#unregistering-components","title":"Unregistering Components","text":"<p>Remove components when they're no longer available:</p> <pre><code>// Remove a single component\nagentBridge.unregisterComponent('submit-button');\n\n// Remove multiple components\nagentBridge.unregisterComponents(['email-input', 'password-input']);\n\n// Clear all components\nagentBridge.clearComponents();\n</code></pre>"},{"location":"advanced/component-registration/#best-practices","title":"Best Practices","text":"<ol> <li>Use Unique IDs: Ensure component IDs are unique and descriptive</li> <li>Keep Components Updated: Update component properties when they change</li> <li>Provide Detailed Metadata: Include descriptive information in metadata</li> <li>Organize Hierarchically: Use parent-child relationships for related components</li> <li>Clean Up When Done: Unregister components when they're removed from the UI</li> </ol>"},{"location":"advanced/component-registration/#related-guides","title":"Related Guides","text":"<p>For more information about component interaction and design information collection, see: - Design Information Collection - Advanced MCP Usage </p>"},{"location":"advanced/custom-adapters/","title":"Custom Adapters","text":"<p>This page is under construction. It will contain documentation about Custom Adapters in the Advanced section.</p>"},{"location":"advanced/custom-adapters/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"advanced/custom-pubsub/","title":"Creating Custom Pub/Sub Providers","text":"<p>This guide explains how to create a custom Pub/Sub provider for AgentBridge if the built-in providers don't meet your needs.</p>"},{"location":"advanced/custom-pubsub/#overview","title":"Overview","text":"<p>AgentBridge supports several Pub/Sub providers out of the box (Ably, Firebase, Pusher, Supabase), but you might need to integrate with a different messaging service. By implementing the <code>CommunicationProvider</code> interface, you can create a custom provider for any Pub/Sub service.</p> <pre><code>graph TD\n    A[AgentBridge] --&gt;|Uses| B[Communication Provider]\n    B --&gt;|Interface| C[CommunicationProvider]\n    C --&gt;|Implementation| D[Custom Pub/Sub Provider]\n    D --&gt;|Connects to| E[Your Pub/Sub Service]</code></pre>"},{"location":"advanced/custom-pubsub/#requirements","title":"Requirements","text":"<p>To create a custom Pub/Sub provider, you need:</p> <ol> <li>A messaging service that supports real-time publish/subscribe</li> <li>Client library for your chosen messaging service</li> <li>Implementation of the <code>CommunicationProvider</code> interface</li> </ol>"},{"location":"advanced/custom-pubsub/#implementation-steps","title":"Implementation Steps","text":""},{"location":"advanced/custom-pubsub/#1-create-a-new-provider-class","title":"1. Create a new provider class","text":"<p>Create a new class that implements the <code>CommunicationProvider</code> interface:</p> <pre><code>import { CommunicationProvider, Message } from '@agentbridge/core';\n\nexport interface CustomProviderOptions {\n  // Define your provider-specific options\n  apiKey: string;\n  endpoint?: string;\n  clientOptions?: any;\n}\n\nexport class CustomPubSubProvider implements CommunicationProvider {\n  private client: any; // Your messaging service client\n  private options: CustomProviderOptions;\n  private messageCallback: ((message: Message) =&gt; void) | null = null;\n  private statusCallback: ((status: string) =&gt; void) | null = null;\n  private channelPrefix: string;\n  private applicationId: string;\n  private environmentId: string;\n\n  constructor(options: CustomProviderOptions) {\n    this.options = options;\n    this.channelPrefix = options.channelPrefix || 'agentbridge';\n  }\n\n  // Initialize the provider with AgentBridge configuration\n  public initialize(config: { applicationId: string; environmentId: string }) {\n    this.applicationId = config.applicationId;\n    this.environmentId = config.environmentId;\n  }\n\n  // Connect to the messaging service\n  public async connect(): Promise&lt;void&gt; {\n    if (this.statusCallback) {\n      this.statusCallback('connecting');\n    }\n\n    try {\n      // Initialize your messaging client\n      this.client = new YourMessagingClient({\n        apiKey: this.options.apiKey,\n        // Other client-specific options\n        ...this.options.clientOptions\n      });\n\n      // Connect to the service\n      await this.client.connect();\n\n      // Subscribe to channels\n      await this.subscribeToChannels();\n\n      if (this.statusCallback) {\n        this.statusCallback('connected');\n      }\n    } catch (error) {\n      if (this.statusCallback) {\n        this.statusCallback('error');\n      }\n      throw error;\n    }\n  }\n\n  // Disconnect from the messaging service\n  public async disconnect(): Promise&lt;void&gt; {\n    if (!this.client) return;\n\n    try {\n      // Unsubscribe from channels\n      await this.unsubscribeFromChannels();\n\n      // Disconnect client\n      await this.client.disconnect();\n\n      if (this.statusCallback) {\n        this.statusCallback('disconnected');\n      }\n    } catch (error) {\n      console.error('Error disconnecting from messaging service:', error);\n    }\n  }\n\n  // Send a message to the appropriate channel\n  public async sendMessage(message: Message): Promise&lt;void&gt; {\n    if (!this.client) {\n      throw new Error('Provider not connected');\n    }\n\n    const channelName = this.getChannelForMessageType(message.type);\n\n    try {\n      await this.client.publish(channelName, JSON.stringify(message));\n    } catch (error) {\n      console.error(`Error sending message to ${channelName}:`, error);\n      throw error;\n    }\n  }\n\n  // Register a callback for incoming messages\n  public onMessage(callback: (message: Message) =&gt; void): void {\n    this.messageCallback = callback;\n  }\n\n  // Register a callback for connection status changes\n  public onConnectionStatusChange(callback: (status: string) =&gt; void): void {\n    this.statusCallback = callback;\n  }\n\n  // Helper methods\n  private getChannelForMessageType(type: string): string {\n    const base = `${this.channelPrefix}-${this.applicationId}-${this.environmentId}`;\n\n    switch (type) {\n      case 'capability':\n        return `${base}-capabilities`;\n      case 'command':\n        return `${base}-commands`;\n      case 'response':\n        return `${base}-responses`;\n      case 'event':\n        return `${base}-events`;\n      default:\n        return `${base}-messages`;\n    }\n  }\n\n  private async subscribeToChannels(): Promise&lt;void&gt; {\n    // Subscribe to all required channels\n    const channels = [\n      this.getChannelForMessageType('capability'),\n      this.getChannelForMessageType('command'),\n      this.getChannelForMessageType('response'),\n      this.getChannelForMessageType('event')\n    ];\n\n    for (const channelName of channels) {\n      const channel = this.client.channel(channelName);\n\n      // Set up message handler\n      channel.subscribe((rawMessage: any) =&gt; {\n        try {\n          const message = JSON.parse(rawMessage);\n\n          if (this.messageCallback) {\n            this.messageCallback(message);\n          }\n        } catch (error) {\n          console.error('Error parsing message:', error);\n        }\n      });\n    }\n  }\n\n  private async unsubscribeFromChannels(): Promise&lt;void&gt; {\n    // Implementation depends on your messaging service\n    // Unsubscribe from all channels\n    const channels = [\n      this.getChannelForMessageType('capability'),\n      this.getChannelForMessageType('command'),\n      this.getChannelForMessageType('response'),\n      this.getChannelForMessageType('event')\n    ];\n\n    for (const channelName of channels) {\n      const channel = this.client.channel(channelName);\n      await channel.unsubscribe();\n    }\n  }\n}\n</code></pre>"},{"location":"advanced/custom-pubsub/#2-adapt-to-your-specific-messaging-service","title":"2. Adapt to your specific messaging service","text":"<p>You'll need to replace the placeholders with actual implementation for your chosen messaging service:</p> <ul> <li>Replace <code>YourMessagingClient</code> with the actual client class</li> <li>Implement channel subscription based on your service's API</li> <li>Implement message publishing based on your service's API</li> <li>Handle reconnection logic if necessary</li> </ul>"},{"location":"advanced/custom-pubsub/#3-using-your-custom-provider","title":"3. Using your custom provider","text":"<p>Once implemented, you can use your custom provider with AgentBridge:</p> <pre><code>import { AgentBridge } from '@agentbridge/core';\nimport { CustomPubSubProvider } from './custom-pubsub-provider';\n\n// Create your custom provider\nconst customProvider = new CustomPubSubProvider({\n  apiKey: 'your-api-key',\n  endpoint: 'https://your-messaging-service.com',\n  clientOptions: {\n    // Additional options for your client\n  }\n});\n\n// Initialize AgentBridge with your provider\nconst bridge = new AgentBridge({\n  applicationId: 'my-app-123',\n  environmentId: 'development'\n});\n\nbridge.initialize(customProvider);\n</code></pre>"},{"location":"advanced/custom-pubsub/#example-mqtt-provider","title":"Example: MQTT Provider","text":"<p>Here's a more concrete example implementing a provider for MQTT:</p> <pre><code>import { CommunicationProvider, Message } from '@agentbridge/core';\nimport * as mqtt from 'mqtt';\n\nexport interface MqttProviderOptions {\n  url: string;\n  clientId?: string;\n  username?: string;\n  password?: string;\n  channelPrefix?: string;\n}\n\nexport class MqttProvider implements CommunicationProvider {\n  private client: mqtt.Client | null = null;\n  private options: MqttProviderOptions;\n  private messageCallback: ((message: Message) =&gt; void) | null = null;\n  private statusCallback: ((status: string) =&gt; void) | null = null;\n  private channelPrefix: string;\n  private applicationId: string = '';\n  private environmentId: string = '';\n\n  constructor(options: MqttProviderOptions) {\n    this.options = options;\n    this.channelPrefix = options.channelPrefix || 'agentbridge';\n  }\n\n  public initialize(config: { applicationId: string; environmentId: string }) {\n    this.applicationId = config.applicationId;\n    this.environmentId = config.environmentId;\n  }\n\n  public async connect(): Promise&lt;void&gt; {\n    if (this.statusCallback) {\n      this.statusCallback('connecting');\n    }\n\n    return new Promise((resolve, reject) =&gt; {\n      try {\n        // Create MQTT client\n        this.client = mqtt.connect(this.options.url, {\n          clientId: this.options.clientId || `agentbridge-${Math.random().toString(16).substr(2, 8)}`,\n          username: this.options.username,\n          password: this.options.password,\n          keepalive: 60,\n          reconnectPeriod: 1000\n        });\n\n        // Handle connection events\n        this.client.on('connect', () =&gt; {\n          this.subscribeToChannels().then(() =&gt; {\n            if (this.statusCallback) {\n              this.statusCallback('connected');\n            }\n            resolve();\n          });\n        });\n\n        this.client.on('error', (err) =&gt; {\n          console.error('MQTT connection error:', err);\n          if (this.statusCallback) {\n            this.statusCallback('error');\n          }\n          reject(err);\n        });\n\n        this.client.on('message', (topic, message) =&gt; {\n          try {\n            const parsedMessage = JSON.parse(message.toString());\n\n            if (this.messageCallback) {\n              this.messageCallback(parsedMessage);\n            }\n          } catch (error) {\n            console.error('Error parsing message:', error);\n          }\n        });\n\n        this.client.on('disconnect', () =&gt; {\n          if (this.statusCallback) {\n            this.statusCallback('disconnected');\n          }\n        });\n\n        this.client.on('reconnect', () =&gt; {\n          if (this.statusCallback) {\n            this.statusCallback('reconnecting');\n          }\n        });\n      } catch (error) {\n        if (this.statusCallback) {\n          this.statusCallback('error');\n        }\n        reject(error);\n      }\n    });\n  }\n\n  public async disconnect(): Promise&lt;void&gt; {\n    return new Promise((resolve) =&gt; {\n      if (!this.client) {\n        resolve();\n        return;\n      }\n\n      this.client.end(true, {}, () =&gt; {\n        this.client = null;\n        if (this.statusCallback) {\n          this.statusCallback('disconnected');\n        }\n        resolve();\n      });\n    });\n  }\n\n  public async sendMessage(message: Message): Promise&lt;void&gt; {\n    if (!this.client) {\n      throw new Error('MQTT client not connected');\n    }\n\n    const topic = this.getTopicForMessageType(message.type);\n\n    return new Promise((resolve, reject) =&gt; {\n      this.client!.publish(\n        topic, \n        JSON.stringify(message), \n        { qos: 1 }, \n        (error) =&gt; {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        }\n      );\n    });\n  }\n\n  public onMessage(callback: (message: Message) =&gt; void): void {\n    this.messageCallback = callback;\n  }\n\n  public onConnectionStatusChange(callback: (status: string) =&gt; void): void {\n    this.statusCallback = callback;\n  }\n\n  private getTopicForMessageType(type: string): string {\n    const base = `${this.channelPrefix}/${this.applicationId}/${this.environmentId}`;\n\n    switch (type) {\n      case 'capability':\n        return `${base}/capabilities`;\n      case 'command':\n        return `${base}/commands`;\n      case 'response':\n        return `${base}/responses`;\n      case 'event':\n        return `${base}/events`;\n      default:\n        return `${base}/messages`;\n    }\n  }\n\n  private async subscribeToChannels(): Promise&lt;void&gt; {\n    if (!this.client) {\n      throw new Error('MQTT client not connected');\n    }\n\n    const topics = [\n      this.getTopicForMessageType('capability'),\n      this.getTopicForMessageType('command'),\n      this.getTopicForMessageType('response'),\n      this.getTopicForMessageType('event')\n    ];\n\n    return new Promise((resolve, reject) =&gt; {\n      this.client!.subscribe(topics, { qos: 1 }, (err) =&gt; {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n}\n</code></pre>"},{"location":"advanced/custom-pubsub/#best-practices","title":"Best Practices","text":"<p>When creating a custom Pub/Sub provider:</p> <ol> <li>Reconnection Logic: Implement robust reconnection logic to handle network interruptions</li> <li>Error Handling: Provide clear error messages and graceful error handling</li> <li>Message Serialization: Ensure proper serialization/deserialization of messages</li> <li>Channel Security: Implement appropriate authentication and authorization for channels</li> <li>Testing: Thoroughly test edge cases and failure scenarios</li> </ol>"},{"location":"advanced/custom-pubsub/#debugging","title":"Debugging","text":"<p>To debug your custom provider, you can add logging:</p> <pre><code>public async sendMessage(message: Message): Promise&lt;void&gt; {\n  console.log(`Sending message to ${this.getChannelForMessageType(message.type)}:`, message);\n\n  // Implementation\n  // ...\n\n  console.log('Message sent successfully');\n}\n</code></pre>"},{"location":"advanced/custom-pubsub/#security-considerations","title":"Security Considerations","text":"<p>When implementing a custom provider:</p> <ol> <li>API Key Security: Store API keys securely (environment variables, etc.)</li> <li>Transport Security: Use secure connections (TLS/SSL)</li> <li>Authentication: Implement authentication mechanisms</li> <li>Authorization: Control access to channels</li> <li>Message Validation: Validate message formats</li> </ol> <p>For more comprehensive security guidance, see the Security Best Practices documentation.</p>"},{"location":"advanced/custom-pubsub/#next-steps","title":"Next Steps","text":"<ul> <li>Pub/Sub Configuration: Learn about configuring Pub/Sub providers</li> <li>Communication Protocol: Understand the message format</li> <li>AgentBridge API Reference: Core API documentation </li> </ul>"},{"location":"advanced/design-info/","title":"Design Information Collection","text":"<p>This guide explains how to collect and use UI design information to enhance AI agent understanding of your application's interface.</p>"},{"location":"advanced/design-info/#overview","title":"Overview","text":"<p>Design information collection is a key feature that helps AI agents understand the structure, layout, and purpose of your UI components. This information enables more contextual and effective interactions.</p>"},{"location":"advanced/design-info/#setting-up-design-collectors","title":"Setting Up Design Collectors","text":"<p>AgentBridge provides platform-specific design collectors that analyze your UI and extract relevant information.</p>"},{"location":"advanced/design-info/#javascripttypescript-react","title":"JavaScript/TypeScript (React)","text":"<pre><code>import { AgentBridge } from '@agentbridge/core';\nimport { ReactDesignCollector } from '@agentbridge/react';\n\nconst agentBridge = new AgentBridge();\nconst designCollector = new ReactDesignCollector();\n\n// In your root component\nfunction App() {\n  useEffect(() =&gt; {\n    // Capture component tree after initial render\n    const designInfo = designCollector.captureDesignInfo();\n\n    // Register design information with AgentBridge\n    agentBridge.registerDesignInfo(designInfo);\n\n    // Optionally set up automatic updates\n    const unsubscribe = designCollector.startAutoCapture({\n      interval: 5000, // milliseconds\n      onChange: (newDesignInfo) =&gt; {\n        agentBridge.registerDesignInfo(newDesignInfo);\n      }\n    });\n\n    return () =&gt; {\n      if (unsubscribe) unsubscribe();\n    };\n  }, []);\n\n  // ...\n}\n</code></pre>"},{"location":"advanced/design-info/#flutter","title":"Flutter","text":"<pre><code>import 'package:agentbridge/agentbridge.dart';\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() =&gt; _MyAppState();\n}\n\nclass _MyAppState extends State&lt;MyApp&gt; {\n  final designCollector = FlutterDesignCollector();\n  Timer? _captureTimer;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Capture after first frame\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      _captureDesignInfo();\n    });\n\n    // Set up periodic capture\n    _captureTimer = Timer.periodic(Duration(seconds: 5), (_) {\n      _captureDesignInfo();\n    });\n  }\n\n  void _captureDesignInfo() {\n    final designInfo = designCollector.captureDesignInfo(context);\n    AgentBridge.instance.registerDesignInfo(designInfo);\n  }\n\n  @override\n  void dispose() {\n    _captureTimer?.cancel();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n  }\n}\n</code></pre>"},{"location":"advanced/design-info/#design-information-structure","title":"Design Information Structure","text":"<p>The collected design information includes:</p> <pre><code>{\n  \"appInfo\": {\n    \"name\": \"MyApp\",\n    \"version\": \"1.0.0\",\n    \"theme\": \"light\",\n    \"platform\": \"web\",\n    \"screenSize\": {\n      \"width\": 1024,\n      \"height\": 768\n    }\n  },\n  \"screens\": [\n    {\n      \"id\": \"home-screen\",\n      \"name\": \"Home\",\n      \"route\": \"/home\",\n      \"active\": true,\n      \"components\": [\n        {\n          \"id\": \"header\",\n          \"type\": \"container\",\n          \"position\": {\n            \"x\": 0,\n            \"y\": 0,\n            \"width\": 1024,\n            \"height\": 80\n          },\n          \"children\": [\"logo\", \"nav-menu\"]\n        },\n        // ... more components\n      ]\n    }\n  ],\n  \"navigationState\": {\n    \"currentRoute\": \"/home\",\n    \"availableRoutes\": [\"/home\", \"/products\", \"/about\", \"/contact\"],\n    \"history\": [\"/\", \"/home\"]\n  },\n  \"componentTree\": {\n    // Hierarchical component structure\n  }\n}\n</code></pre>"},{"location":"advanced/design-info/#customizing-design-collection","title":"Customizing Design Collection","text":"<p>You can customize what information is collected:</p> <pre><code>// JavaScript/TypeScript\nconst designCollector = new ReactDesignCollector({\n  captureOptions: {\n    includeStyles: true,\n    includeDisabledComponents: true,\n    includeHiddenComponents: false,\n    includePositions: true,\n    maxDepth: 10,\n    captureScreenshots: false,\n  }\n});\n</code></pre> <pre><code>// Flutter\nfinal designCollector = FlutterDesignCollector(\n  captureOptions: CaptureOptions(\n    includeStyles: true,\n    includeDisabledComponents: true,\n    includeHiddenComponents: false,\n    includePositions: true,\n    maxDepth: 10,\n    captureScreenshots: false,\n  ),\n);\n</code></pre>"},{"location":"advanced/design-info/#manual-design-information","title":"Manual Design Information","text":"<p>You can also manually provide design information:</p> <pre><code>// JavaScript/TypeScript\nagentBridge.registerDesignInfo({\n  appInfo: {\n    name: \"TodoApp\",\n    theme: \"light\"\n  },\n  screens: [\n    {\n      id: \"tasks-screen\",\n      name: \"Tasks\",\n      active: true,\n      components: [\n        // ...component details\n      ]\n    }\n  ],\n  // ... other design info\n});\n</code></pre>"},{"location":"advanced/design-info/#using-design-information-with-ai-agents","title":"Using Design Information with AI Agents","text":"<p>Design information is automatically made available to AI agents through registered functions:</p> <pre><code>// Register function to get design information\nagentBridge.registerFunction({\n  name: 'getUIDesign',\n  description: 'Get information about the UI design and layout',\n  parameters: {\n    type: 'object',\n    properties: {\n      includeDetails: {\n        type: 'boolean',\n        description: 'Whether to include detailed styling information'\n      }\n    }\n  },\n  handler: async (params) =&gt; {\n    const designInfo = agentBridge.getDesignInfo();\n\n    if (!params.includeDetails) {\n      // Simplify the response by removing detailed styling\n      return simplifyDesignInfo(designInfo);\n    }\n\n    return designInfo;\n  }\n});\n</code></pre>"},{"location":"advanced/design-info/#design-information-for-navigation","title":"Design Information for Navigation","text":"<p>Design information can help AI agents understand navigation options:</p> <pre><code>// Register navigation-related function\nagentBridge.registerFunction({\n  name: 'navigateTo',\n  description: 'Navigate to a different screen or view',\n  parameters: {\n    type: 'object',\n    properties: {\n      route: {\n        type: 'string',\n        description: 'The route to navigate to'\n      }\n    },\n    required: ['route']\n  },\n  handler: async (params) =&gt; {\n    const designInfo = agentBridge.getDesignInfo();\n    const availableRoutes = designInfo.navigationState.availableRoutes;\n\n    if (!availableRoutes.includes(params.route)) {\n      return {\n        success: false,\n        error: {\n          message: `Route \"${params.route}\" not available. Available routes: ${availableRoutes.join(', ')}`\n        }\n      };\n    }\n\n    // Perform navigation\n    navigator.navigate(params.route);\n\n    return {\n      success: true,\n      currentRoute: params.route\n    };\n  }\n});\n</code></pre>"},{"location":"advanced/design-info/#performance-considerations","title":"Performance Considerations","text":"<p>Design information collection can be resource-intensive. Consider these best practices:</p> <ol> <li>Throttle Collection: Don't collect information too frequently</li> <li>Limit Depth: Set a reasonable <code>maxDepth</code> to avoid capturing too much detail</li> <li>Selective Capture: Only capture what's needed for AI understanding</li> <li>Batch Updates: Update design information in batches rather than on every small UI change</li> </ol> <pre><code>// Example of throttled collection\nlet throttleTimeout = null;\nfunction throttledDesignCapture() {\n  if (throttleTimeout) return;\n\n  throttleTimeout = setTimeout(() =&gt; {\n    const designInfo = designCollector.captureDesignInfo();\n    agentBridge.registerDesignInfo(designInfo);\n    throttleTimeout = null;\n  }, 500);\n}\n\n// Call on significant UI changes\nwindow.addEventListener('resize', throttledDesignCapture);\n</code></pre>"},{"location":"advanced/design-info/#debugging-design-information","title":"Debugging Design Information","text":"<p>AgentBridge provides utilities to help debug design information:</p> <pre><code>// JavaScript/TypeScript\n// Enable debug mode\ndesignCollector.setDebugMode(true);\n\n// Log design information\nconsole.log(JSON.stringify(agentBridge.getDesignInfo(), null, 2));\n\n// Visualize component boundaries\ndesignCollector.visualizeComponents();\n</code></pre> <pre><code>// Flutter\n// Enable debug mode\ndesignCollector.setDebugMode(true);\n\n// Log design information\nprint(jsonEncode(AgentBridge.instance.getDesignInfo()));\n\n// Visualize component boundaries in debug mode\ndesignCollector.visualizeComponents(context);\n</code></pre>"},{"location":"advanced/design-info/#related-guides","title":"Related Guides","text":"<p>For more information about component registration and advanced MCP usage, see: - Component Registration - Advanced MCP Usage </p>"},{"location":"advanced/error-handling/","title":"Error Handling","text":"<p>This page is under construction. It will contain documentation about Error Handling in the Advanced section.</p>"},{"location":"advanced/error-handling/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"advanced/mcp-advanced/","title":"Advanced Model Context Protocol Usage","text":"<p>This guide covers advanced topics for working with Model Context Protocols (MCPs) in AgentBridge.</p>"},{"location":"advanced/mcp-advanced/#context-preservation","title":"Context Preservation","text":"<p>When working with MCPs, maintaining context across multiple interactions is crucial for a coherent agent experience.</p>"},{"location":"advanced/mcp-advanced/#session-context","title":"Session Context","text":"<pre><code>// JavaScript/TypeScript\nconst sessionContext = {\n  userId: 'user-123',\n  sessionStartTime: Date.now(),\n  preferences: {\n    language: 'en-US',\n    theme: 'dark'\n  }\n};\n\n// Register session context with the MCP manager\nagentBridge.mcpManager.setGlobalContext(sessionContext);\n\n// The context will be automatically included in function schemas and calls\n</code></pre> <pre><code>// Flutter\nfinal sessionContext = {\n  'userId': 'user-123',\n  'sessionStartTime': DateTime.now().millisecondsSinceEpoch,\n  'preferences': {\n    'language': 'en-US',\n    'theme': 'dark'\n  }\n};\n\n// Register session context with the MCP manager\nagentBridge.mcpManager.setGlobalContext(sessionContext);\n</code></pre>"},{"location":"advanced/mcp-advanced/#function-namespacing","title":"Function Namespacing","text":"<p>Organize your functions into logical groups to make them more discoverable to AI agents.</p> <pre><code>// JavaScript/TypeScript\nagentBridge.registerFunction({\n  name: 'ui.showNotification',\n  description: 'Display a notification to the user',\n  parameters: {\n    type: 'object',\n    properties: {\n      message: {\n        type: 'string',\n        description: 'Message to display'\n      },\n      type: {\n        type: 'string',\n        enum: ['info', 'success', 'warning', 'error'],\n        description: 'Type of notification'\n      }\n    },\n    required: ['message']\n  },\n  handler: async (params) =&gt; {\n    // Show notification logic\n  }\n});\n</code></pre>"},{"location":"advanced/mcp-advanced/#dynamic-schema-generation","title":"Dynamic Schema Generation","text":"<p>You can dynamically generate function schemas based on application state:</p> <pre><code>// Generate schemas based on available features\nfunction generateFunctionSchemas() {\n  const schemas = [];\n\n  // Core functions always available\n  schemas.push({\n    name: 'core.getStatus',\n    description: 'Get application status',\n    parameters: {/* ... */}\n  });\n\n  // Add payment functions only if payment module is enabled\n  if (appConfig.modules.payment.enabled) {\n    schemas.push({\n      name: 'payment.processPayment',\n      description: 'Process a payment',\n      parameters: {/* ... */}\n    });\n  }\n\n  return schemas;\n}\n\n// Register all dynamic functions\nconst schemas = generateFunctionSchemas();\nschemas.forEach(schema =&gt; {\n  agentBridge.registerFunction({\n    ...schema,\n    handler: functionHandlers[schema.name]\n  });\n});\n</code></pre>"},{"location":"advanced/mcp-advanced/#function-result-formatting","title":"Function Result Formatting","text":"<p>Format function results consistently to improve AI agent understanding:</p> <pre><code>// Standard result format\ninterface FunctionResult {\n  success: boolean;\n  data?: any;\n  error?: {\n    code: string;\n    message: string;\n  };\n  metadata?: {\n    executionTime: number;\n    [key: string]: any;\n  };\n}\n\n// Example implementation\nasync function handleFunction(name, params) {\n  const startTime = Date.now();\n  try {\n    const result = await executeFunction(name, params);\n    return {\n      success: true,\n      data: result,\n      metadata: {\n        executionTime: Date.now() - startTime\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: error.code || 'UNKNOWN_ERROR',\n        message: error.message\n      },\n      metadata: {\n        executionTime: Date.now() - startTime\n      }\n    };\n  }\n}\n</code></pre>"},{"location":"advanced/mcp-advanced/#custom-protocol-mappers","title":"Custom Protocol Mappers","text":"<p>Create custom protocol mappers for specialized AI systems:</p> <pre><code>class EnterpriseAIMCPAdapter implements MCPAdapter {\n  constructor(private registry) {}\n\n  convertToMCPSchema(functionDef) {\n    // Custom enterprise AI format\n    return {\n      functionId: functionDef.name,\n      functionDescription: functionDef.description,\n      inputSchema: this._convertParameters(functionDef.parameters),\n      accessLevel: functionDef.metadata?.accessLevel || 'standard'\n    };\n  }\n\n  _convertParameters(parameters) {\n    // Convert JSON Schema to enterprise format\n    // ...\n  }\n\n  // Implement other required methods\n  // ...\n}\n</code></pre>"},{"location":"advanced/mcp-advanced/#testing-mcp-integrations","title":"Testing MCP Integrations","text":"<p>Best practices for testing MCP integrations:</p> <pre><code>// Mock AI model for testing\nclass MockAIModel {\n  constructor(private functions) {}\n\n  async process(userInput) {\n    // Simple rule-based system to simulate AI calling functions\n    if (userInput.includes('weather')) {\n      return {\n        function_call: {\n          name: 'getWeather',\n          arguments: JSON.stringify({\n            location: 'New York'\n          })\n        }\n      };\n    }\n    return { content: \"I don't know how to help with that.\" };\n  }\n}\n\n// Test MCP integration\nasync function testMCPIntegration() {\n  const agentBridge = new AgentBridge();\n\n  // Register test functions\n  agentBridge.registerFunction({\n    name: 'getWeather',\n    description: 'Get weather for a location',\n    parameters: {\n      type: 'object',\n      properties: {\n        location: {\n          type: 'string',\n          description: 'The location to get weather for'\n        }\n      },\n      required: ['location']\n    },\n    handler: async (params) =&gt; {\n      return { temperature: 72, conditions: 'sunny' };\n    }\n  });\n\n  // Get OpenAI schema\n  const schema = agentBridge.getMCPSchema('openai');\n\n  // Create mock AI\n  const mockAI = new MockAIModel(schema.functions);\n\n  // Test interaction\n  const aiResponse = await mockAI.process('What\\'s the weather in New York?');\n\n  if (aiResponse.function_call) {\n    const result = await agentBridge.handleMCPFunctionCall(\n      'openai', \n      aiResponse.function_call\n    );\n    console.log('Function result:', result);\n  }\n}\n</code></pre> <p>For more detailed information, refer to the following guides: - Component Registration - Design Information Collection </p>"},{"location":"advanced/mcp-integration/","title":"Model Context Protocols Integration Guide","text":"<p>This guide explains how to integrate Model Context Protocols (MCPs) with your AgentBridge application.</p>"},{"location":"advanced/mcp-integration/#overview","title":"Overview","text":"<p>Model Context Protocols provide standardized ways for AI models to discover and call functions in your application. AgentBridge supports these protocols through adapter components that translate between the framework's internal API and the protocol-specific formats.</p>"},{"location":"advanced/mcp-integration/#supported-mcp-implementations","title":"Supported MCP Implementations","text":"<p>AgentBridge supports the following Model Context Protocols:</p> <ul> <li>OpenAI Function Calling (ChatGPT, GPT-4)</li> <li>Anthropic Tool Use (Claude)</li> <li>Gemini Tools</li> </ul>"},{"location":"advanced/mcp-integration/#setup","title":"Setup","text":"<p>To set up MCP support in your application, you need to:</p> <ol> <li>Install the appropriate adapter packages</li> <li>Register the MCP adapters with AgentBridge</li> <li>Configure your application to expose the appropriate schemas</li> </ol>"},{"location":"advanced/mcp-integration/#installation","title":"Installation","text":"<pre><code># For npm/yarn\nnpm install @agentbridge/mcp-openai @agentbridge/mcp-anthropic @agentbridge/mcp-gemini\n\n# For Flutter\nflutter pub add agentbridge_mcp\n</code></pre>"},{"location":"advanced/mcp-integration/#basic-setup","title":"Basic Setup","text":"<pre><code>// JavaScript/TypeScript\nimport { AgentBridge } from '@agentbridge/core';\nimport { OpenAIMCPAdapter } from '@agentbridge/mcp-openai';\nimport { AnthropicMCPAdapter } from '@agentbridge/mcp-anthropic';\n\nconst agentBridge = new AgentBridge();\n\n// Register MCP adapters\nagentBridge.registerMCPAdapter('openai', new OpenAIMCPAdapter(agentBridge.registry));\nagentBridge.registerMCPAdapter('anthropic', new AnthropicMCPAdapter(agentBridge.registry));\n\n// For Flutter\n```dart\nimport 'package:agentbridge/agentbridge.dart';\nimport 'package:agentbridge_mcp/agentbridge_mcp.dart';\n\nvoid main() {\n  final agentBridge = AgentBridge();\n\n  // Register MCP adapters\n  agentBridge.registerMCPAdapter('openai', OpenAIMCPAdapter(agentBridge.registry));\n  agentBridge.registerMCPAdapter('anthropic', AnthropicMCPAdapter(agentBridge.registry));\n\n  runApp(MyApp());\n}\n</code></pre>"},{"location":"advanced/mcp-integration/#getting-schema-for-ai-models","title":"Getting Schema for AI Models","text":"<p>To get the function schema in the format required by a specific AI model:</p> <pre><code>// Get schema for OpenAI\nconst openaiSchema = agentBridge.getMCPSchema('openai');\n\n// Use in API call\nconst response = await openai.chat.completions.create({\n  model: \"gpt-4\",\n  messages: [{ role: \"user\", content: \"What's the weather like?\" }],\n  tools: openaiSchema.functions,\n});\n</code></pre>"},{"location":"advanced/mcp-integration/#handling-function-calls-from-ai-models","title":"Handling Function Calls from AI Models","text":"<p>When an AI model makes a function call through an MCP, you can handle it like this:</p> <pre><code>// For OpenAI\nconst functionCall = response.choices[0].message.tool_calls[0];\n\n// Process the call through AgentBridge's MCP adapter\nconst result = await agentBridge.handleMCPFunctionCall('openai', functionCall);\n\n// Send the result back to the AI model\n// ...\n</code></pre>"},{"location":"advanced/mcp-integration/#design-information-collection","title":"Design Information Collection","text":"<p>To enable AI agents to understand your UI structure, you need to collect design information:</p> <pre><code>// React example\nimport { ReactDesignInfoCollector } from '@agentbridge/react';\n\n// In your root component\nconst App = () =&gt; {\n  const designCollector = new ReactDesignInfoCollector();\n\n  useEffect(() =&gt; {\n    // Capture component tree after render\n    const componentTree = designCollector.captureComponentTree(rootElement);\n\n    // Register the design information with AgentBridge\n    agentBridge.registerDesignInfo(componentTree);\n  }, []);\n\n  // ...\n}\n</code></pre> <pre><code>// Flutter example\nimport 'package:agentbridge/design_collector.dart';\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() =&gt; _MyAppState();\n}\n\nclass _MyAppState extends State&lt;MyApp&gt; {\n  final designCollector = FlutterDesignInfoCollector();\n\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      // Capture component tree after first frame\n      final componentTree = designCollector.captureComponentTree(context);\n\n      // Register the design information with AgentBridge\n      AgentBridge.instance.registerDesignInfo(componentTree);\n    });\n  }\n\n  // ...\n}\n</code></pre>"},{"location":"advanced/mcp-integration/#exposing-component-structure-to-ai-agents","title":"Exposing Component Structure to AI Agents","text":"<p>To allow AI agents to discover and interact with UI components:</p> <pre><code>// Register a function to get UI components\nagentBridge.registerFunction({\n  name: 'getUIComponents',\n  description: 'Get information about the UI components in the application',\n  parameters: {},\n  handler: async () =&gt; {\n    // Return the component tree\n    return agentBridge.getComponentTree();\n  }\n});\n\n// Register a function to interact with a component\nagentBridge.registerFunction({\n  name: 'interactWithComponent',\n  description: 'Interact with a UI component by ID',\n  parameters: {\n    type: 'object',\n    properties: {\n      componentId: { \n        type: 'string',\n        description: 'ID of the component to interact with'\n      },\n      action: {\n        type: 'string',\n        description: 'Action to perform (click, input, etc.)'\n      },\n      value: {\n        type: 'any',\n        description: 'Value to set (for input components)'\n      }\n    },\n    required: ['componentId', 'action']\n  },\n  handler: async (params) =&gt; {\n    // Handle the interaction\n    return agentBridge.interactWithComponent(params.componentId, params.action, params.value);\n  }\n});\n</code></pre>"},{"location":"advanced/mcp-integration/#custom-mcp-adapters","title":"Custom MCP Adapters","text":"<p>You can create custom MCP adapters for other AI platforms:</p> <pre><code>import { MCPAdapter } from '@agentbridge/core';\n\nclass CustomMCPAdapter implements MCPAdapter {\n  constructor(private registry) {}\n\n  convertToMCPSchema(functionDef) {\n    // Convert function definition to your custom schema\n    return {\n      // Your custom schema\n    };\n  }\n\n  convertFromMCPCall(mcpCall) {\n    // Convert from your custom call format to AgentBridge format\n    return {\n      name: mcpCall.functionName,\n      params: mcpCall.args,\n      context: this.mapContext(mcpCall.context)\n    };\n  }\n\n  mapContext(context) {\n    // Map context\n    return {\n      // Mapped context\n    };\n  }\n\n  mapResponse(response) {\n    // Map response\n    return {\n      // Mapped response\n    };\n  }\n\n  getFunctionSchema() {\n    // Return complete schema for all functions\n    return {\n      // Your custom schema\n    };\n  }\n}\n\n// Register the custom adapter\nagentBridge.registerMCPAdapter('custom', new CustomMCPAdapter(agentBridge.registry));\n</code></pre>"},{"location":"advanced/mcp-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Schema Documentation: Ensure your function descriptions and parameter descriptions are clear and detailed</li> <li>Type Safety: Use specific types rather than \"any\" for better documentation in MCP schemas</li> <li>Context Handling: Maintain consistent context across function calls for better agent interactions</li> <li>Design Information: Regularly update design information when the UI changes</li> <li>Error Handling: Provide meaningful error responses that agents can understand and adapt to</li> </ol>"},{"location":"advanced/mcp-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"advanced/mcp-integration/#common-issues","title":"Common Issues","text":"<ul> <li>Schema Conversion Errors: Check that your function parameters follow the type system supported by the MCP</li> <li>Missing Design Information: Ensure design collection is triggered after component rendering</li> <li>Function Not Found: Verify that functions are registered before generating MCP schemas</li> <li>Context Mapping Failures: Check that context objects contain all required fields</li> </ul>"},{"location":"advanced/mcp-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Explore advanced MCP features in our MCP Advanced Guide</li> <li>Learn about UI Component Registration</li> <li>See Design Information Collection for more details on capturing UI structure </li> </ul>"},{"location":"advanced/security/","title":"Security Best Practices","text":"<p>This guide outlines security best practices for implementing and using AgentBridge in your applications.</p>"},{"location":"advanced/security/#overview","title":"Overview","text":"<p>When integrating AI agents with your applications, security is a critical consideration. AgentBridge provides several security features to help protect your application and users, but proper implementation is essential.</p> <pre><code>graph TD\n    A[Security Layers] --&gt; B[Authentication]\n    A --&gt; C[Authorization]\n    A --&gt; D[Data Validation]\n    A --&gt; E[Transport Security]\n    A --&gt; F[Rate Limiting]\n\n    B --&gt; B1[API Keys]\n    B --&gt; B2[JWT Tokens]\n    B --&gt; B3[OAuth]\n\n    C --&gt; C1[Function Permissions]\n    C --&gt; C2[Component Permissions]\n    C --&gt; C3[User Roles]</code></pre>"},{"location":"advanced/security/#authentication","title":"Authentication","text":"<p>Proper authentication ensures that only authorized AI agents can connect to your application.</p>"},{"location":"advanced/security/#api-keys","title":"API Keys","text":"<p>When using pub/sub providers, secure your API keys:</p> <ul> <li>Rotate API keys regularly</li> <li>Use environment variables to store keys</li> <li>Never commit API keys to version control</li> <li>Use separate keys for development and production</li> </ul> <pre><code>// Good: Load from environment variables\nconst provider = new AblyProvider({\n  apiKey: process.env.ABLY_API_KEY\n});\n\n// Bad: Hardcoded keys\nconst provider = new AblyProvider({\n  apiKey: \"abc123XYZ\" // Never do this\n});\n</code></pre>"},{"location":"advanced/security/#jwt-authentication","title":"JWT Authentication","text":"<p>For self-hosted mode, use JWT tokens for authentication:</p> <pre><code>// Generate a JWT token on your server\nconst token = jwt.sign(\n  { \n    agentId: \"agent-123\",\n    permissions: [\"read:components\", \"execute:functions\"] \n  },\n  process.env.JWT_SECRET,\n  { expiresIn: \"1h\" }\n);\n\n// Configure WebSocket provider with JWT\nconst wsProvider = new WebSocketProvider({\n  url: \"wss://your-server.com/agent-bridge\",\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n});\n</code></pre>"},{"location":"advanced/security/#authorization","title":"Authorization","text":"<p>Implement proper authorization to control what actions agents can perform.</p>"},{"location":"advanced/security/#function-permissions","title":"Function Permissions","text":"<p>Restrict access to sensitive functions:</p> <pre><code>bridge.registerFunction({\n  name: \"getUserData\",\n  description: \"Get user data\",\n  permissions: [\"admin:read\"], // Require specific permissions\n  handler: async () =&gt; {\n    // Implementation\n  }\n});\n</code></pre>"},{"location":"advanced/security/#component-permissions","title":"Component Permissions","text":"<p>Restrict access to UI components:</p> <pre><code>bridge.registerComponent(\"admin-panel\", {\n  // Component definition\n  permissions: [\"admin:access\"]\n}, {\n  // Component handlers\n});\n</code></pre>"},{"location":"advanced/security/#data-validation","title":"Data Validation","text":"<p>Always validate all data exchanged with AI agents.</p>"},{"location":"advanced/security/#input-validation","title":"Input Validation","text":"<p>Validate function parameters using the type system:</p> <pre><code>bridge.registerFunction({\n  name: \"transferFunds\",\n  description: \"Transfer funds between accounts\",\n  parameters: {\n    type: \"object\",\n    properties: {\n      fromAccount: { type: \"string\", pattern: \"^[0-9]{10}$\" },\n      toAccount: { type: \"string\", pattern: \"^[0-9]{10}$\" },\n      amount: { type: \"number\", minimum: 0.01 }\n    },\n    required: [\"fromAccount\", \"toAccount\", \"amount\"]\n  },\n  handler: async (params) =&gt; {\n    // Implementation with validated parameters\n  }\n});\n</code></pre>"},{"location":"advanced/security/#output-validation","title":"Output Validation","text":"<p>Validate data before sending it to agents:</p> <pre><code>// Before sending sensitive data, validate and sanitize\nfunction sanitizeUserData(userData) {\n  return {\n    name: userData.name,\n    email: userData.email,\n    // Remove sensitive fields\n    // No password, SSN, etc.\n  };\n}\n</code></pre>"},{"location":"advanced/security/#transport-security","title":"Transport Security","text":"<p>Ensure secure communication channels between components.</p>"},{"location":"advanced/security/#websocket-security","title":"WebSocket Security","text":"<p>For self-hosted mode:</p> <ul> <li>Always use WSS (WebSocket Secure) instead of WS</li> <li>Implement proper TLS certificate management</li> <li>Enable HTTP strict transport security (HSTS)</li> </ul>"},{"location":"advanced/security/#pubsub-security","title":"Pub/Sub Security","text":"<p>For pub/sub providers:</p> <ul> <li>Use providers that support end-to-end encryption</li> <li>Implement channel-specific authentication</li> <li>Use private channels when possible</li> </ul>"},{"location":"advanced/security/#rate-limiting","title":"Rate Limiting","text":"<p>Protect against abuse with rate limiting.</p>"},{"location":"advanced/security/#function-rate-limiting","title":"Function Rate Limiting","text":"<pre><code>// Implement rate limiting for sensitive functions\nlet callCounter = {};\n\nbridge.registerFunction({\n  name: \"sensitiveOperation\",\n  description: \"Performs a sensitive operation\",\n  handler: async (params) =&gt; {\n    const agentId = context.agentId;\n\n    // Initialize counter if needed\n    callCounter[agentId] = callCounter[agentId] || {\n      count: 0,\n      resetTime: Date.now() + 3600000 // 1 hour\n    };\n\n    // Check if rate limit exceeded\n    if (callCounter[agentId].count &gt;= 10) {\n      throw new Error(\"Rate limit exceeded. Try again later.\");\n    }\n\n    // Increment counter\n    callCounter[agentId].count++;\n\n    // Reset counter if needed\n    if (Date.now() &gt; callCounter[agentId].resetTime) {\n      callCounter[agentId] = {\n        count: 1,\n        resetTime: Date.now() + 3600000\n      };\n    }\n\n    // Function implementation\n  }\n});\n</code></pre>"},{"location":"advanced/security/#environment-isolation","title":"Environment Isolation","text":"<p>Maintain separate environments with different security configurations.</p> <pre><code>graph LR\n    A[Environments] --&gt; B[Development]\n    A --&gt; C[Staging]\n    A --&gt; D[Production]\n\n    B --&gt; B1[Relaxed Security]\n    B --&gt; B2[Mock Data]\n\n    C --&gt; C1[Production-like]\n    C --&gt; C2[Test Data]\n\n    D --&gt; D1[Strict Security]\n    D --&gt; D2[Real Data]\n    D --&gt; D3[Limited Access]</code></pre>"},{"location":"advanced/security/#audit-logging","title":"Audit Logging","text":"<p>Implement comprehensive logging for security events.</p> <pre><code>// Log all function calls for audit purposes\nbridge.on(\"functionCall\", (event) =&gt; {\n  logger.info(`Function call: ${event.functionName}`, {\n    agentId: event.agentId,\n    timestamp: event.timestamp,\n    parameters: event.parameters,\n    success: event.success,\n    errorMessage: event.error?.message\n  });\n});\n</code></pre>"},{"location":"advanced/security/#security-checklist","title":"Security Checklist","text":"<p>Use this checklist to ensure you've addressed key security concerns:</p> <ul> <li> API keys and secrets are stored securely</li> <li> Authentication is implemented for all communication</li> <li> Authorization controls are in place for sensitive functions</li> <li> All input data is validated using schema validation</li> <li> Transport security is configured (WSS or encrypted pub/sub)</li> <li> Rate limiting is implemented for sensitive operations</li> <li> Environment isolation is maintained (dev/staging/prod)</li> <li> Audit logging is in place for security events</li> <li> Error messages don't leak sensitive information</li> <li> Regular security reviews are scheduled</li> </ul>"},{"location":"advanced/security/#related-documentation","title":"Related Documentation","text":"<ul> <li>Communication Protocol: Details on message security</li> <li>Type System: Information on input validation </li> </ul>"},{"location":"advanced/server-implementations/","title":"Server Implementations Guide","text":"<p>This guide provides examples and best practices for implementing an AgentBridge server in various backend frameworks. These implementations are for the self-hosted communication mode.</p>"},{"location":"advanced/server-implementations/#architecture-overview","title":"Architecture Overview","text":"<p>A self-hosted AgentBridge server consists of:</p> <ol> <li>WebSocket Server: Handles WebSocket connections from frontend applications</li> <li>Agent API: REST or WebSocket API for AI agents to communicate with the server</li> <li>Client Registry: Tracks connected clients and their capabilities</li> <li>Message Router: Routes messages between AI agents and frontend applications</li> </ol> <pre><code>graph TD\n    A[Frontend App] &lt;--&gt;|WebSocket| B[Backend Server]\n    C[AI Agent] &lt;--&gt;|HTTP/WebSocket| B\n\n    subgraph \"Backend Server\"\n        D[WebSocket Server]\n        E[Agent API]\n        F[Client Registry]\n        G[Message Router]\n\n        D &lt;--&gt; F\n        E &lt;--&gt; F\n        F &lt;--&gt; G\n        G &lt;--&gt; D\n        G &lt;--&gt; E\n    end</code></pre>"},{"location":"advanced/server-implementations/#nodejs-implementation","title":"Node.js Implementation","text":""},{"location":"advanced/server-implementations/#express-with-ws","title":"Express with ws","text":"<p>This example uses the Express framework with the 'ws' library:</p> <pre><code>const express = require('express');\nconst http = require('http');\nconst WebSocket = require('ws');\nconst { v4: uuidv4 } = require('uuid');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\n\n// Create Express app and HTTP server\nconst app = express();\nconst server = http.createServer(app);\n\n// Enable CORS and JSON parsing\napp.use(cors());\napp.use(bodyParser.json());\n\n// Create WebSocket server\nconst wss = new WebSocket.Server({ server });\n\n// Client registry\nconst clients = new Map();\nconst capabilities = new Map();\n\n// WebSocket connection handler\nwss.on('connection', (ws, req) =&gt; {\n  // Generate unique client ID\n  const clientId = uuidv4();\n\n  console.log(`Client connected: ${clientId}`);\n\n  // Store client in registry\n  clients.set(clientId, {\n    ws,\n    capabilities: [],\n    lastSeen: Date.now()\n  });\n\n  // Send client ID to the client\n  ws.send(JSON.stringify({\n    type: 'connection',\n    clientId\n  }));\n\n  // Handle messages from client\n  ws.on('message', (message) =&gt; {\n    try {\n      const parsedMessage = JSON.parse(message);\n\n      // Handle different message types\n      switch (parsedMessage.type) {\n        case 'capability':\n          // Store client capabilities\n          clients.get(clientId).capabilities = parsedMessage.capabilities;\n          capabilities.set(clientId, parsedMessage.capabilities);\n          console.log(`Received capabilities from ${clientId}`);\n          break;\n\n        case 'response':\n          // Forward response to AI agent\n          // In a real implementation, you'd use a request/response correlation system\n          console.log(`Received response from ${clientId}`);\n          break;\n\n        case 'event':\n          // Handle events (could be broadcast to interested agents)\n          console.log(`Received event from ${clientId}`);\n          break;\n\n        default:\n          console.warn(`Unknown message type: ${parsedMessage.type}`);\n      }\n    } catch (err) {\n      console.error('Error handling message:', err);\n    }\n  });\n\n  // Handle disconnection\n  ws.on('close', () =&gt; {\n    console.log(`Client disconnected: ${clientId}`);\n    clients.delete(clientId);\n    capabilities.delete(clientId);\n  });\n});\n\n// Agent API endpoints\napp.get('/api/capabilities', (req, res) =&gt; {\n  // Return all capabilities from all clients\n  const allCapabilities = {};\n\n  for (const [clientId, clientCapabilities] of capabilities.entries()) {\n    allCapabilities[clientId] = clientCapabilities;\n  }\n\n  res.json(allCapabilities);\n});\n\napp.post('/api/command', (req, res) =&gt; {\n  const { clientId, command } = req.body;\n\n  // Check if client exists\n  if (!clients.has(clientId)) {\n    return res.status(404).json({\n      error: 'Client not found'\n    });\n  }\n\n  const client = clients.get(clientId);\n\n  // Send command to client\n  try {\n    client.ws.send(JSON.stringify({\n      type: 'command',\n      ...command\n    }));\n\n    // In a real implementation, you would:\n    // 1. Generate a requestId\n    // 2. Store the request in a pending requests map\n    // 3. Set up a timeout for the request\n    // 4. Return the response when received or timeout\n\n    // For this simple example, we just acknowledge receipt\n    res.json({\n      success: true,\n      message: 'Command sent to client'\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: 'Failed to send command',\n      message: err.message\n    });\n  }\n});\n\n// Start server\nconst PORT = process.env.PORT || 3001;\nserver.listen(PORT, () =&gt; {\n  console.log(`Server running on port ${PORT}`);\n});\n</code></pre>"},{"location":"advanced/server-implementations/#nestjs-implementation","title":"NestJS Implementation","text":"<p>For NestJS, you can use the built-in WebSocket support:</p> <pre><code>// websocket.gateway.ts\nimport {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { v4 as uuidv4 } from 'uuid';\n\n@WebSocketGateway()\nexport class AgentBridgeGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer()\n  server: Server;\n\n  private clients = new Map();\n  private capabilities = new Map();\n\n  handleConnection(client: Socket) {\n    const clientId = uuidv4();\n    console.log(`Client connected: ${clientId}`);\n\n    this.clients.set(clientId, {\n      client,\n      capabilities: [],\n      lastSeen: Date.now()\n    });\n\n    client.emit('connection', { clientId });\n  }\n\n  handleDisconnect(client: Socket) {\n    // Find clientId for this socket\n    let disconnectedClientId: string | null = null;\n\n    for (const [clientId, data] of this.clients.entries()) {\n      if (data.client === client) {\n        disconnectedClientId = clientId;\n        break;\n      }\n    }\n\n    if (disconnectedClientId) {\n      console.log(`Client disconnected: ${disconnectedClientId}`);\n      this.clients.delete(disconnectedClientId);\n      this.capabilities.delete(disconnectedClientId);\n    }\n  }\n\n  @SubscribeMessage('capability')\n  handleCapability(client: Socket, payload: any) {\n    // Find clientId for this socket\n    let targetClientId: string | null = null;\n\n    for (const [clientId, data] of this.clients.entries()) {\n      if (data.client === client) {\n        targetClientId = clientId;\n        break;\n      }\n    }\n\n    if (targetClientId) {\n      this.clients.get(targetClientId).capabilities = payload.capabilities;\n      this.capabilities.set(targetClientId, payload.capabilities);\n      console.log(`Received capabilities from ${targetClientId}`);\n    }\n  }\n\n  // Additional message handlers\n\n  // Method to send a command to a client\n  sendCommand(clientId: string, command: any) {\n    if (!this.clients.has(clientId)) {\n      throw new Error('Client not found');\n    }\n\n    const client = this.clients.get(clientId);\n    client.client.emit('command', command);\n  }\n\n  // Method to get all capabilities\n  getAllCapabilities() {\n    const allCapabilities = {};\n\n    for (const [clientId, clientCapabilities] of this.capabilities.entries()) {\n      allCapabilities[clientId] = clientCapabilities;\n    }\n\n    return allCapabilities;\n  }\n}\n\n// agent.controller.ts\nimport { Controller, Get, Post, Body, HttpException, HttpStatus } from '@nestjs/common';\nimport { AgentBridgeGateway } from './websocket.gateway';\n\n@Controller('api')\nexport class AgentController {\n  constructor(private readonly gateway: AgentBridgeGateway) {}\n\n  @Get('capabilities')\n  getCapabilities() {\n    return this.gateway.getAllCapabilities();\n  }\n\n  @Post('command')\n  sendCommand(@Body() body: { clientId: string; command: any }) {\n    const { clientId, command } = body;\n\n    try {\n      this.gateway.sendCommand(clientId, command);\n      return { success: true, message: 'Command sent to client' };\n    } catch (err) {\n      throw new HttpException({\n        error: 'Failed to send command',\n        message: err.message\n      }, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n}\n</code></pre>"},{"location":"advanced/server-implementations/#python-implementation","title":"Python Implementation","text":""},{"location":"advanced/server-implementations/#fastapi-with-websockets","title":"FastAPI with websockets","text":"<p>FastAPI provides excellent WebSocket support:</p> <pre><code>from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nimport json\nimport uuid\nimport asyncio\nfrom typing import Dict, List, Any\n\napp = FastAPI()\n\n# Enable CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Client registry\nclients = {}\ncapabilities = {}\n\n# Command models\nclass Command(BaseModel):\n    target: str\n    action: str\n    parameters: Dict[str, Any] = {}\n\nclass CommandRequest(BaseModel):\n    clientId: str\n    command: Command\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n\n    # Generate client ID\n    client_id = str(uuid.uuid4())\n\n    # Store client\n    clients[client_id] = {\n        \"websocket\": websocket,\n        \"capabilities\": [],\n        \"last_seen\": asyncio.get_event_loop().time()\n    }\n\n    # Send client ID to the client\n    await websocket.send_text(json.dumps({\n        \"type\": \"connection\",\n        \"clientId\": client_id\n    }))\n\n    try:\n        while True:\n            # Receive message from client\n            message_text = await websocket.receive_text()\n            message = json.loads(message_text)\n\n            # Handle different message types\n            if message.get(\"type\") == \"capability\":\n                # Store client capabilities\n                clients[client_id][\"capabilities\"] = message.get(\"capabilities\", [])\n                capabilities[client_id] = message.get(\"capabilities\", [])\n                print(f\"Received capabilities from {client_id}\")\n\n            elif message.get(\"type\") == \"response\":\n                # Forward response to AI agent\n                # In a real implementation, you'd use a request/response correlation system\n                print(f\"Received response from {client_id}\")\n\n            elif message.get(\"type\") == \"event\":\n                # Handle events (could be broadcast to interested agents)\n                print(f\"Received event from {client_id}\")\n\n            else:\n                print(f\"Unknown message type: {message.get('type')}\")\n\n    except WebSocketDisconnect:\n        # Remove client on disconnect\n        print(f\"Client disconnected: {client_id}\")\n        if client_id in clients:\n            del clients[client_id]\n        if client_id in capabilities:\n            del capabilities[client_id]\n\n@app.get(\"/api/capabilities\")\nasync def get_capabilities():\n    # Return all capabilities from all clients\n    return capabilities\n\n@app.post(\"/api/command\")\nasync def send_command(request: CommandRequest):\n    client_id = request.clientId\n    command = request.command\n\n    # Check if client exists\n    if client_id not in clients:\n        raise HTTPException(status_code=404, detail=\"Client not found\")\n\n    client = clients[client_id]\n\n    try:\n        # Send command to client\n        await client[\"websocket\"].send_text(json.dumps({\n            \"type\": \"command\",\n            \"target\": command.target,\n            \"action\": command.action,\n            \"parameters\": command.parameters\n        }))\n\n        # For this simple example, we just acknowledge receipt\n        return {\n            \"success\": True,\n            \"message\": \"Command sent to client\"\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Failed to send command: {str(e)}\"\n        )\n</code></pre>"},{"location":"advanced/server-implementations/#ruby-implementation","title":"Ruby Implementation","text":""},{"location":"advanced/server-implementations/#ruby-on-rails-with-actioncable","title":"Ruby on Rails with ActionCable","text":"<p>Rails provides ActionCable for WebSocket support:</p> <pre><code># app/channels/agent_bridge_channel.rb\nclass AgentBridgeChannel &lt; ApplicationCable::Channel\n  def subscribed\n    # Generate client ID\n    @client_id = SecureRandom.uuid\n\n    # Store client in registry\n    CLIENTS[@client_id] = {\n      connection: self,\n      capabilities: [],\n      last_seen: Time.now\n    }\n\n    # Send client ID to the client\n    transmit(type: 'connection', clientId: @client_id)\n\n    stream_from \"agent_bridge_#{@client_id}\"\n  end\n\n  def unsubscribed\n    # Remove client from registry\n    Rails.logger.info \"Client disconnected: #{@client_id}\"\n    CLIENTS.delete(@client_id)\n    CAPABILITIES.delete(@client_id)\n  end\n\n  def receive(data)\n    data = data.with_indifferent_access\n\n    case data[:type]\n    when 'capability'\n      # Store client capabilities\n      CLIENTS[@client_id][:capabilities] = data[:capabilities]\n      CAPABILITIES[@client_id] = data[:capabilities]\n      Rails.logger.info \"Received capabilities from #{@client_id}\"\n\n    when 'response'\n      # Forward response to AI agent\n      # In a real implementation, you'd use a request/response correlation system\n      Rails.logger.info \"Received response from #{@client_id}\"\n\n    when 'event'\n      # Handle events (could be broadcast to interested agents)\n      Rails.logger.info \"Received event from #{@client_id}\"\n\n    else\n      Rails.logger.warn \"Unknown message type: #{data[:type]}\"\n    end\n  end\nend\n\n# app/controllers/agent_controller.rb\nclass AgentController &lt; ApplicationController\n  def capabilities\n    render json: CAPABILITIES\n  end\n\n  def command\n    client_id = params[:clientId]\n    command = params[:command]\n\n    # Check if client exists\n    unless CLIENTS.key?(client_id)\n      return render json: { error: 'Client not found' }, status: 404\n    end\n\n    client = CLIENTS[client_id]\n\n    begin\n      # Send command to client\n      ActionCable.server.broadcast \"agent_bridge_#{client_id}\", {\n        type: 'command',\n        target: command[:target],\n        action: command[:action],\n        parameters: command[:parameters] || {}\n      }\n\n      # For this simple example, we just acknowledge receipt\n      render json: {\n        success: true,\n        message: 'Command sent to client'\n      }\n    rescue =&gt; e\n      render json: {\n        error: 'Failed to send command',\n        message: e.message\n      }, status: 500\n    end\n  end\nend\n\n# config/initializers/agent_bridge.rb\nCLIENTS = {}\nCAPABILITIES = {}\n</code></pre>"},{"location":"advanced/server-implementations/#best-practices","title":"Best Practices","text":""},{"location":"advanced/server-implementations/#authentication","title":"Authentication","text":"<p>Always implement authentication for both WebSocket connections and API endpoints:</p> <pre><code>// Example JWT authentication middleware for Express\nconst jwt = require('jsonwebtoken');\n\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader &amp;&amp; authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) =&gt; {\n    if (err) {\n      return res.status(403).json({ error: 'Invalid or expired token' });\n    }\n\n    req.user = user;\n    next();\n  });\n}\n\n// Apply to routes\napp.use('/api', authenticateToken);\n</code></pre>"},{"location":"advanced/server-implementations/#websocket-authentication","title":"WebSocket Authentication","text":"<pre><code>// Authentication for WebSocket connections\nwss.on('connection', (ws, req) =&gt; {\n  // Extract token from query parameters or headers\n  const url = new URL(req.url, `http://${req.headers.host}`);\n  const token = url.searchParams.get('token');\n\n  if (!token) {\n    ws.close(4001, 'Authentication required');\n    return;\n  }\n\n  try {\n    // Verify token\n    const user = jwt.verify(token, process.env.JWT_SECRET);\n\n    // Store user info with connection\n    ws.user = user;\n\n    // Continue with normal connection handling\n    // ...\n  } catch (err) {\n    ws.close(4003, 'Invalid token');\n  }\n});\n</code></pre>"},{"location":"advanced/server-implementations/#connection-management","title":"Connection Management","text":"<p>Implement proper connection management:</p> <pre><code>// Heartbeat mechanism to detect dead connections\nfunction heartbeat() {\n  this.isAlive = true;\n}\n\nwss.on('connection', (ws) =&gt; {\n  ws.isAlive = true;\n  ws.on('pong', heartbeat);\n\n  // ... other connection handling\n});\n\n// Check for dead connections every 30 seconds\nconst interval = setInterval(() =&gt; {\n  wss.clients.forEach((ws) =&gt; {\n    if (ws.isAlive === false) {\n      return ws.terminate();\n    }\n\n    ws.isAlive = false;\n    ws.ping();\n  });\n}, 30000);\n\nwss.on('close', () =&gt; {\n  clearInterval(interval);\n});\n</code></pre>"},{"location":"advanced/server-implementations/#requestresponse-correlation","title":"Request/Response Correlation","text":"<p>Implement a request/response correlation system for asynchronous communication:</p> <pre><code>// Store pending requests\nconst pendingRequests = new Map();\n\n// When sending a command\napp.post('/api/command', (req, res) =&gt; {\n  const { clientId, command } = req.body;\n\n  // Check if client exists\n  if (!clients.has(clientId)) {\n    return res.status(404).json({ error: 'Client not found' });\n  }\n\n  const client = clients.get(clientId);\n  const requestId = uuidv4();\n\n  // Create a promise for this request\n  const responsePromise = new Promise((resolve, reject) =&gt; {\n    // Set a timeout for the request\n    const timeout = setTimeout(() =&gt; {\n      pendingRequests.delete(requestId);\n      reject(new Error('Request timed out'));\n    }, 30000); // 30 second timeout\n\n    pendingRequests.set(requestId, { resolve, reject, timeout });\n  });\n\n  // Send command to client\n  try {\n    client.ws.send(JSON.stringify({\n      type: 'command',\n      requestId,\n      ...command\n    }));\n\n    // Wait for response\n    responsePromise\n      .then(response =&gt; {\n        res.json(response);\n      })\n      .catch(err =&gt; {\n        res.status(500).json({\n          error: 'Command failed',\n          message: err.message\n        });\n      });\n  } catch (err) {\n    pendingRequests.delete(requestId);\n    res.status(500).json({\n      error: 'Failed to send command',\n      message: err.message\n    });\n  }\n});\n\n// When receiving a response\nws.on('message', (message) =&gt; {\n  try {\n    const parsedMessage = JSON.parse(message);\n\n    if (parsedMessage.type === 'response' &amp;&amp; parsedMessage.requestId) {\n      const pendingRequest = pendingRequests.get(parsedMessage.requestId);\n\n      if (pendingRequest) {\n        clearTimeout(pendingRequest.timeout);\n        pendingRequests.delete(parsedMessage.requestId);\n\n        if (parsedMessage.status === 'success') {\n          pendingRequest.resolve(parsedMessage.result);\n        } else {\n          pendingRequest.reject(new Error(parsedMessage.error?.message || 'Command failed'));\n        }\n      }\n    }\n\n    // ... handle other message types\n  } catch (err) {\n    console.error('Error handling message:', err);\n  }\n});\n</code></pre>"},{"location":"advanced/server-implementations/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"advanced/server-implementations/#load-balancing","title":"Load Balancing","text":"<p>When scaling to multiple server instances:</p> <pre><code>graph TD\n    A[Clients] &lt;--&gt;|WebSocket| B[Load Balancer]\n    B &lt;--&gt;|WebSocket| C[Server Instance 1]\n    B &lt;--&gt;|WebSocket| D[Server Instance 2]\n    B &lt;--&gt;|WebSocket| E[Server Instance 3]\n\n    C &lt;--&gt;|Shared State| F[Redis]\n    D &lt;--&gt;|Shared State| F\n    E &lt;--&gt;|Shared State| F</code></pre> <p>Use Redis or another shared store for client registry and pending requests:</p> <pre><code>const Redis = require('ioredis');\nconst redis = new Redis(process.env.REDIS_URL);\n\n// Store client information in Redis\nasync function registerClient(clientId, serverId) {\n  await redis.hset(`client:${clientId}`, {\n    serverId,\n    lastSeen: Date.now()\n  });\n}\n\n// Store capabilities in Redis\nasync function storeCapabilities(clientId, capabilities) {\n  await redis.set(`capabilities:${clientId}`, JSON.stringify(capabilities));\n}\n\n// Get all capabilities\nasync function getAllCapabilities() {\n  const clientKeys = await redis.keys('capabilities:*');\n  const allCapabilities = {};\n\n  for (const key of clientKeys) {\n    const clientId = key.split(':')[1];\n    const capabilities = JSON.parse(await redis.get(key));\n    allCapabilities[clientId] = capabilities;\n  }\n\n  return allCapabilities;\n}\n</code></pre>"},{"location":"advanced/server-implementations/#message-broker-for-inter-server-communication","title":"Message Broker for Inter-Server Communication","text":"<p>Use a message broker to communicate between server instances:</p> <pre><code>// Using Redis pub/sub for inter-server communication\nconst publisher = new Redis(process.env.REDIS_URL);\nconst subscriber = new Redis(process.env.REDIS_URL);\n\n// Each server instance has a unique ID\nconst serverId = uuidv4();\n\n// Subscribe to messages for this server\nsubscriber.subscribe(`server:${serverId}`);\n\nsubscriber.on('message', (channel, message) =&gt; {\n  if (channel === `server:${serverId}`) {\n    const { type, clientId, data } = JSON.parse(message);\n\n    if (type === 'command' &amp;&amp; clients.has(clientId)) {\n      const client = clients.get(clientId);\n      client.ws.send(JSON.stringify(data));\n    }\n  }\n});\n\n// API endpoint to send command to a client on any server\napp.post('/api/command', async (req, res) =&gt; {\n  const { clientId, command } = req.body;\n\n  // Get client server from Redis\n  const clientServer = await redis.hget(`client:${clientId}`, 'serverId');\n\n  if (!clientServer) {\n    return res.status(404).json({ error: 'Client not found' });\n  }\n\n  // Publish command to the server that has the client\n  await publisher.publish(`server:${clientServer}`, JSON.stringify({\n    type: 'command',\n    clientId,\n    data: {\n      type: 'command',\n      ...command\n    }\n  }));\n\n  res.json({\n    success: true,\n    message: 'Command sent to client'\n  });\n});\n</code></pre>"},{"location":"advanced/server-implementations/#security-considerations","title":"Security Considerations","text":"<p>For detailed security guidelines, see the Security Best Practices documentation.</p>"},{"location":"advanced/server-implementations/#next-steps","title":"Next Steps","text":"<ul> <li>WebSocket Configuration: Detailed client configuration</li> <li>Communication Protocol: Message format specifications</li> <li>Custom Implementation Examples: Sample implementations </li> </ul>"},{"location":"core/api-reference/","title":"Api Reference","text":"<p>This page is under construction. It will contain documentation about Api Reference in the Core section.</p>"},{"location":"core/api-reference/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"core/architecture/","title":"Architecture","text":"<p>This document provides an overview of the AgentBridge architecture, including its components, communication modes, and integration strategies.</p>"},{"location":"core/architecture/#system-overview","title":"System Overview","text":"<p>AgentBridge is designed to bridge the gap between AI agents and applications, providing a standardized way for agents to interact with UI components and application functionality.</p> <pre><code>graph TD\n    A[AI Agent] &lt;--&gt;|Commands &amp; Responses| B[AgentBridge]\n    B &lt;--&gt;|Events &amp; State| C[Application]\n\n    B --&gt;|Uses| D[Core]\n    B --&gt;|Uses| E[Framework Adapters]\n    B --&gt;|Uses| F[Communication Providers]\n\n    E --&gt;|Connects to| G[React]\n    E --&gt;|Connects to| H[Angular]\n    E --&gt;|Connects to| I[React Native]\n    E --&gt;|Connects to| J[Flutter]\n\n    F --&gt;|Connects to| K[Ably]\n    F --&gt;|Connects to| L[Firebase]\n    F --&gt;|Connects to| M[Pusher]\n    F --&gt;|Connects to| N[Supabase]\n    F --&gt;|Connects to| O[WebSocket]</code></pre>"},{"location":"core/architecture/#core-components","title":"Core Components","text":"<p>The AgentBridge framework consists of several core components:</p>"},{"location":"core/architecture/#agent-bridge","title":"Agent Bridge","text":"<p>The main coordinator responsible for: - Managing component and function registries - Handling communication between application and AI agents - Coordinating operations between different parts of the system</p>"},{"location":"core/architecture/#framework-adapters","title":"Framework Adapters","text":"<p>Adapters for different UI frameworks, responsible for: - Translating framework-specific component operations to AgentBridge operations - Handling framework-specific lifecycle events - Providing framework-specific APIs (hooks, components, etc.)</p>"},{"location":"core/architecture/#communication-providers","title":"Communication Providers","text":"<p>Providers for different communication methods, responsible for: - Establishing connections between applications and AI agents - Serializing and deserializing messages - Handling connection lifecycle (connect, disconnect, reconnect)</p>"},{"location":"core/architecture/#registries","title":"Registries","text":"<p>Manage registered functions and components: - Function Registry: Stores function definitions and handlers - Component Registry: Stores component definitions and handlers</p>"},{"location":"core/architecture/#communication-modes","title":"Communication Modes","text":"<p>AgentBridge supports two primary communication modes:</p>"},{"location":"core/architecture/#pubsub-mode","title":"Pub/Sub Mode","text":"<pre><code>graph TD\n    A[AI Agent] &lt;--&gt;|Pub/Sub Messages| B[Pub/Sub Service]\n    B &lt;--&gt;|Pub/Sub Messages| C[Application]\n\n    subgraph \"Application\"\n        D[AgentBridge] &lt;--&gt; E[UI Components]\n        D &lt;--&gt; F[Function Registry]\n    end\n\n    subgraph \"Pub/Sub Service Options\"\n        G[Ably]\n        H[Firebase]\n        I[Pusher]\n        J[Supabase]\n    end</code></pre> <p>In Pub/Sub mode: 1. The application connects to a real-time messaging service 2. The AI agent connects to the same messaging service 3. They communicate via shared channels/topics 4. No backend is required for the application</p> <p>Benefits: - Simple to set up - No need for a dedicated backend - Multiple messaging providers supported</p>"},{"location":"core/architecture/#self-hosted-mode","title":"Self-Hosted Mode","text":"<pre><code>graph TD\n    A[AI Agent] &lt;--&gt;|HTTP/WebSocket| B[Your Backend]\n    B &lt;--&gt;|WebSocket| C[Application]\n\n    subgraph \"Application\"\n        D[AgentBridge] &lt;--&gt; E[UI Components]\n        D &lt;--&gt; F[Function Registry]\n    end\n\n    subgraph \"Your Backend\"\n        G[WebSocket Server]\n        H[Authentication]\n        I[Business Logic]\n    end</code></pre> <p>In Self-Hosted mode: 1. The application connects to your backend via WebSockets 2. The AI agent connects to your backend via HTTP/WebSockets 3. Your backend serves as a mediator 4. The backend can implement additional logic, authentication, etc.</p> <p>Benefits: - Complete control over communication - Enhanced security options - Integration with existing backend systems</p>"},{"location":"core/architecture/#package-structure","title":"Package Structure","text":"<p>The AgentBridge framework is organized into the following packages:</p> <pre><code>graph TD\n    A[agentbridge] --&gt; B[core]\n    A --&gt; C[frameworks]\n    A --&gt; D[providers]\n    A --&gt; E[communication]\n\n    C --&gt; F[react]\n    C --&gt; G[angular]\n    C --&gt; H[react-native]\n    C --&gt; I[flutter]\n\n    D --&gt; J[ably]\n    D --&gt; K[firebase]\n    D --&gt; L[pusher]\n    D --&gt; M[supabase]\n\n    E --&gt; N[websocket]</code></pre> <p>Each package has a specific responsibility: - core: Core functionality and interfaces - frameworks: Framework-specific implementations - providers: Third-party service integrations - communication: Communication protocol implementations</p>"},{"location":"core/architecture/#message-protocol","title":"Message Protocol","text":"<p>AgentBridge uses a standardized message protocol for communication between AI agents and applications. See the Communication Protocol for details.</p>"},{"location":"core/architecture/#security","title":"Security","text":"<p>Security is a critical aspect of the AgentBridge architecture. The framework includes: - Authentication mechanisms - Authorization controls - Input/output validation - Transport security</p> <p>For more details, see the Security documentation.</p>"},{"location":"core/architecture/#integration-patterns","title":"Integration Patterns","text":""},{"location":"core/architecture/#basic-integration","title":"Basic Integration","text":"<pre><code>sequenceDiagram\n    participant App as Application\n    participant Bridge as AgentBridge\n    participant Agent as AI Agent\n\n    App-&gt;&gt;Bridge: Initialize\n    App-&gt;&gt;Bridge: Register Components\n    App-&gt;&gt;Bridge: Register Functions\n    Bridge-&gt;&gt;Agent: Send Capabilities\n    Agent-&gt;&gt;Bridge: Call Function\n    Bridge-&gt;&gt;App: Execute Function\n    App-&gt;&gt;Bridge: Return Result\n    Bridge-&gt;&gt;Agent: Send Result</code></pre>"},{"location":"core/architecture/#component-integration","title":"Component Integration","text":"<pre><code>sequenceDiagram\n    participant Component as UI Component\n    participant Adapter as Framework Adapter\n    participant Bridge as AgentBridge\n    participant Agent as AI Agent\n\n    Component-&gt;&gt;Adapter: Register Component\n    Adapter-&gt;&gt;Bridge: Register with AgentBridge\n    Bridge-&gt;&gt;Agent: Send Component Capability\n    Agent-&gt;&gt;Bridge: Send Action Command\n    Bridge-&gt;&gt;Adapter: Execute Action\n    Adapter-&gt;&gt;Component: Execute Action\n    Component-&gt;&gt;Adapter: Return Action Result\n    Adapter-&gt;&gt;Bridge: Return Action Result\n    Bridge-&gt;&gt;Agent: Send Action Result\n    Component-&gt;&gt;Adapter: State Changed\n    Adapter-&gt;&gt;Bridge: Update Component State\n    Bridge-&gt;&gt;Agent: Send State Change Event</code></pre>"},{"location":"core/architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Read the API Reference for detailed documentation</li> <li>See the Function Registry and Component Registry documentation</li> <li>Explore Security considerations for secure implementations </li> </ul>"},{"location":"core/communication-protocol/","title":"Communication Protocol","text":"<p>The AgentBridge communication protocol defines how AI agents interact with applications through standardized messages. This protocol ensures consistency across different platforms and communication providers.</p>"},{"location":"core/communication-protocol/#message-types","title":"Message Types","text":"<p>AgentBridge uses the following primary message types:</p> <pre><code>classDiagram\n    class Message {\n        id: string\n        type: string\n        timestamp: number\n    }\n\n    Message &lt;|-- CapabilityMessage\n    Message &lt;|-- CommandMessage\n    Message &lt;|-- ResponseMessage\n    Message &lt;|-- EventMessage\n\n    class CapabilityMessage {\n        capabilities: Capability[]\n    }\n\n    class CommandMessage {\n        command: string\n        target: string\n        parameters: object\n    }\n\n    class ResponseMessage {\n        requestId: string\n        status: string\n        result: any\n        error: Error\n    }\n\n    class EventMessage {\n        event: string\n        source: string\n        data: any\n    }</code></pre>"},{"location":"core/communication-protocol/#capability-messages","title":"Capability Messages","text":"<p>Sent from the application to the agent to describe available functions and components.</p> <pre><code>{\n  \"id\": \"cap-123\",\n  \"type\": \"capability\",\n  \"timestamp\": 1618825200000,\n  \"capabilities\": [\n    {\n      \"type\": \"function\",\n      \"name\": \"getWeather\",\n      \"description\": \"Get weather information for a location\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"location\": { \"type\": \"string\" },\n          \"units\": { \"type\": \"string\", \"enum\": [\"metric\", \"imperial\"] }\n        },\n        \"required\": [\"location\"]\n      }\n    },\n    {\n      \"type\": \"component\",\n      \"id\": \"submit-button\",\n      \"componentType\": \"button\",\n      \"properties\": {\n        \"label\": \"Submit\",\n        \"disabled\": false\n      },\n      \"actions\": [\"click\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"core/communication-protocol/#command-messages","title":"Command Messages","text":"<p>Sent from the agent to the application to call functions or control components.</p> <pre><code>{\n  \"id\": \"cmd-456\",\n  \"type\": \"command\",\n  \"timestamp\": 1618825205000,\n  \"command\": \"call\",\n  \"target\": \"getWeather\",\n  \"parameters\": {\n    \"location\": \"New York\",\n    \"units\": \"metric\"\n  }\n}\n</code></pre> <p>For component actions:</p> <pre><code>{\n  \"id\": \"cmd-789\",\n  \"type\": \"command\",\n  \"timestamp\": 1618825210000,\n  \"command\": \"action\",\n  \"target\": \"submit-button\",\n  \"action\": \"click\",\n  \"parameters\": {}\n}\n</code></pre>"},{"location":"core/communication-protocol/#response-messages","title":"Response Messages","text":"<p>Sent from the application to the agent in response to command messages.</p> <pre><code>{\n  \"id\": \"res-456\",\n  \"type\": \"response\",\n  \"timestamp\": 1618825207000,\n  \"requestId\": \"cmd-456\",\n  \"status\": \"success\",\n  \"result\": {\n    \"temperature\": 22,\n    \"conditions\": \"sunny\",\n    \"humidity\": 45\n  }\n}\n</code></pre> <p>Error response:</p> <pre><code>{\n  \"id\": \"res-789\",\n  \"type\": \"response\",\n  \"timestamp\": 1618825212000,\n  \"requestId\": \"cmd-789\",\n  \"status\": \"error\",\n  \"error\": {\n    \"code\": \"component_not_found\",\n    \"message\": \"Component with ID 'submit-button' not found\"\n  }\n}\n</code></pre>"},{"location":"core/communication-protocol/#event-messages","title":"Event Messages","text":"<p>Sent from the application to the agent to notify about state changes or other events.</p> <pre><code>{\n  \"id\": \"evt-123\",\n  \"type\": \"event\",\n  \"timestamp\": 1618825220000,\n  \"event\": \"state_changed\",\n  \"source\": \"submit-button\",\n  \"data\": {\n    \"properties\": {\n      \"disabled\": true\n    }\n  }\n}\n</code></pre>"},{"location":"core/communication-protocol/#message-flow","title":"Message Flow","text":"<p>The typical flow of communication between an AI agent and application:</p> <pre><code>sequenceDiagram\n    participant Agent as AI Agent\n    participant App as Application\n\n    App-&gt;&gt;Agent: Capability Message (functions &amp; components)\n    Agent-&gt;&gt;App: Command Message (call function)\n    App-&gt;&gt;Agent: Response Message (function result)\n    Agent-&gt;&gt;App: Command Message (component action)\n    App-&gt;&gt;Agent: Response Message (action result)\n    App-&gt;&gt;Agent: Event Message (state change)</code></pre>"},{"location":"core/communication-protocol/#transport-layer","title":"Transport Layer","text":"<p>The protocol is transport-agnostic and can be implemented over:</p> <ol> <li>WebSockets: For self-hosted mode with direct communication</li> <li>Pub/Sub: For applications without backends using third-party messaging services</li> <li>HTTP: For simple request/response patterns</li> </ol>"},{"location":"core/communication-protocol/#security-considerations","title":"Security Considerations","text":"<p>The protocol includes several security features:</p> <ol> <li>Message Authentication: Messages can include authentication information</li> <li>Permissions: Capability messages can specify required permissions</li> <li>Rate Limiting: Implementations can enforce rate limits on commands</li> <li>Input Validation: All parameters should be validated using the type system</li> </ol>"},{"location":"core/communication-protocol/#extending-the-protocol","title":"Extending the Protocol","text":"<p>The protocol can be extended with custom message types by following these guidelines:</p> <ol> <li>Maintain the core message structure (id, type, timestamp)</li> <li>Use descriptive and consistent naming for new message types</li> <li>Document the purpose and structure of custom messages</li> <li>Ensure backward compatibility when adding new fields</li> </ol>"},{"location":"core/communication-protocol/#implementation-guidelines","title":"Implementation Guidelines","text":"<p>When implementing the AgentBridge protocol:</p> <ol> <li>Handle message ordering correctly</li> <li>Implement proper error handling</li> <li>Add timeouts for pending responses</li> <li>Include retry logic for failed commands</li> <li>Maintain a message queue for reliability</li> </ol>"},{"location":"core/communication-protocol/#related-documentation","title":"Related Documentation","text":"<ul> <li>Type System: Used for validating message parameters</li> <li>Function Registry: Defines callable functions</li> <li>Component Registry: Manages UI components </li> </ul>"},{"location":"core/component-registry/","title":"Component Registry","text":"<p>The Component Registry is a core part of the AgentBridge framework that manages UI components that can be controlled by AI agents. It provides a mechanism for registering, tracking, and accessing components across your application.</p>"},{"location":"core/component-registry/#overview","title":"Overview","text":"<p>The Component Registry maintains a collection of UI components that have been registered with AgentBridge. Each component is registered with:</p> <ul> <li>A unique identifier</li> <li>A component definition that describes the component's properties and actions</li> <li>Handlers for executing actions on the component</li> </ul> <pre><code>graph TD\n    A[Application] --&gt;|Registers| B[Component Registry]\n    B --&gt;|Stores| C[Component Definitions]\n    B --&gt;|Manages| D[Component Handlers]\n    E[AI Agent] --&gt;|Discovers| C\n    E --&gt;|Interacts with| D</code></pre>"},{"location":"core/component-registry/#component-definition","title":"Component Definition","text":"<p>A component definition describes what a component is and what it can do:</p> <pre><code>interface ComponentDefinition {\n  type: string;\n  properties: {\n    [key: string]: any;\n  };\n  actions: string[];\n  metadata?: {\n    [key: string]: any;\n  };\n}\n</code></pre> <ul> <li><code>type</code>: The component type (e.g., \"button\", \"textfield\", \"dropdown\")</li> <li><code>properties</code>: Object describing the component's properties</li> <li><code>actions</code>: Array of action names that can be performed on the component</li> <li><code>metadata</code>: Optional additional information about the component</li> </ul>"},{"location":"core/component-registry/#registering-components","title":"Registering Components","text":"<p>Components are typically registered through framework-specific adapters:</p> <pre><code>// Example of registering a component\nbridge.registerComponent(\n  \"submit-button\",\n  {\n    type: \"button\",\n    properties: {\n      label: \"Submit\",\n      disabled: false\n    },\n    actions: [\"click\"]\n  },\n  {\n    // Action handlers\n    click: async () =&gt; {\n      // Handle click action\n      return { success: true };\n    }\n  }\n);\n</code></pre>"},{"location":"core/component-registry/#component-handlers","title":"Component Handlers","text":"<p>Component handlers are functions that execute actions on components:</p> <pre><code>interface ComponentHandlers {\n  [actionName: string]: (params?: any) =&gt; Promise&lt;any&gt;;\n}\n</code></pre> <p>Each handler: - Takes optional parameters - Returns a promise that resolves to the result of the action - May throw errors if the action cannot be performed</p>"},{"location":"core/component-registry/#accessing-components","title":"Accessing Components","text":"<p>AI agents can access registered components through the component registry:</p> <pre><code>// Get all registered components\nconst components = bridge.getRegisteredComponents();\n\n// Get a specific component by ID\nconst component = bridge.getComponent(\"submit-button\");\n\n// Execute an action on a component\nconst result = await bridge.executeAction(\"submit-button\", \"click\");\n</code></pre>"},{"location":"core/component-registry/#component-lifecycle","title":"Component Lifecycle","text":"<p>Components have a lifecycle within the registry:</p> <ol> <li>Registration: Component is added to the registry</li> <li>Updates: Component properties may be updated over time</li> <li>Unregistration: Component is removed from the registry (e.g., when unmounted)</li> </ol> <pre><code>stateDiagram-v2\n    [*] --&gt; Registered: registerComponent()\n    Registered --&gt; Updated: updateComponent()\n    Updated --&gt; Updated: updateComponent()\n    Registered --&gt; Unregistered: unregisterComponent()\n    Updated --&gt; Unregistered: unregisterComponent()\n    Unregistered --&gt; [*]</code></pre>"},{"location":"core/component-registry/#best-practices","title":"Best Practices","text":"<p>When working with the Component Registry:</p> <ol> <li>Unique IDs: Ensure each component has a unique identifier</li> <li>Descriptive Properties: Make properties descriptive and meaningful</li> <li>Consistent Action Names: Use consistent naming for similar actions</li> <li>Error Handling: Implement proper error handling in action handlers</li> <li>Cleanup: Always unregister components when they are no longer needed</li> </ol>"},{"location":"core/component-registry/#related-documentation","title":"Related Documentation","text":"<ul> <li>Function Registry: Register functions that can be called by AI agents</li> <li>Type System: Define and validate component properties and action parameters </li> </ul>"},{"location":"core/function-registry/","title":"Function Registry","text":"<p>The Function Registry is a core component of AgentBridge that allows you to expose application functionality to AI agents. Functions registered with AgentBridge can be discovered and called by AI agents, enabling them to perform actions within your application.</p>"},{"location":"core/function-registry/#overview","title":"Overview","text":"<p>The function registry manages:</p> <ul> <li>Registration of functions with metadata and validation</li> <li>Discovery of available functions by AI agents</li> <li>Execution of functions with proper validation and error handling</li> <li>Type checking for parameters and return values</li> </ul>"},{"location":"core/function-registry/#registering-functions","title":"Registering Functions","text":""},{"location":"core/function-registry/#basic-registration","title":"Basic Registration","text":"<p>Functions can be registered with the AgentBridge instance:</p> <pre><code>import { AgentBridge } from '@agentbridge/core';\n\nconst bridge = new AgentBridge({\n  applicationId: 'my-app',\n  environmentId: 'development'\n});\n\n// Register a function\nbridge.registerFunction({\n  name: 'greet',\n  description: 'Greet a user by name',\n  parameters: {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n    },\n    required: ['name']\n  },\n  handler: async (params) =&gt; {\n    const { name } = params;\n    return { message: `Hello, ${name}!` };\n  }\n});\n</code></pre>"},{"location":"core/function-registry/#with-framework-sdks","title":"With Framework SDKs","text":"<p>Each framework SDK provides its own way to register functions:</p>"},{"location":"core/function-registry/#react","title":"React","text":"<pre><code>import { useAgentFunction } from '@agentbridge/react';\n\nfunction WeatherWidget() {\n  useAgentFunction({\n    name: 'getWeather',\n    description: 'Get weather for a location',\n    parameters: {\n      type: 'object',\n      properties: {\n        location: { type: 'string' },\n        units: { type: 'string', enum: ['metric', 'imperial'] }\n      },\n      required: ['location']\n    },\n    handler: async (params) =&gt; {\n      // Implementation\n      return { temperature: 22, conditions: 'sunny' };\n    }\n  });\n\n  return (\n    &lt;div&gt;Weather Widget&lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"core/function-registry/#angular","title":"Angular","text":"<pre><code>import { Component, OnInit } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-weather',\n  template: '&lt;div&gt;Weather Widget&lt;/div&gt;'\n})\nexport class WeatherComponent implements OnInit {\n  constructor(private agentBridge: AgentBridgeService) {}\n\n  ngOnInit() {\n    this.agentBridge.registerFunction({\n      name: 'getWeather',\n      description: 'Get weather for a location',\n      parameters: {\n        type: 'object',\n        properties: {\n          location: { type: 'string' },\n          units: { type: 'string', enum: ['metric', 'imperial'] }\n        },\n        required: ['location']\n      },\n      handler: async (params) =&gt; {\n        // Implementation\n        return { temperature: 22, conditions: 'sunny' };\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"core/function-registry/#function-definition","title":"Function Definition","text":"<p>A function definition consists of:</p> <ul> <li>name: A unique identifier for the function</li> <li>description: A human-readable description of what the function does</li> <li>parameters: A JSON Schema object defining the expected parameters</li> <li>handler: The implementation function that will be called</li> <li>tags (optional): Tags for categorizing and filtering functions</li> <li>returnSchema (optional): A JSON Schema defining the expected return value</li> </ul>"},{"location":"core/function-registry/#example-with-return-schema","title":"Example with Return Schema","text":"<pre><code>bridge.registerFunction({\n  name: 'calculateTax',\n  description: 'Calculate tax for an amount',\n  parameters: {\n    type: 'object',\n    properties: {\n      amount: { type: 'number' },\n      taxRate: { type: 'number' }\n    },\n    required: ['amount', 'taxRate']\n  },\n  returnSchema: {\n    type: 'object',\n    properties: {\n      tax: { type: 'number' },\n      total: { type: 'number' }\n    },\n    required: ['tax', 'total']\n  },\n  handler: async (params) =&gt; {\n    const { amount, taxRate } = params;\n    const tax = amount * (taxRate / 100);\n    return {\n      tax,\n      total: amount + tax\n    };\n  }\n});\n</code></pre>"},{"location":"core/function-registry/#parameter-validation","title":"Parameter Validation","text":"<p>AgentBridge uses JSON Schema to validate function parameters. This ensures that functions receive the expected data types and required fields:</p> <pre><code>// Parameter schema example\nconst parameterSchema = {\n  type: 'object',\n  properties: {\n    // Basic types\n    name: { type: 'string' },\n    age: { type: 'number' },\n    isActive: { type: 'boolean' },\n\n    // Complex types\n    address: {\n      type: 'object',\n      properties: {\n        street: { type: 'string' },\n        city: { type: 'string' },\n        zipCode: { type: 'string' }\n      },\n      required: ['street', 'city']\n    },\n\n    // Arrays\n    tags: {\n      type: 'array',\n      items: { type: 'string' }\n    },\n\n    // Enums\n    role: {\n      type: 'string',\n      enum: ['admin', 'user', 'guest']\n    },\n\n    // Constraints\n    score: {\n      type: 'number',\n      minimum: 0,\n      maximum: 100\n    },\n\n    // Format\n    email: {\n      type: 'string',\n      format: 'email'\n    }\n  },\n  required: ['name', 'email']\n};\n</code></pre>"},{"location":"core/function-registry/#function-context","title":"Function Context","text":"<p>Functions can receive context information about the current execution environment:</p> <pre><code>bridge.registerFunction({\n  name: 'getUserInfo',\n  description: 'Get information about the current user',\n  parameters: {},\n  handler: async (params, context) =&gt; {\n    // Access context information\n    const { user, application, agent } = context;\n\n    return {\n      userId: user?.id,\n      userName: user?.name,\n      appId: application.id,\n      agentId: agent.id\n    };\n  }\n});\n</code></pre> <p>Available context properties:</p> <ul> <li>user: Information about the current user (if authenticated)</li> <li>application: Information about the current application</li> <li>agent: Information about the AI agent that called the function</li> <li>ip: The IP address of the client (if available)</li> <li>timestamp: The time when the function was called</li> </ul>"},{"location":"core/function-registry/#calling-functions","title":"Calling Functions","text":"<p>Functions can be called both by AI agents and programmatically:</p>"},{"location":"core/function-registry/#programmatic-calls","title":"Programmatic Calls","text":"<pre><code>// Call a function from code\nconst result = await bridge.callFunction('getWeather', {\n  location: 'New York',\n  units: 'metric'\n});\n\nconsole.log(result); // { temperature: 22, conditions: 'sunny' }\n</code></pre>"},{"location":"core/function-registry/#framework-specific-calls","title":"Framework-Specific Calls","text":""},{"location":"core/function-registry/#react_1","title":"React","text":"<pre><code>import { useAgentBridge } from '@agentbridge/react';\n\nfunction WeatherDisplay() {\n  const { callFunction } = useAgentBridge();\n  const [weather, setWeather] = useState(null);\n\n  const getWeatherData = async () =&gt; {\n    const result = await callFunction('getWeather', {\n      location: 'London',\n      units: 'metric'\n    });\n    setWeather(result);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={getWeatherData}&gt;Get Weather&lt;/button&gt;\n      {weather &amp;&amp; (\n        &lt;div&gt;\n          &lt;p&gt;Temperature: {weather.temperature}\u00b0C&lt;/p&gt;\n          &lt;p&gt;Conditions: {weather.conditions}&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"core/function-registry/#error-handling","title":"Error Handling","text":"<p>Function handlers can throw errors, which will be properly handled and returned to the caller:</p> <pre><code>bridge.registerFunction({\n  name: 'divide',\n  description: 'Divide two numbers',\n  parameters: {\n    type: 'object',\n    properties: {\n      numerator: { type: 'number' },\n      denominator: { type: 'number' }\n    },\n    required: ['numerator', 'denominator']\n  },\n  handler: async (params) =&gt; {\n    const { numerator, denominator } = params;\n\n    if (denominator === 0) {\n      throw new Error('Cannot divide by zero');\n    }\n\n    return { result: numerator / denominator };\n  }\n});\n</code></pre>"},{"location":"core/function-registry/#error-types","title":"Error Types","text":"<p>AgentBridge provides several error types for different scenarios:</p> <pre><code>import { \n  ValidationError, \n  NotFoundError, \n  PermissionError \n} from '@agentbridge/core';\n\nbridge.registerFunction({\n  name: 'fetchUserData',\n  description: 'Fetch user data by ID',\n  parameters: {\n    type: 'object',\n    properties: {\n      userId: { type: 'string' }\n    },\n    required: ['userId']\n  },\n  handler: async (params, context) =&gt; {\n    const { userId } = params;\n\n    // Check permissions\n    if (!context.user || !context.user.roles.includes('admin')) {\n      throw new PermissionError('Only admins can access user data');\n    }\n\n    // Fetch user data\n    const userData = await fetchUserFromDatabase(userId);\n\n    if (!userData) {\n      throw new NotFoundError(`User with ID ${userId} not found`);\n    }\n\n    return userData;\n  }\n});\n</code></pre>"},{"location":"core/function-registry/#function-discoverability","title":"Function Discoverability","text":"<p>AI agents can discover registered functions through the capability protocol:</p> <pre><code>1. Agent connects to application\n2. Application sends capabilities message including functions\n3. Agent discovers available functions and their parameters\n4. Agent can call these functions by name\n</code></pre> <p>The function registry automatically generates JSON Schema definitions for all registered functions, making them discoverable by AI agents.</p>"},{"location":"core/function-registry/#best-practices","title":"Best Practices","text":""},{"location":"core/function-registry/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Use camelCase for function names: <code>getUserInfo</code>, <code>calculateTax</code></li> <li>Use descriptive, action-oriented names</li> <li>Be consistent across your application</li> </ul>"},{"location":"core/function-registry/#parameter-design","title":"Parameter Design","text":"<ul> <li>Keep parameters simple and focused</li> <li>Use JSON Schema to define clear parameter expectations</li> <li>Always validate input values within the handler for extra safety</li> </ul>"},{"location":"core/function-registry/#function-organization","title":"Function Organization","text":"<ul> <li>Group related functions with tags</li> <li>Use namespaces for larger applications: <code>user.get</code>, <code>user.update</code></li> <li>Keep function logic focused on a single responsibility</li> </ul>"},{"location":"core/function-registry/#security-considerations","title":"Security Considerations","text":"<ul> <li>Check permissions before performing sensitive operations</li> <li>Validate all inputs, even with schema validation</li> <li>Don't expose internal implementation details in responses</li> <li>Use context to identify the caller</li> </ul>"},{"location":"core/function-registry/#performance","title":"Performance","text":"<ul> <li>Optimize async operations for mobile environments</li> <li>Consider caching results for expensive operations</li> <li>Keep functions lightweight when possible</li> </ul>"},{"location":"core/function-registry/#code-examples","title":"Code Examples","text":""},{"location":"core/function-registry/#a-complete-example","title":"A Complete Example","text":"<pre><code>import { AgentBridge } from '@agentbridge/core';\n\n// Create a bridge instance\nconst bridge = new AgentBridge({\n  applicationId: 'my-app',\n  environmentId: 'development'\n});\n\n// Register functions\nbridge.registerFunction({\n  name: 'searchProducts',\n  description: 'Search for products by query',\n  parameters: {\n    type: 'object',\n    properties: {\n      query: { type: 'string' },\n      category: { \n        type: 'string',\n        enum: ['electronics', 'clothing', 'home', 'books']\n      },\n      maxPrice: { type: 'number' },\n      sortBy: { \n        type: 'string',\n        enum: ['price', 'rating', 'newest'],\n        default: 'rating'\n      },\n      limit: { \n        type: 'number',\n        minimum: 1,\n        maximum: 50,\n        default: 10\n      }\n    },\n    required: ['query']\n  },\n  returnSchema: {\n    type: 'object',\n    properties: {\n      results: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            name: { type: 'string' },\n            price: { type: 'number' },\n            category: { type: 'string' },\n            rating: { type: 'number' }\n          }\n        }\n      },\n      totalResults: { type: 'number' },\n      page: { type: 'number' }\n    }\n  },\n  handler: async (params) =&gt; {\n    const { query, category, maxPrice, sortBy = 'rating', limit = 10 } = params;\n\n    // Implement product search logic\n    // (This is a simplified example)\n    const results = await searchProductDatabase({\n      query,\n      category,\n      maxPrice,\n      sortBy,\n      limit\n    });\n\n    return {\n      results: results.items,\n      totalResults: results.total,\n      page: results.page\n    };\n  }\n});\n\n// Now AI agents can discover and call this function\n</code></pre>"},{"location":"core/function-registry/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Type System for defining schemas</li> <li>Learn about Component Registry for UI components</li> <li>See the API Reference for detailed documentation</li> </ul>"},{"location":"core/overview/","title":"Core Overview","text":"<p>The AgentBridge Core package provides the foundation for all AgentBridge functionality. It contains the primary interfaces, classes, and utilities that power the framework across all supported platforms.</p>"},{"location":"core/overview/#architecture","title":"Architecture","text":"<p>The core package is platform-agnostic and consists of several key components:</p> <pre><code>@agentbridge/core/\n\u251c\u2500\u2500 agent-bridge.ts      # Main AgentBridge class\n\u251c\u2500\u2500 adapter.ts           # Framework adapter interface\n\u251c\u2500\u2500 registry.ts          # Function registry implementation\n\u251c\u2500\u2500 component-registry.ts # Component registry implementation\n\u251c\u2500\u2500 types.ts             # TypeScript definitions and interfaces\n\u2514\u2500\u2500 utils/               # Utility functions and helpers\n</code></pre>"},{"location":"core/overview/#main-components","title":"Main Components","text":""},{"location":"core/overview/#agentbridge-class","title":"AgentBridge Class","text":"<p>The <code>AgentBridge</code> class is the central coordinator of the framework. It:</p> <ul> <li>Manages communication between application and AI agents</li> <li>Registers and tracks UI components</li> <li>Registers and executes functions</li> <li>Handles context and state management</li> </ul> <pre><code>import { AgentBridge } from '@agentbridge/core';\n\n// Create an instance\nconst bridge = new AgentBridge({\n  applicationId: 'my-app-123',\n  environmentId: 'development'\n});\n\n// Initialize with a communication provider\nbridge.initialize(communicationProvider);\n</code></pre>"},{"location":"core/overview/#framework-adapters","title":"Framework Adapters","text":"<p>Framework adapters serve as bridges between the core functionality and specific UI frameworks (React, Angular, etc.). They implement the <code>FrameworkAdapter</code> interface:</p> <pre><code>interface FrameworkAdapter {\n  initialize(bridge: AgentBridge): void;\n  registerComponent(componentId: string, definition: ComponentDefinition, handlers: ComponentHandlers): void;\n  unregisterComponent(componentId: string): void;\n  disconnect(): Promise&lt;void&gt;;\n  getComponentDefinitions(): ComponentDefinition[];\n}\n</code></pre>"},{"location":"core/overview/#function-registry","title":"Function Registry","text":"<p>The function registry manages functions that can be called by AI agents:</p> <pre><code>// Register a function\nbridge.registerFunction({\n  name: 'getWeather',\n  description: 'Get weather information for a location',\n  parameters: {\n    type: 'object',\n    properties: {\n      location: { type: 'string' },\n      units: { type: 'string', enum: ['metric', 'imperial'] }\n    },\n    required: ['location']\n  },\n  handler: async (params) =&gt; {\n    // Implementation\n    return { temperature: 22, conditions: 'sunny' };\n  }\n});\n</code></pre>"},{"location":"core/overview/#component-registry","title":"Component Registry","text":"<p>The component registry tracks UI components that can be controlled by AI agents:</p> <pre><code>// Component definition example\nconst buttonDefinition = {\n  type: 'button',\n  properties: {\n    label: { type: 'string' },\n    disabled: { type: 'boolean' }\n  },\n  actions: ['click']\n};\n</code></pre>"},{"location":"core/overview/#communication-architecture","title":"Communication Architecture","text":"<p>AgentBridge supports two primary communication modes:</p>"},{"location":"core/overview/#1-pubsub-mode","title":"1. Pub/Sub Mode","text":"<p>Uses third-party messaging services to relay messages between AI agents and applications:</p> <pre><code>+-------------+        +---------------+        +------------+\n|             |        |               |        |            |\n| Application +&lt;------&gt;+ Pub/Sub Service +&lt;------&gt;+ AI Agent   |\n|             |        |               |        |            |\n+-------------+        +---------------+        +------------+\n</code></pre>"},{"location":"core/overview/#2-self-hosted-mode","title":"2. Self-Hosted Mode","text":"<p>Uses a direct WebSocket connection via your backend:</p> <pre><code>+-------------+        +---------------+        +------------+\n|             |        |               |        |            |\n| Application +&lt;------&gt;+ Your Backend  +&lt;------&gt;+ AI Agent   |\n|             |        |               |        |            |\n+-------------+        +---------------+        +------------+\n</code></pre>"},{"location":"core/overview/#message-protocol","title":"Message Protocol","text":"<p>AgentBridge uses a standardized message protocol for communication:</p>"},{"location":"core/overview/#capability-messages","title":"Capability Messages","text":"<p>Sent from the application to the agent to describe available functions and components.</p>"},{"location":"core/overview/#command-messages","title":"Command Messages","text":"<p>Sent from the agent to the application to call functions or control components.</p>"},{"location":"core/overview/#response-messages","title":"Response Messages","text":"<p>Sent from the application to the agent in response to command messages.</p>"},{"location":"core/overview/#type-system","title":"Type System","text":"<p>AgentBridge uses a JSON Schema-compatible type system to define and validate:</p> <ul> <li>Function parameters and return values</li> <li>Component properties and action parameters</li> <li>Message structures</li> </ul>"},{"location":"core/overview/#context-management","title":"Context Management","text":"<p>The context system provides AI agents with information about:</p> <ul> <li>The current application state</li> <li>User information</li> <li>Environment details</li> <li>Execution context for functions</li> </ul>"},{"location":"core/overview/#next-steps","title":"Next Steps","text":"<ul> <li>See the API Reference for detailed documentation of all classes and interfaces</li> <li>Learn about the Function Registry for registering functions</li> <li>Explore the Type System for defining schemas</li> </ul>"},{"location":"core/pubsub-config/","title":"Pub/Sub Configuration","text":"<p>This document outlines the configuration options for setting up the pub/sub communication mode in AgentBridge.</p>"},{"location":"core/pubsub-config/#overview","title":"Overview","text":"<p>The pub/sub communication mode uses third-party messaging services to facilitate communication between AI agents and your application without requiring a dedicated backend.</p> <pre><code>graph TD\n    A[AI Agent] &lt;--&gt;|Pub/Sub| B[Messaging Service]\n    B &lt;--&gt;|Pub/Sub| C[Application]\n    C --&gt;|Uses| D[AgentBridge]\n    D --&gt;|Uses| E[Provider Implementation]\n    E --&gt;|Connects to| B</code></pre>"},{"location":"core/pubsub-config/#supported-providers","title":"Supported Providers","text":"<p>AgentBridge supports several pub/sub providers:</p> <ol> <li>Ably</li> <li>Firebase Realtime Database</li> <li>Pusher</li> <li>Supabase Realtime</li> </ol>"},{"location":"core/pubsub-config/#configuration-options","title":"Configuration Options","text":""},{"location":"core/pubsub-config/#common-options","title":"Common Options","text":"<p>All pub/sub providers support these common configuration options:</p> Option Type Description Default <code>applicationId</code> string Unique identifier for your application Required <code>environmentId</code> string Environment (e.g., \"development\", \"production\") \"development\" <code>channelPrefix</code> string Prefix for channel names \"agentbridge\" <code>capabilities</code> object Configuration for capability announcements <code>{ interval: 30000 }</code> <code>reconnect</code> object Reconnection behavior <code>{ maxAttempts: 10, delay: 1000 }</code>"},{"location":"core/pubsub-config/#provider-specific-options","title":"Provider-Specific Options","text":""},{"location":"core/pubsub-config/#ably-provider","title":"Ably Provider","text":"<pre><code>import { AgentBridge } from '@agentbridge/core';\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key',\n  clientId: 'optional-client-id',\n  authUrl: 'optional-auth-url',\n  authMethod: 'GET',\n  authHeaders: {},\n  authParams: {},\n  useTokenAuth: false,\n  channelPrefix: 'custom-prefix'\n});\n\nconst bridge = new AgentBridge({\n  applicationId: 'my-app-123',\n  environmentId: 'development'\n});\n\nbridge.initialize(ablyProvider);\n</code></pre>"},{"location":"core/pubsub-config/#firebase-provider","title":"Firebase Provider","text":"<pre><code>import { AgentBridge } from '@agentbridge/core';\nimport { FirebaseProvider } from '@agentbridge/provider-firebase';\n\nconst firebaseProvider = new FirebaseProvider({\n  // Firebase config\n  firebaseConfig: {\n    apiKey: 'your-api-key',\n    authDomain: 'your-auth-domain',\n    databaseURL: 'your-database-url',\n    projectId: 'your-project-id',\n    storageBucket: 'your-storage-bucket',\n    messagingSenderId: 'your-messaging-sender-id',\n    appId: 'your-app-id'\n  },\n  // Optional: custom Firebase app instance\n  firebaseApp: customFirebaseApp,\n  // Optional: authentication\n  auth: {\n    anonymous: true,\n    // Or custom token\n    customToken: 'your-custom-token'\n    // Or email/password\n    email: 'user@example.com',\n    password: 'password'\n  },\n  channelPrefix: 'custom-prefix'\n});\n\nconst bridge = new AgentBridge({\n  applicationId: 'my-app-123',\n  environmentId: 'development'\n});\n\nbridge.initialize(firebaseProvider);\n</code></pre>"},{"location":"core/pubsub-config/#pusher-provider","title":"Pusher Provider","text":"<pre><code>import { AgentBridge } from '@agentbridge/core';\nimport { PusherProvider } from '@agentbridge/provider-pusher';\n\nconst pusherProvider = new PusherProvider({\n  // Pusher key\n  key: 'your-pusher-key',\n  // Pusher options\n  cluster: 'eu',\n  forceTLS: true,\n  // Optional: authorization endpoint\n  authEndpoint: 'https://your-auth-endpoint.com/pusher/auth',\n  auth: {\n    headers: { 'X-Custom-Header': 'value' }\n  },\n  channelPrefix: 'custom-prefix'\n});\n\nconst bridge = new AgentBridge({\n  applicationId: 'my-app-123',\n  environmentId: 'development'\n});\n\nbridge.initialize(pusherProvider);\n</code></pre>"},{"location":"core/pubsub-config/#supabase-provider","title":"Supabase Provider","text":"<pre><code>import { AgentBridge } from '@agentbridge/core';\nimport { SupabaseProvider } from '@agentbridge/provider-supabase';\n\nconst supabaseProvider = new SupabaseProvider({\n  // Supabase URL and key\n  supabaseUrl: 'https://your-project.supabase.co',\n  supabaseKey: 'your-supabase-key',\n  // Optional: custom Supabase client\n  supabaseClient: customSupabaseClient,\n  // Optional: channel options\n  channelOptions: {\n    config: {\n      broadcast: { self: true }\n    }\n  },\n  channelPrefix: 'custom-prefix'\n});\n\nconst bridge = new AgentBridge({\n  applicationId: 'my-app-123',\n  environmentId: 'development'\n});\n\nbridge.initialize(supabaseProvider);\n</code></pre>"},{"location":"core/pubsub-config/#channel-structure","title":"Channel Structure","text":"<p>Pub/sub providers use the following channel structure:</p> <pre><code>graph LR\n    A[Channels] --&gt; B[\"${prefix}-${appId}-${env}-capabilities\"]\n    A --&gt; C[\"${prefix}-${appId}-${env}-commands\"]\n    A --&gt; D[\"${prefix}-${appId}-${env}-responses\"]\n    A --&gt; E[\"${prefix}-${appId}-${env}-events\"]</code></pre> <p>Where: - <code>prefix</code> is the channel prefix (default: \"agentbridge\") - <code>appId</code> is your application ID - <code>env</code> is your environment ID</p>"},{"location":"core/pubsub-config/#security-considerations","title":"Security Considerations","text":"<p>When using pub/sub providers, consider the following security aspects:</p> <ol> <li>API Key Management:</li> <li>Keep API keys secure and never expose them in client-side code</li> <li>Use environment variables for API keys</li> <li> <p>Consider using API key rotation strategies</p> </li> <li> <p>Authentication:</p> </li> <li>Use token-based authentication when possible</li> <li> <p>Implement server-side authentication for sensitive operations</p> </li> <li> <p>Authorization:</p> </li> <li>Use private channels with authentication for sensitive data</li> <li> <p>Implement authorization checks in your message handlers</p> </li> <li> <p>Data Validation:</p> </li> <li>Validate all incoming messages before processing</li> <li>Use the AgentBridge type system to validate parameters</li> </ol> <p>For more comprehensive security guidance, see the Security Best Practices documentation.</p>"},{"location":"core/pubsub-config/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"core/pubsub-config/#custom-provider","title":"Custom Provider","text":"<p>You can create a custom pub/sub provider by implementing the <code>CommunicationProvider</code> interface:</p> <pre><code>import { CommunicationProvider, Message } from '@agentbridge/core';\n\nclass CustomPubSubProvider implements CommunicationProvider {\n  constructor(options) {\n    // Initialize your provider\n  }\n\n  async connect(): Promise&lt;void&gt; {\n    // Establish connection\n  }\n\n  async disconnect(): Promise&lt;void&gt; {\n    // Close connection\n  }\n\n  async sendMessage(message: Message): Promise&lt;void&gt; {\n    // Send a message\n  }\n\n  onMessage(callback: (message: Message) =&gt; void): void {\n    // Register message handler\n  }\n\n  onConnectionStatusChange(callback: (status: string) =&gt; void): void {\n    // Register connection status handler\n  }\n}\n</code></pre>"},{"location":"core/pubsub-config/#error-handling","title":"Error Handling","text":"<p>Configure how your application handles communication errors:</p> <pre><code>bridge.on('error', (error) =&gt; {\n  console.error('AgentBridge error:', error);\n\n  // Implement custom error handling\n  if (error.code === 'connection_lost') {\n    // Handle connection issues\n  } else if (error.code === 'message_failed') {\n    // Handle message delivery failures\n  }\n});\n</code></pre>"},{"location":"core/pubsub-config/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the Communication Protocol</li> <li>Explore WebSocket Configuration for self-hosted mode</li> <li>See Security Best Practices for securing your implementation </li> </ul>"},{"location":"core/type-system/","title":"Type System","text":"<p>AgentBridge uses a robust type system to define and validate function parameters, return values, and component properties. The type system is based on JSON Schema and ensures type safety across framework boundaries.</p>"},{"location":"core/type-system/#overview","title":"Overview","text":"<p>The type system provides:</p> <ul> <li>Runtime validation of function parameters and return values</li> <li>Self-documentation for AI agents to understand available functionalities</li> <li>Consistent data shapes across framework boundaries</li> <li>Clear error messages when validation fails</li> </ul>"},{"location":"core/type-system/#json-schema-foundation","title":"JSON Schema Foundation","text":"<p>AgentBridge's type system uses JSON Schema as its foundation, which provides a vocabulary to validate JSON documents.</p>"},{"location":"core/type-system/#basic-types","title":"Basic Types","text":"<p>JSON Schema supports several primitive types:</p> <pre><code>// String\n{ type: 'string' }\n\n// Number\n{ type: 'number' }\n\n// Integer\n{ type: 'integer' }\n\n// Boolean\n{ type: 'boolean' }\n\n// Null\n{ type: 'null' }\n\n// Object\n{ type: 'object' }\n\n// Array\n{ type: 'array' }\n</code></pre>"},{"location":"core/type-system/#type-composition","title":"Type Composition","text":"<p>You can combine types to create more complex definitions:</p> <pre><code>// Example of a complex schema\nconst userSchema = {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    name: { type: 'string' },\n    age: { type: 'number', minimum: 0 },\n    email: { type: 'string', format: 'email' },\n    isActive: { type: 'boolean' },\n    tags: { \n      type: 'array', \n      items: { type: 'string' } \n    },\n    address: {\n      type: 'object',\n      properties: {\n        street: { type: 'string' },\n        city: { type: 'string' },\n        zipCode: { type: 'string' }\n      },\n      required: ['street', 'city']\n    }\n  },\n  required: ['id', 'name', 'email']\n};\n</code></pre>"},{"location":"core/type-system/#type-system-in-agentbridge","title":"Type System in AgentBridge","text":""},{"location":"core/type-system/#function-parameter-types","title":"Function Parameter Types","text":"<p>When registering a function, you define the parameter schema:</p> <pre><code>bridge.registerFunction({\n  name: 'createUser',\n  description: 'Create a new user',\n  parameters: {\n    type: 'object',\n    properties: {\n      name: { type: 'string' },\n      email: { type: 'string', format: 'email' },\n      age: { type: 'number', minimum: 18 }\n    },\n    required: ['name', 'email']\n  },\n  handler: async (params) =&gt; {\n    // Implementation\n    return { success: true };\n  }\n});\n</code></pre>"},{"location":"core/type-system/#return-value-types","title":"Return Value Types","text":"<p>You can also define the expected return value schema:</p> <pre><code>bridge.registerFunction({\n  name: 'getUserDetails',\n  description: 'Get user details by ID',\n  parameters: {\n    type: 'object',\n    properties: {\n      userId: { type: 'string' }\n    },\n    required: ['userId']\n  },\n  returnSchema: {\n    type: 'object',\n    properties: {\n      id: { type: 'string' },\n      name: { type: 'string' },\n      email: { type: 'string' },\n      age: { type: 'number' },\n      createdAt: { type: 'string', format: 'date-time' }\n    },\n    required: ['id', 'name', 'email']\n  },\n  handler: async (params) =&gt; {\n    // Implementation\n    return {\n      id: 'user-123',\n      name: 'John Doe',\n      email: 'john@example.com',\n      age: 30,\n      createdAt: '2023-01-15T12:00:00Z'\n    };\n  }\n});\n</code></pre>"},{"location":"core/type-system/#component-property-types","title":"Component Property Types","text":"<p>Component properties are also typed:</p> <pre><code>// React example\nuseAgentComponent('my-button', {\n  type: 'button',\n  properties: {\n    label: { type: 'string' },\n    disabled: { type: 'boolean' },\n    variant: { \n      type: 'string', \n      enum: ['primary', 'secondary', 'danger'] \n    }\n  },\n  actions: {\n    click: () =&gt; {\n      // Handle click\n      return true;\n    }\n  }\n});\n</code></pre>"},{"location":"core/type-system/#advanced-type-features","title":"Advanced Type Features","text":""},{"location":"core/type-system/#string-formats","title":"String Formats","text":"<p>String formats provide additional validation for string values:</p> <pre><code>// Email format\n{ type: 'string', format: 'email' }\n\n// Date-time format (ISO 8601)\n{ type: 'string', format: 'date-time' }\n\n// Date format\n{ type: 'string', format: 'date' }\n\n// Time format\n{ type: 'string', format: 'time' }\n\n// URI format\n{ type: 'string', format: 'uri' }\n\n// UUID format\n{ type: 'string', format: 'uuid' }\n</code></pre>"},{"location":"core/type-system/#number-constraints","title":"Number Constraints","text":"<p>Number values can have additional constraints:</p> <pre><code>// Minimum value\n{ type: 'number', minimum: 0 }\n\n// Maximum value\n{ type: 'number', maximum: 100 }\n\n// Exclusive minimum\n{ type: 'number', exclusiveMinimum: 0 }\n\n// Exclusive maximum\n{ type: 'number', exclusiveMaximum: 100 }\n\n// Multiple of\n{ type: 'number', multipleOf: 5 }\n</code></pre>"},{"location":"core/type-system/#string-constraints","title":"String Constraints","text":"<p>String values can have length constraints:</p> <pre><code>// Minimum length\n{ type: 'string', minLength: 3 }\n\n// Maximum length\n{ type: 'string', maxLength: 50 }\n\n// Pattern (regular expression)\n{ type: 'string', pattern: '^[a-zA-Z0-9]+$' }\n</code></pre>"},{"location":"core/type-system/#array-constraints","title":"Array Constraints","text":"<p>Array values can have additional constraints:</p> <pre><code>// Minimum items\n{ type: 'array', minItems: 1 }\n\n// Maximum items\n{ type: 'array', maxItems: 10 }\n\n// Unique items\n{ type: 'array', uniqueItems: true }\n\n// Array with specific item types\n{ \n  type: 'array', \n  items: { type: 'string' } \n}\n\n// Array with tuple typing\n{ \n  type: 'array',\n  items: [\n    { type: 'string' },\n    { type: 'number' },\n    { type: 'boolean' }\n  ],\n  minItems: 3,\n  maxItems: 3\n}\n</code></pre>"},{"location":"core/type-system/#object-constraints","title":"Object Constraints","text":"<p>Object values can have property constraints:</p> <pre><code>// Required properties\n{ \n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    email: { type: 'string' }\n  },\n  required: ['name', 'email']\n}\n\n// Property dependencies\n{\n  type: 'object',\n  properties: {\n    credit_card: { type: 'string' },\n    billing_address: { type: 'string' }\n  },\n  dependencies: {\n    credit_card: ['billing_address']\n  }\n}\n</code></pre>"},{"location":"core/type-system/#conditional-schemas","title":"Conditional Schemas","text":"<p>You can define schemas with conditional validation:</p> <pre><code>// If-then-else\n{\n  type: 'object',\n  properties: {\n    paymentMethod: { type: 'string' },\n    creditCardNumber: { type: 'string' },\n    bankAccountNumber: { type: 'string' }\n  },\n  required: ['paymentMethod'],\n  if: {\n    properties: { paymentMethod: { enum: ['credit_card'] } }\n  },\n  then: {\n    required: ['creditCardNumber']\n  },\n  else: {\n    required: ['bankAccountNumber']\n  }\n}\n</code></pre>"},{"location":"core/type-system/#error-handling","title":"Error Handling","text":"<p>When validation fails, AgentBridge provides detailed error information:</p> <pre><code>try {\n  const result = await bridge.callFunction('createUser', {\n    name: 'John', // Missing required email\n    age: 15 // Below minimum age\n  });\n} catch (error) {\n  // error.message contains validation error details\n  console.error(error.message);\n  // Error: Validation failed:\n  // - Missing required property 'email'\n  // - Property 'age' must be &gt;= 18\n}\n</code></pre>"},{"location":"core/type-system/#custom-error-messages","title":"Custom Error Messages","text":"<p>You can provide custom error messages for specific validations:</p> <pre><code>{\n  type: 'object',\n  properties: {\n    email: { \n      type: 'string', \n      format: 'email',\n      errorMessage: 'Please provide a valid email address'\n    },\n    age: { \n      type: 'number', \n      minimum: 18,\n      errorMessage: 'You must be at least 18 years old'\n    }\n  }\n}\n</code></pre>"},{"location":"core/type-system/#integration-with-typescript","title":"Integration with TypeScript","text":"<p>AgentBridge's type system integrates well with TypeScript, providing type safety at both compile time and runtime:</p> <pre><code>// Define type using TypeScript\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  age: number;\n}\n\n// Define schema using JSON Schema\nconst userSchema = {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    name: { type: 'string' },\n    email: { type: 'string', format: 'email' },\n    age: { type: 'number', minimum: 0 }\n  },\n  required: ['id', 'name', 'email']\n};\n\n// Use both together\nbridge.registerFunction&lt;User&gt;({\n  name: 'getUser',\n  description: 'Get user details',\n  parameters: {\n    type: 'object',\n    properties: {\n      userId: { type: 'string' }\n    },\n    required: ['userId']\n  },\n  returnSchema: userSchema,\n  handler: async (params): Promise&lt;User&gt; =&gt; {\n    // Implementation with TypeScript type checking\n    return {\n      id: 'user-123',\n      name: 'John Doe',\n      email: 'john@example.com',\n      age: 30\n    };\n  }\n});\n</code></pre>"},{"location":"core/type-system/#best-practices","title":"Best Practices","text":""},{"location":"core/type-system/#keep-schemas-simple","title":"Keep Schemas Simple","text":"<p>Focus on essential validations rather than overly complex schemas:</p> <pre><code>// Good - focused validation\n{\n  type: 'object',\n  properties: {\n    email: { type: 'string', format: 'email' },\n    password: { type: 'string', minLength: 8 }\n  },\n  required: ['email', 'password']\n}\n\n// Avoid - overly complex\n{\n  type: 'object',\n  properties: {\n    email: { \n      type: 'string', \n      format: 'email',\n      pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$'\n    },\n    password: { \n      type: 'string', \n      minLength: 8,\n      pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\\\d@$!%*?&amp;]{8,}$'\n    }\n  },\n  required: ['email', 'password']\n}\n</code></pre>"},{"location":"core/type-system/#reuse-common-schemas","title":"Reuse Common Schemas","text":"<p>Extract and reuse common schema definitions:</p> <pre><code>// Define common schemas\nconst emailSchema = { type: 'string', format: 'email' };\nconst addressSchema = {\n  type: 'object',\n  properties: {\n    street: { type: 'string' },\n    city: { type: 'string' },\n    zipCode: { type: 'string' }\n  },\n  required: ['street', 'city']\n};\n\n// Use in multiple function definitions\nbridge.registerFunction({\n  name: 'createUser',\n  parameters: {\n    type: 'object',\n    properties: {\n      name: { type: 'string' },\n      email: emailSchema,\n      address: addressSchema\n    },\n    required: ['name', 'email']\n  },\n  // ...\n});\n</code></pre>"},{"location":"core/type-system/#balance-validation-layers","title":"Balance Validation Layers","text":"<p>Consider where validation should happen:</p> <ol> <li>Schema validation - For structural validation</li> <li>Function handlers - For business logic validation</li> <li>UI components - For immediate user feedback</li> </ol>"},{"location":"core/type-system/#schema-reference","title":"Schema Reference","text":""},{"location":"core/type-system/#common-parameter-schemas","title":"Common Parameter Schemas","text":"<p>Here are some commonly used parameter schemas:</p> <pre><code>// Pagination parameters\nconst paginationSchema = {\n  type: 'object',\n  properties: {\n    page: { type: 'integer', minimum: 1, default: 1 },\n    limit: { type: 'integer', minimum: 1, maximum: 100, default: 20 }\n  }\n};\n\n// Search parameters\nconst searchSchema = {\n  type: 'object',\n  properties: {\n    query: { type: 'string' },\n    filters: { \n      type: 'object',\n      additionalProperties: true \n    },\n    sort: { \n      type: 'object',\n      properties: {\n        field: { type: 'string' },\n        direction: { type: 'string', enum: ['asc', 'desc'] }\n      }\n    }\n  },\n  required: ['query']\n};\n\n// ID parameter\nconst idSchema = {\n  type: 'object',\n  properties: {\n    id: { type: 'string' }\n  },\n  required: ['id']\n};\n</code></pre>"},{"location":"core/type-system/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about the Function Registry for registering typed functions</li> <li>Explore the Component Registry for typed UI components</li> <li>See the API Reference for detailed documentation</li> </ul>"},{"location":"core/websocket-config/","title":"WebSocket Configuration","text":"<p>This document outlines the configuration options for setting up the self-hosted WebSocket communication mode in AgentBridge.</p>"},{"location":"core/websocket-config/#overview","title":"Overview","text":"<p>The self-hosted communication mode uses WebSockets to establish direct communication between your application and a backend server, which then mediates communication with AI agents.</p> <pre><code>graph TD\n    A[AI Agent] &lt;--&gt;|API| B[Your Backend Server]\n    B &lt;--&gt;|WebSocket| C[Application]\n    C --&gt;|Uses| D[AgentBridge]\n    D --&gt;|Uses| E[WebSocket Provider]\n    E --&gt;|Connects to| B</code></pre>"},{"location":"core/websocket-config/#websocket-provider-configuration","title":"WebSocket Provider Configuration","text":"<p>The WebSocket provider connects your application to your backend server:</p> <pre><code>import { AgentBridge } from '@agentbridge/core';\nimport { WebSocketProvider } from '@agentbridge/communication-websocket';\n\nconst wsProvider = new WebSocketProvider({\n  // Required: WebSocket server URL\n  url: 'wss://your-server.com/agent-bridge',\n\n  // Optional: Authentication options\n  auth: {\n    type: 'token', // or 'basic'\n    token: 'your-auth-token',\n    // Or for basic auth:\n    // username: 'username',\n    // password: 'password'\n  },\n\n  // Optional: Custom headers\n  headers: {\n    'X-Custom-Header': 'value'\n  },\n\n  // Optional: Reconnection settings\n  reconnect: {\n    enabled: true,\n    maxAttempts: 10,\n    delay: 1000, // ms\n    maxDelay: 30000, // ms\n    backoff: 1.5 // exponential backoff factor\n  },\n\n  // Optional: Ping/pong configuration\n  pingInterval: 30000, // ms\n\n  // Optional: Protocol version\n  protocolVersion: '1.0',\n\n  // Optional: Debug mode\n  debug: false\n});\n\nconst bridge = new AgentBridge({\n  applicationId: 'my-app-123',\n  environmentId: 'development'\n});\n\nbridge.initialize(wsProvider);\n</code></pre>"},{"location":"core/websocket-config/#connection-authentication","title":"Connection Authentication","text":""},{"location":"core/websocket-config/#token-authentication","title":"Token Authentication","text":"<pre><code>const wsProvider = new WebSocketProvider({\n  url: 'wss://your-server.com/agent-bridge',\n  auth: {\n    type: 'token',\n    token: 'your-auth-token'\n  }\n});\n</code></pre>"},{"location":"core/websocket-config/#jwt-authentication","title":"JWT Authentication","text":"<pre><code>// Obtain JWT from your authentication service\nconst jwt = await authService.getToken();\n\nconst wsProvider = new WebSocketProvider({\n  url: 'wss://your-server.com/agent-bridge',\n  headers: {\n    'Authorization': `Bearer ${jwt}`\n  }\n});\n</code></pre>"},{"location":"core/websocket-config/#basic-authentication","title":"Basic Authentication","text":"<pre><code>const wsProvider = new WebSocketProvider({\n  url: 'wss://your-server.com/agent-bridge',\n  auth: {\n    type: 'basic',\n    username: 'username',\n    password: 'password'\n  }\n});\n</code></pre>"},{"location":"core/websocket-config/#connection-events","title":"Connection Events","text":"<p>The WebSocket provider emits several connection-related events:</p> <pre><code>wsProvider.on('connecting', () =&gt; {\n  console.log('Connecting to WebSocket server...');\n});\n\nwsProvider.on('connected', () =&gt; {\n  console.log('Connected to WebSocket server');\n});\n\nwsProvider.on('disconnected', (reason) =&gt; {\n  console.log(`Disconnected from WebSocket server: ${reason}`);\n});\n\nwsProvider.on('reconnecting', (attempt) =&gt; {\n  console.log(`Reconnection attempt ${attempt}...`);\n});\n\nwsProvider.on('error', (error) =&gt; {\n  console.error('WebSocket error:', error);\n});\n</code></pre>"},{"location":"core/websocket-config/#message-protocol","title":"Message Protocol","text":"<p>AgentBridge uses a standardized message protocol over WebSockets. See the Communication Protocol for the message format details.</p>"},{"location":"core/websocket-config/#backend-server-requirements","title":"Backend Server Requirements","text":"<p>Your backend server must implement the following:</p>"},{"location":"core/websocket-config/#1-websocket-connection-handling","title":"1. WebSocket Connection Handling","text":"<pre><code>// Example using Node.js and ws library\nconst WebSocket = require('ws');\nconst server = new WebSocket.Server({ port: 8080 });\n\nserver.on('connection', (ws, req) =&gt; {\n  // Handle new connections\n  console.log('Client connected');\n\n  // Authentication (example)\n  const token = req.headers['authorization']?.split(' ')[1];\n  if (!validateToken(token)) {\n    ws.close(4001, 'Unauthorized');\n    return;\n  }\n\n  // Handle messages\n  ws.on('message', (message) =&gt; {\n    const parsedMessage = JSON.parse(message);\n    handleMessage(parsedMessage, ws);\n  });\n\n  // Handle disconnection\n  ws.on('close', () =&gt; {\n    console.log('Client disconnected');\n  });\n});\n</code></pre>"},{"location":"core/websocket-config/#2-message-routing","title":"2. Message Routing","text":"<pre><code>function handleMessage(message, ws) {\n  switch (message.type) {\n    case 'capability':\n      // Store capabilities for this client\n      storeCapabilities(message, ws);\n      break;\n\n    case 'command':\n      // Route command to appropriate handler\n      handleCommand(message, ws);\n      break;\n\n    case 'response':\n      // Route response to appropriate agent\n      routeResponseToAgent(message);\n      break;\n\n    case 'event':\n      // Handle events\n      handleEvent(message);\n      break;\n\n    default:\n      console.warn(`Unknown message type: ${message.type}`);\n  }\n}\n</code></pre>"},{"location":"core/websocket-config/#3-agent-api-integration","title":"3. Agent API Integration","text":"<p>Your backend server should also provide an API for AI agents to:</p> <ol> <li>Discover available components and functions</li> <li>Send commands to the application</li> <li>Receive responses from the application</li> </ol>"},{"location":"core/websocket-config/#security-considerations","title":"Security Considerations","text":""},{"location":"core/websocket-config/#transport-security","title":"Transport Security","text":"<p>Always use WSS (WebSocket Secure) instead of WS:</p> <pre><code>const wsProvider = new WebSocketProvider({\n  url: 'wss://your-server.com/agent-bridge', // Use wss:// not ws://\n  // ...\n});\n</code></pre>"},{"location":"core/websocket-config/#authentication","title":"Authentication","text":"<p>Implement robust authentication:</p> <pre><code>// Server-side authentication check\nfunction validateToken(token) {\n  try {\n    // Verify JWT token\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    return !!decoded;\n  } catch (error) {\n    console.error('Token validation error:', error);\n    return false;\n  }\n}\n</code></pre>"},{"location":"core/websocket-config/#authorization","title":"Authorization","text":"<p>Implement per-function and per-component authorization:</p> <pre><code>// Server-side authorization check\nfunction authorizeCommand(command, user) {\n  // Check if user has permission to execute this command\n  const { target, action } = command;\n\n  // Example: Only admin users can access admin functions\n  if (target.startsWith('admin:') &amp;&amp; user.role !== 'admin') {\n    return false;\n  }\n\n  return true;\n}\n</code></pre> <p>For more comprehensive security guidance, see the Security Best Practices documentation.</p>"},{"location":"core/websocket-config/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"core/websocket-config/#connection-pooling","title":"Connection Pooling","text":"<p>For applications with multiple instances:</p> <pre><code>// Server-side connection pooling\nconst connectionPool = new Map();\n\nserver.on('connection', (ws, req) =&gt; {\n  const clientId = extractClientId(req);\n\n  // Store connection in pool\n  connectionPool.set(clientId, ws);\n\n  ws.on('close', () =&gt; {\n    // Remove from pool on disconnect\n    connectionPool.delete(clientId);\n  });\n});\n\n// Function to send message to specific client\nfunction sendToClient(clientId, message) {\n  const client = connectionPool.get(clientId);\n  if (client &amp;&amp; client.readyState === WebSocket.OPEN) {\n    client.send(JSON.stringify(message));\n    return true;\n  }\n  return false;\n}\n</code></pre>"},{"location":"core/websocket-config/#custom-middleware","title":"Custom Middleware","text":"<p>Adding middleware for message processing:</p> <pre><code>// Client-side middleware\nwsProvider.use((message, next) =&gt; {\n  // Add timestamp to outgoing messages\n  message.timestamp = Date.now();\n  next();\n});\n\n// Server-side middleware\nfunction messageMiddleware(message, next) {\n  // Log all messages\n  logger.debug('Received message:', message.id, message.type);\n\n  // Continue processing\n  next();\n}\n</code></pre>"},{"location":"core/websocket-config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"core/websocket-config/#connection-issues","title":"Connection Issues","text":"<p>If you're experiencing WebSocket connection issues:</p> <ol> <li>Check URL: Ensure the WebSocket URL is correct and accessible</li> <li>Verify SSL/TLS: If using WSS, verify certificates are valid</li> <li>Check Proxies: Some proxies may interfere with WebSocket connections</li> <li>Firewall Settings: Ensure your firewall allows WebSocket connections</li> <li>Heartbeat Failures: Check pingInterval configuration</li> </ol>"},{"location":"core/websocket-config/#message-delivery-problems","title":"Message Delivery Problems","text":"<p>If messages aren't being delivered:</p> <ol> <li>Check Connection State: Ensure WebSocket is connected before sending</li> <li>Message Format: Verify messages match the expected format</li> <li>Size Limits: Some WebSocket servers have message size limits</li> <li>Rate Limiting: Check for rate limiting on your server</li> </ol>"},{"location":"core/websocket-config/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the Communication Protocol</li> <li>Explore Pub/Sub Configuration for backendless mode</li> <li>See Security Best Practices for securing your implementation </li> </ul>"},{"location":"development/architecture/","title":"AgentBridge Architecture","text":"<p>This document provides an overview of the AgentBridge framework architecture, explaining how the different components work together to enable AI agents to interact with applications.</p>"},{"location":"development/architecture/#overview","title":"Overview","text":"<p>AgentBridge is designed with a modular architecture that separates the core functionality from the platform-specific implementations. This allows for consistent behavior across different platforms and frameworks while enabling platform-specific optimizations.</p> <pre><code>graph TD\n    AgentBridge[AgentBridge Core] --&gt; Registry\n    AgentBridge --&gt; TypeSystem[Type System]\n    AgentBridge --&gt; AuthSystem[Authentication]\n\n    AgentBridge --&gt; FrameworkAdapter[Framework Adapter Interface]\n\n    FrameworkAdapter --&gt; ReactAdapter[React Adapter]\n    FrameworkAdapter --&gt; AngularAdapter[Angular Adapter]\n    FrameworkAdapter --&gt; ReactNativeAdapter[React Native Adapter]\n    FrameworkAdapter --&gt; FlutterAdapter[Flutter Adapter]\n\n    ReactAdapter --&gt; ReactComponents[React Components]\n    AngularAdapter --&gt; AngularComponents[Angular Components]\n    ReactNativeAdapter --&gt; RNComponents[React Native Components]\n    FlutterAdapter --&gt; FlutterComponents[Flutter Components]\n\n    AIAgent[AI Agent] --&gt; |Function Call| AgentBridge\n    AIAgent --&gt; |Component Interaction| FrameworkAdapter\n\n    Registry --&gt; FunctionDef[Function Definitions]\n\n    subgraph \"Application Layer\"\n        ReactComponents\n        AngularComponents\n        RNComponents\n        FlutterComponents\n    end\n\n    subgraph \"Adapter Layer\"\n        ReactAdapter\n        AngularAdapter\n        ReactNativeAdapter\n        FlutterAdapter\n    end\n\n    subgraph \"Core Layer\"\n        AgentBridge\n        Registry\n        TypeSystem\n        AuthSystem\n    end</code></pre>"},{"location":"development/architecture/#core-components","title":"Core Components","text":""},{"location":"development/architecture/#agentbridge","title":"AgentBridge","text":"<p>The <code>AgentBridge</code> class is the central component of the framework. It provides the following functionality:</p> <ul> <li>Function registration and execution</li> <li>Authentication and authorization</li> <li>Context management</li> <li>Type validation</li> <li>Error handling</li> </ul> <p>The core functionality is platform-agnostic and is used by all platform-specific adapters.</p>"},{"location":"development/architecture/#frameworkadapter","title":"FrameworkAdapter","text":"<p>The <code>FrameworkAdapter</code> interface defines the contract that all platform-specific adapters must implement. It includes methods for:</p> <ul> <li>Initializing the adapter</li> <li>Registering UI components</li> <li>Handling function calls</li> <li>Converting between different frameworks</li> </ul>"},{"location":"development/architecture/#registry","title":"Registry","text":"<p>The <code>Registry</code> class manages the registration and lookup of functions. It provides:</p> <ul> <li>Function registration</li> <li>Function lookup</li> <li>Authentication checks</li> <li>Rate limiting</li> </ul>"},{"location":"development/architecture/#type-system","title":"Type System","text":"<p>The type system provides validation for function parameters and return values. It ensures that functions are called with the correct parameters and that they return valid results.</p>"},{"location":"development/architecture/#adapter-architecture","title":"Adapter Architecture","text":"<p>Each supported platform has its own adapter that implements the <code>FrameworkAdapter</code> interface. The adapters provide platform-specific functionality while maintaining a consistent API.</p>"},{"location":"development/architecture/#react-adapter","title":"React Adapter","text":"<p>The React adapter (<code>ReactAdapter</code>) integrates AgentBridge with React applications. It provides:</p> <ul> <li>React-specific hooks and components</li> <li>Integration with React's component lifecycle</li> <li>Context-based state management</li> </ul>"},{"location":"development/architecture/#angular-adapter","title":"Angular Adapter","text":"<p>The Angular adapter (<code>AngularAdapter</code>) integrates AgentBridge with Angular applications. It provides:</p> <ul> <li>Angular services and components</li> <li>Integration with Angular's dependency injection</li> <li>Observable-based state management</li> </ul>"},{"location":"development/architecture/#react-native-adapter","title":"React Native Adapter","text":"<p>The React Native adapter extends the React adapter with mobile-specific functionality. It adds:</p> <ul> <li>Mobile device API access</li> <li>React Native component integration</li> <li>Mobile-specific context information</li> </ul>"},{"location":"development/architecture/#flutter-adapter","title":"Flutter Adapter","text":"<p>The Flutter adapter (<code>FlutterAdapter</code>) integrates AgentBridge with Flutter applications. It provides:</p> <ul> <li>Flutter widgets and services</li> <li>Integration with Flutter's widget lifecycle</li> <li>Mobile-specific functions</li> </ul>"},{"location":"development/architecture/#component-integration","title":"Component Integration","text":"<p>AgentBridge allows AI agents to interact with UI components through a component registry system.</p> <pre><code>sequenceDiagram\n    participant App as Application\n    participant Component as UI Component\n    participant Adapter as Framework Adapter\n    participant Bridge as AgentBridge\n    participant Agent as AI Agent\n\n    App-&gt;&gt;Component: Render Component\n    Component-&gt;&gt;Adapter: Register with ID and Type\n    Adapter-&gt;&gt;Bridge: Store Component Info\n\n    Agent-&gt;&gt;Bridge: Get Available Components\n    Bridge-&gt;&gt;Adapter: Retrieve Components\n    Adapter-&gt;&gt;Bridge: Return Component List\n    Bridge-&gt;&gt;Agent: Components with IDs and Types\n\n    Agent-&gt;&gt;Bridge: Call Function to Interact with Component\n    Bridge-&gt;&gt;Adapter: Handle Component Interaction\n    Adapter-&gt;&gt;Component: Update State/Trigger Event\n    Component-&gt;&gt;App: Re-render with New State</code></pre>"},{"location":"development/architecture/#component-registry","title":"Component Registry","text":"<p>The component registry tracks all registered UI components and their current state. It allows AI agents to:</p> <ul> <li>Discover available components</li> <li>Read component properties and state</li> <li>Update component state</li> <li>Trigger component events</li> </ul>"},{"location":"development/architecture/#component-registration-process","title":"Component Registration Process","text":"<ol> <li>A UI component (button, input, etc.) is rendered in the application</li> <li>The component registers itself with AgentBridge through the framework adapter</li> <li>The component provides its ID, type, and initial properties</li> <li>AgentBridge adds the component to the registry</li> </ol>"},{"location":"development/architecture/#component-interaction-process","title":"Component Interaction Process","text":"<ol> <li>An AI agent discovers available components through the <code>getComponents</code> function</li> <li>The agent selects a component to interact with based on its ID or type</li> <li>The agent calls a function to update the component's state or trigger an event</li> <li>The framework adapter handles the function call and updates the component</li> <li>The component re-renders with the updated state</li> </ol>"},{"location":"development/architecture/#function-calling-process","title":"Function Calling Process","text":"<p>When an AI agent calls a function through AgentBridge, the following process occurs:</p> <ol> <li>The agent sends a function call request with the function name, parameters, and context</li> <li>AgentBridge validates the request (authentication, parameters, rate limits, etc.)</li> <li>AgentBridge looks up the function in the registry</li> <li>The function is executed with the provided parameters and context</li> <li>The result is returned to the agent</li> </ol>"},{"location":"development/architecture/#context-management","title":"Context Management","text":"<p>AgentBridge provides context information to functions when they are called. This context includes:</p> <ul> <li>Agent information (ID, name, capabilities)</li> <li>User information (if authenticated)</li> <li>Application information (ID, environment)</li> <li>Request information (IP, timestamp, etc.)</li> </ul>"},{"location":"development/architecture/#security-model","title":"Security Model","text":"<p>AgentBridge includes several security features:</p>"},{"location":"development/architecture/#authentication","title":"Authentication","text":"<p>Functions can require authentication to be called. AgentBridge supports different authentication levels:</p> <ul> <li><code>public</code>: No authentication required</li> <li><code>user</code>: User authentication required</li> <li><code>admin</code>: Administrative privileges required</li> </ul>"},{"location":"development/architecture/#rate-limiting","title":"Rate Limiting","text":"<p>Functions can be rate-limited to prevent abuse. Rate limits can be set per function and include:</p> <ul> <li>Maximum number of requests</li> <li>Time window for rate limiting</li> <li>Scope of rate limiting (per user, per IP, global)</li> </ul>"},{"location":"development/architecture/#permissions","title":"Permissions","text":"<p>Functions can check permissions before executing. Permissions can be based on:</p> <ul> <li>User roles</li> <li>Custom permission logic</li> <li>Application-specific rules</li> </ul>"},{"location":"development/architecture/#error-handling","title":"Error Handling","text":"<p>AgentBridge provides structured error handling for function calls:</p> <ul> <li>Each function call returns a result object with success/error information</li> <li>Errors include a code, message, and optional details</li> <li>Execution metadata (duration, timestamps) is included in the result</li> </ul>"},{"location":"development/architecture/#cross-framework-interoperability","title":"Cross-Framework Interoperability","text":"<p>AgentBridge allows components from different frameworks to interact with each other through a common interface. This is achieved through:</p> <ul> <li>Framework adapters that implement a common interface</li> <li>A serialization format for component state</li> <li>Conversion functions for component properties</li> </ul>"},{"location":"development/architecture/#extension-points","title":"Extension Points","text":"<p>AgentBridge can be extended in several ways:</p> <ul> <li>Custom adapters for new frameworks</li> <li>Custom component types</li> <li>Custom function implementations</li> <li>Custom authentication providers</li> <li>Custom type validators</li> </ul>"},{"location":"development/architecture/#package-structure","title":"Package Structure","text":"<p>The AgentBridge framework is organized into the following packages:</p> <ul> <li><code>@agentbridge/core</code>: Core functionality, type system, registry</li> <li><code>@agentbridge/react</code>: React integration</li> <li><code>@agentbridge/angular</code>: Angular integration</li> <li><code>@agentbridge/react-native</code>: React Native integration</li> <li><code>agentbridge</code> (Flutter): Flutter integration</li> </ul>"},{"location":"development/architecture/#dependency-graph","title":"Dependency Graph","text":"<pre><code>graph LR\n    Core[\"@agentbridge/core\"]\n    React[\"@agentbridge/react\"]\n    Angular[\"@agentbridge/angular\"]\n    ReactNative[\"@agentbridge/react-native\"]\n    Flutter[\"agentbridge (Flutter)\"]\n\n    Core --&gt; React\n    Core --&gt; Angular\n    React --&gt; ReactNative\n\n    Flutter -.-&gt; |\"conceptual dependency\"| Core\n\n    classDef js fill:#f9f,stroke:#333,stroke-width:1px;\n    classDef dart fill:#9cf,stroke:#333,stroke-width:1px;\n\n    class Core,React,Angular,ReactNative js;\n    class Flutter dart;</code></pre>"},{"location":"development/architecture/#performance-considerations","title":"Performance Considerations","text":"<p>AgentBridge is designed with performance in mind:</p> <ul> <li>Component state updates are optimized to minimize re-renders</li> <li>Function calls are validated early to prevent unnecessary execution</li> <li>The registry uses efficient lookup mechanisms</li> <li>Adapters use platform-specific optimizations</li> </ul>"},{"location":"development/architecture/#testing-strategy","title":"Testing Strategy","text":"<p>AgentBridge can be tested at different levels:</p> <ul> <li>Unit tests for core functionality</li> <li>Component tests for UI components</li> <li>Integration tests for function calling</li> <li>End-to-end tests for AI agent interactions</li> </ul>"},{"location":"development/architecture/#deployment-architecture","title":"Deployment Architecture","text":"<p>The AgentBridge packages can be deployed in several configurations, depending on the application's requirements.</p> <pre><code>graph TD\n    subgraph \"Package Registry\"\n        NPM[\"npm Registry&lt;br&gt;(@agentbridge/*)\"]\n        PubDev[\"pub.dev&lt;br&gt;(agentbridge)\"]\n    end\n\n    subgraph \"Web Application\"\n        WebApp[\"Web App\"]\n        WebCode[\"Application Code\"]\n        CoreLib[\"@agentbridge/core\"]\n        UILib[\"@agentbridge/react or&lt;br&gt;@agentbridge/angular\"]\n\n        WebCode --&gt; CoreLib\n        WebCode --&gt; UILib\n        CoreLib --&gt; UILib\n    end\n\n    subgraph \"Mobile Application\"\n        MobileApp[\"Mobile App\"]\n        MobileCode[\"Application Code\"]\n        MobileCore[\"@agentbridge/core or&lt;br&gt;agentbridge (Flutter)\"]\n        MobileUI[\"@agentbridge/react-native or&lt;br&gt;Flutter widgets\"]\n\n        MobileCode --&gt; MobileCore\n        MobileCode --&gt; MobileUI\n        MobileCore --&gt; MobileUI\n    end\n\n    subgraph \"AI Platform\"\n        AIModel[\"AI Model\"]\n        APIClient[\"API Client\"]\n\n        AIModel --&gt; APIClient\n    end\n\n    NPM --&gt; WebApp\n    NPM --&gt; MobileApp\n    PubDev --&gt; MobileApp\n\n    WebApp --&gt; |\"Expose APIs\"| AIModel\n    MobileApp --&gt; |\"Expose APIs\"| AIModel</code></pre>"},{"location":"development/architecture/#model-context-protocols-mcps-integration","title":"Model Context Protocols (MCPs) Integration","text":"<p>AgentBridge can be extended to support Model Context Protocols, enabling standardized communication between AI models and applications. The MCP support is built as an optional feature that can be enabled as needed without affecting existing functionality.</p> <pre><code>graph TD\n    subgraph \"AgentBridge Core\"\n        Bridge[\"AgentBridge Core\"]\n        Registry[\"Function Registry\"]\n        MCPManager[\"MCP Manager&lt;br&gt;&lt;i&gt;(Optional)&lt;/i&gt;\"]\n        MCPAdapters[\"MCP Adapters&lt;br&gt;&lt;i&gt;(Optional)&lt;/i&gt;\"]\n        DesignInfoCollector[\"Design Info Collector&lt;br&gt;&lt;i&gt;(Optional)&lt;/i&gt;\"]\n    end\n\n    subgraph \"Applications\"\n        WebApp[\"Web Application\"]\n        MobileApp[\"Mobile Application\"]\n    end\n\n    subgraph \"AI Platforms\"\n        OpenAI[\"OpenAI\"]\n        Anthropic[\"Anthropic\"]\n        Gemini[\"Google Gemini\"]\n    end\n\n    WebApp &lt;--&gt; Bridge\n    MobileApp &lt;--&gt; Bridge\n\n    Bridge --&gt; |Optional| MCPManager\n    MCPManager --&gt; MCPAdapters\n\n    MCPAdapters --&gt; |\"OpenAI Adapter\"| OpenAI\n    MCPAdapters --&gt; |\"Anthropic Adapter\"| Anthropic\n    MCPAdapters --&gt; |\"Gemini Adapter\"| Gemini\n\n    Registry --&gt; MCPAdapters\n    DesignInfoCollector --&gt; MCPManager\n\n    classDef core fill:#f9f,stroke:#333,stroke-width:1px;\n    classDef app fill:#9cf,stroke:#333,stroke-width:1px;\n    classDef ai fill:#fd9,stroke:#333,stroke-width:1px;\n    classDef optional fill:#f9f,stroke:#333,stroke-width:1px,stroke-dasharray: 5 5;\n\n    class Bridge,Registry core;\n    class MCPManager,MCPAdapters,DesignInfoCollector optional;\n    class WebApp,MobileApp app;\n    class OpenAI,Anthropic,Gemini ai;</code></pre>"},{"location":"development/architecture/#optional-mcp-architecture","title":"Optional MCP Architecture","text":"<p>The MCP integration is designed to be completely optional, allowing applications to use AgentBridge with or without MCP support. The components are lazy-loaded and only initialized when explicitly requested. This ensures:</p> <ol> <li>No Performance Impact: Applications that don't use MCPs won't experience any overhead</li> <li>Backward Compatibility: Existing code continues to work without modification</li> <li>Progressive Adoption: MCP support can be added incrementally to existing applications</li> </ol> <pre><code>sequenceDiagram\n    participant App as Application\n    participant Bridge as AgentBridge\n    participant MCP as MCP Manager\n    participant Adapter as MCP Adapter\n    participant AI as AI Model\n\n    Note over Bridge: MCP support not initialized\n\n    App-&gt;&gt;Bridge: registerMCPAdapter('openai', adapter)\n    Bridge-&gt;&gt;Bridge: initializeMCP() (lazy init)\n    Bridge-&gt;&gt;MCP: registerAdapter('openai', adapter)\n\n    App-&gt;&gt;Bridge: getMCPSchema('openai')\n    Bridge-&gt;&gt;MCP: getMCPSchema('openai')\n    MCP-&gt;&gt;Adapter: getFunctionSchema()\n    Adapter-&gt;&gt;MCP: Return schema\n    MCP-&gt;&gt;Bridge: Return schema\n    Bridge-&gt;&gt;App: Return schema\n\n    App-&gt;&gt;AI: Send schema\n    AI-&gt;&gt;App: Function call\n    App-&gt;&gt;Bridge: handleMCPFunctionCall('openai', call)\n    Bridge-&gt;&gt;MCP: handleMCPFunctionCall('openai', call)\n    MCP-&gt;&gt;Adapter: convertFromMCPCall(call)\n    Adapter-&gt;&gt;MCP: Return converted call\n    MCP-&gt;&gt;Bridge: Execute function\n    Bridge-&gt;&gt;MCP: Return result\n    MCP-&gt;&gt;Adapter: mapResponse(result)\n    Adapter-&gt;&gt;MCP: Return formatted response\n    MCP-&gt;&gt;Bridge: Return response\n    Bridge-&gt;&gt;App: Return response\n    App-&gt;&gt;AI: Send response</code></pre>"},{"location":"development/architecture/#mcp-adapter-design","title":"MCP Adapter Design","text":"<p>MCP adapters follow a common interface but implement protocol-specific logic. The class diagram below shows the relationship between different adapter implementations:</p> <pre><code>classDiagram\n    class MCPAdapter {\n        &lt;&lt;interface&gt;&gt;\n        +convertToMCPSchema(functionDef) any\n        +convertFromMCPCall(mcpCall) any\n        +mapContext(context) any\n        +mapResponse(response) any\n        +getFunctionSchema() any\n    }\n\n    class OpenAIMCPAdapter {\n        -registry: Registry\n        +convertToMCPSchema(functionDef) OpenAISchema\n        +convertFromMCPCall(mcpCall) FunctionCallRequest\n        +mapContext(context) any\n        +mapResponse(response) any\n        +getFunctionSchema() OpenAIToolsSchema\n        -convertTypeToOpenAISchema(type) OpenAIParameterSchema\n    }\n\n    class AnthropicMCPAdapter {\n        -registry: Registry\n        +convertToMCPSchema(functionDef) AnthropicToolSchema\n        +convertFromMCPCall(toolCall) FunctionCallRequest\n        +mapContext(context) any\n        +mapResponse(response) any\n        +getFunctionSchema() AnthropicToolsSchema\n        -convertTypeToAnthropicSchema(type) AnthropicParameterSchema\n    }\n\n    class GeminiMCPAdapter {\n        -registry: Registry\n        +convertToMCPSchema(functionDef) GeminiFunctionSchema\n        +convertFromMCPCall(functionCall) FunctionCallRequest\n        +mapContext(context) any\n        +mapResponse(response) any\n        +getFunctionSchema() GeminiFunctionsSchema\n        -convertTypeToGeminiSchema(type) GeminiParameterSchema\n    }\n\n    MCPAdapter &lt;|-- OpenAIMCPAdapter\n    MCPAdapter &lt;|-- AnthropicMCPAdapter\n    MCPAdapter &lt;|-- GeminiMCPAdapter\n\n    class MCPManager {\n        -adapters: Map&lt;string, MCPAdapter&gt;\n        +registerAdapter(name, adapter) void\n        +getAdapter(name) MCPAdapter\n        +getMCPSchema(protocol) any\n        +handleMCPFunctionCall(protocol, call, registry) Promise~any~\n        +getSupportedProtocols() string[]\n    }\n\n    MCPManager --&gt; \"*\" MCPAdapter : manages\n    AgentBridge --&gt; \"0..1\" MCPManager : uses</code></pre>"},{"location":"development/architecture/#design-information-collection","title":"Design Information Collection","text":"<p>The design information collection system captures the structure and appearance of UI components, enabling AI agents to understand and interact with application interfaces more effectively.</p> <pre><code>classDiagram\n    class DesignInfoCollector {\n        &lt;&lt;abstract&gt;&gt;\n        +captureComponentTree(rootElement) ComponentTree\n        #generateUniqueId() string\n        #createEmptyTree() ComponentTree\n        #createComponentInfo(id, type, props, state, designInfo) ComponentInfo\n        #createDefaultDesignInfo() ComponentDesignInfo\n        #addComponentToTree(tree, component, parentId) void\n    }\n\n    class ReactDesignInfoCollector {\n        +captureComponentTree(rootElement) ComponentTree\n        -traverseReactComponent(element, tree, parentId) void\n        -processChildren(children, tree, parentId) void\n        -getComponentState(element) object\n        -extractDesignInfo(element) ComponentDesignInfo\n        -extractLayoutInfo(element) LayoutInfo\n        -extractStylingInfo(element) StylingInfo\n        -extractScreenInfo(element) ScreenInfo\n    }\n\n    class FlutterDesignInfoCollector {\n        +captureComponentTree(context) ComponentTree\n        -_processElement(context, tree, parentId) void\n        -_processChildren(context, tree, parentId) void\n        -_extractProps(widget) Map\n        -_extractState(context) Map\n        -_extractDesignInfo(context) ComponentDesignInfo\n        -_extractLayoutInfo(context) LayoutInfo\n        -_extractStylingInfo(context) StylingInfo\n        -_extractScreenInfo(context) ScreenInfo\n    }\n\n    DesignInfoCollector &lt;|-- ReactDesignInfoCollector\n    DesignInfoCollector &lt;|-- FlutterDesignInfoCollector</code></pre>"},{"location":"development/architecture/#enabling-mcp-support","title":"Enabling MCP Support","text":"<p>The MCP support is enabled on-demand through explicit integration points in the AgentBridge API:</p> <pre><code>graph TD\n    Start[Application Start] --&gt; CheckEnv{Use MCPs?}\n    CheckEnv --&gt;|No| StandardInit[Regular Initialization]\n    CheckEnv --&gt;|Yes| MCPInit[Initialize MCP Support]\n\n    MCPInit --&gt; RegisterAdapter[Register MCP Adapter]\n    RegisterAdapter --&gt; ConfigureAdapter[Configure MCP Schema]\n\n    StandardInit --&gt; AppReady[Application Ready]\n    ConfigureAdapter --&gt; AppReady\n\n    AppReady --&gt; FunctionCall{Need Function Call?}\n    FunctionCall --&gt;|Regular| StandardCall[Regular Function Call]\n    FunctionCall --&gt;|MCP| MCPCall[MCP Function Call]\n\n    StandardCall --&gt; ProcessResult[Process Result]\n    MCPCall --&gt; MCPResult[Process MCP Result]\n    MCPResult --&gt; ProcessResult\n\n    classDef optional fill:#f9f,stroke:#333,stroke-width:1px,stroke-dasharray: 5 5;\n    class MCPInit,RegisterAdapter,ConfigureAdapter,MCPCall,MCPResult optional;</code></pre>"},{"location":"development/architecture/#type-translation","title":"Type Translation","text":"<p>A key aspect of MCP integration is the translation between AgentBridge types and MCP-specific schemas:</p> <pre><code>graph TD\n    subgraph \"AgentBridge Type System\"\n        ABString[String Type]\n        ABNumber[Number Type]\n        ABBoolean[Boolean Type]\n        ABObject[Object Type]\n        ABArray[Array Type]\n    end\n\n    subgraph \"MCP Type Systems\"\n        subgraph \"OpenAI\"\n            OAIString[\"string\"]\n            OAINumber[\"number\"]\n            OAIBoolean[\"boolean\"]\n            OAIObject[\"object\"]\n            OAIArray[\"array\"]\n        end\n\n        subgraph \"Anthropic\"\n            AntString[\"string\"]\n            AntNumber[\"number\"]\n            AntBoolean[\"boolean\"]\n            AntObject[\"object\"]\n            AntArray[\"array\"]\n        end\n    end\n\n    ABString --&gt; OAIString\n    ABString --&gt; AntString\n\n    ABNumber --&gt; OAINumber\n    ABNumber --&gt; AntNumber\n\n    ABBoolean --&gt; OAIBoolean\n    ABBoolean --&gt; AntBoolean\n\n    ABObject --&gt; OAIObject\n    ABObject --&gt; AntObject\n\n    ABArray --&gt; OAIArray\n    ABArray --&gt; AntArray\n\n    classDef ab fill:#f9f,stroke:#333,stroke-width:1px;\n    classDef oai fill:#9cf,stroke:#333,stroke-width:1px;\n    classDef ant fill:#fd9,stroke:#333,stroke-width:1px;\n\n    class ABString,ABNumber,ABBoolean,ABObject,ABArray ab;\n    class OAIString,OAINumber,OAIBoolean,OAIObject,OAIArray oai;\n    class AntString,AntNumber,AntBoolean,AntObject,AntArray ant;</code></pre>"},{"location":"development/architecture/#package-structure-with-mcp-support","title":"Package Structure with MCP Support","text":"<p>The MCP support is integrated into the existing package structure without disrupting it:</p> <pre><code>graph LR\n    Core[\"@agentbridge/core\"]\n    CoreMCP[\"@agentbridge/core/mcp\"]\n\n    React[\"@agentbridge/react\"]\n    ReactComp[\"@agentbridge/react/components\"]\n    ReactDesign[\"@agentbridge/react/design\"]\n\n    Angular[\"@agentbridge/angular\"]\n    AngularComp[\"@agentbridge/angular/components\"]\n    AngularDesign[\"@agentbridge/angular/design\"]\n\n    RN[\"@agentbridge/react-native\"]\n    RNComp[\"@agentbridge/react-native/components\"]\n    RNDesign[\"@agentbridge/react-native/design\"]\n\n    Flutter[\"agentbridge\"]\n    FlutterComp[\"agentbridge/components\"]\n    FlutterDesign[\"agentbridge/design\"]\n\n    MCPOpenAI[\"@agentbridge/mcp-openai&lt;br&gt;&lt;i&gt;(Optional)&lt;/i&gt;\"]\n    MCPAnthropic[\"@agentbridge/mcp-anthropic&lt;br&gt;&lt;i&gt;(Optional)&lt;/i&gt;\"]\n    MCPGemini[\"@agentbridge/mcp-gemini&lt;br&gt;&lt;i&gt;(Optional)&lt;/i&gt;\"]\n\n    Core --&gt; CoreMCP\n    Core --&gt; React\n    Core --&gt; Angular\n    Core --&gt; RN\n\n    React --&gt; ReactComp\n    React --&gt; ReactDesign\n\n    Angular --&gt; AngularComp\n    Angular --&gt; AngularDesign\n\n    RN --&gt; RNComp\n    RN --&gt; RNDesign\n\n    Flutter --&gt; FlutterComp\n    Flutter --&gt; FlutterDesign\n\n    CoreMCP --&gt; MCPOpenAI\n    CoreMCP --&gt; MCPAnthropic\n    CoreMCP --&gt; MCPGemini\n\n    classDef core fill:#f9f,stroke:#333,stroke-width:1px;\n    classDef adapter fill:#9cf,stroke:#333,stroke-width:1px;\n    classDef component fill:#cfc,stroke:#333,stroke-width:1px;\n    classDef mcp fill:#f9f,stroke:#333,stroke-width:1px,stroke-dasharray: 5 5;\n\n    class Core,CoreMCP core;\n    class React,Angular,RN,Flutter adapter;\n    class ReactComp,AngularComp,RNComp,FlutterComp,ReactDesign,AngularDesign,RNDesign,FlutterDesign component;\n    class MCPOpenAI,MCPAnthropic,MCPGemini mcp;</code></pre>"},{"location":"development/architecture/#function-call-process-with-mcps","title":"Function Call Process with MCPs","text":"<p>The following sequence diagram shows how function calls are processed through the MCP layer:</p> <pre><code>sequenceDiagram\n    participant AIAgent as AI Agent\n    participant App as Application\n    participant Bridge as AgentBridge\n    participant MCPManager as MCP Manager\n    participant Adapter as MCP Adapter\n    participant Registry as Registry\n    participant Function as Function\n\n    AIAgent-&gt;&gt;App: Function call via MCP\n    App-&gt;&gt;Bridge: handleMCPFunctionCall('openai', call)\n    Bridge-&gt;&gt;MCPManager: handleMCPFunctionCall('openai', call, registry)\n    MCPManager-&gt;&gt;Adapter: getAdapter('openai')\n    MCPManager-&gt;&gt;Adapter: convertFromMCPCall(call)\n    Adapter-&gt;&gt;MCPManager: Return function call request\n    MCPManager-&gt;&gt;Registry: executeFunction(name, params, context)\n    Registry-&gt;&gt;Function: Execute with params and context\n    Function-&gt;&gt;Registry: Return result\n    Registry-&gt;&gt;MCPManager: Return function result\n    MCPManager-&gt;&gt;Adapter: mapResponse(result)\n    Adapter-&gt;&gt;MCPManager: Return MCP-formatted response\n    MCPManager-&gt;&gt;Bridge: Return response\n    Bridge-&gt;&gt;App: Return response\n    App-&gt;&gt;AIAgent: Return MCP response</code></pre>"},{"location":"development/architecture/#future-architecture-directions","title":"Future Architecture Directions","text":"<p>Future enhancements to the AgentBridge architecture may include:</p> <ul> <li>Server-side rendering support</li> <li>WebSocket-based real-time updates</li> <li>Component synchronization across devices</li> <li>Enhanced MCP support for multiple AI platforms</li> <li>AI agent capability discovery</li> <li>Enhanced type system with runtime validation</li> <li>Additional design information collection mechanisms</li> <li>Advanced UI reasoning capabilities for AI agents </li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>This page is under construction. It will contain documentation about Contributing in the Development section.</p>"},{"location":"development/contributing/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p>"},{"location":"development/deployment/","title":"Package Deployment Guide","text":"<p>This document provides instructions for deploying the AgentBridge packages to package registries and integrating them into applications.</p>"},{"location":"development/deployment/#package-structure","title":"Package Structure","text":"<p>AgentBridge consists of several packages that can be deployed independently:</p> <pre><code>@agentbridge/core        - Core functionality, platform-agnostic\n@agentbridge/react       - React integration\n@agentbridge/angular     - Angular integration  \n@agentbridge/react-native - React Native integration\nagentbridge              - Flutter integration package\n</code></pre>"},{"location":"development/deployment/#prerequisites","title":"Prerequisites","text":"<p>Before deploying the packages, ensure you have:</p> <ul> <li>Node.js 14.x or higher (for JavaScript packages)</li> <li>npm 7.x or higher or yarn 1.22.x or higher</li> <li>Flutter 3.0.0 or higher (for Flutter package)</li> <li>Access to the package registries (npm, pub.dev)</li> <li>Appropriate authentication credentials</li> </ul>"},{"location":"development/deployment/#version-management","title":"Version Management","text":"<p>AgentBridge follows Semantic Versioning (SemVer) for all packages:</p> <ul> <li>Major version: Breaking changes that require code updates in consuming applications</li> <li>Minor version: New features added in a backward-compatible manner</li> <li>Patch version: Backward-compatible bug fixes</li> </ul> <p>All packages should be versioned together to maintain compatibility.</p>"},{"location":"development/deployment/#building-packages-for-deployment","title":"Building Packages for Deployment","text":""},{"location":"development/deployment/#javascript-packages-core-react-angular-react-native","title":"JavaScript Packages (Core, React, Angular, React Native)","text":"<ol> <li>Clean the build artifacts:</li> </ol> <pre><code>npm run clean\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Build the packages:</li> </ol> <pre><code>npm run build\n</code></pre> <ol> <li>Run tests to ensure everything works:</li> </ol> <pre><code>npm test\n</code></pre>"},{"location":"development/deployment/#flutter-package","title":"Flutter Package","text":"<ol> <li>Ensure your Flutter environment is set up:</li> </ol> <pre><code>flutter doctor\n</code></pre> <ol> <li>Run tests:</li> </ol> <pre><code>flutter test\n</code></pre> <ol> <li>Analyze the code:</li> </ol> <pre><code>flutter analyze\n</code></pre>"},{"location":"development/deployment/#publishing-packages","title":"Publishing Packages","text":""},{"location":"development/deployment/#publishing-javascript-packages-to-npm","title":"Publishing JavaScript Packages to npm","text":"<ol> <li>Log in to npm:</li> </ol> <pre><code>npm login\n</code></pre> <ol> <li>Publish the packages in the correct order (core first, then the framework-specific packages):</li> </ol> <pre><code># In the core package directory\nnpm publish --access public\n\n# In the React package directory\nnpm publish --access public\n\n# In the Angular package directory\nnpm publish --access public\n\n# In the React Native package directory\nnpm publish --access public\n</code></pre>"},{"location":"development/deployment/#publishing-the-flutter-package-to-pubdev","title":"Publishing the Flutter Package to pub.dev","text":"<ol> <li>Review the package with the dry-run command:</li> </ol> <pre><code>flutter pub publish --dry-run\n</code></pre> <ol> <li>Publish the package:</li> </ol> <pre><code>flutter pub publish\n</code></pre>"},{"location":"development/deployment/#cicd-integration","title":"CI/CD Integration","text":"<p>AgentBridge includes GitHub Actions workflows for automated testing, documentation building, and package deployment.</p>"},{"location":"development/deployment/#development-workflow","title":"Development Workflow","text":"<p>The development workflow runs on every push to the main and develop branches, as well as on pull requests targeting these branches. It includes the following jobs:</p> <ul> <li>Linting JavaScript and TypeScript code</li> <li>Running JavaScript/TypeScript tests with coverage reporting</li> <li>Building JavaScript/TypeScript packages</li> <li>Linting Flutter code</li> <li>Running Flutter tests with coverage reporting </li> <li>Building and validating documentation</li> </ul> <p>This workflow ensures that code quality is maintained throughout the development process.</p> <pre><code># .github/workflows/development.yml\nname: AgentBridge Development\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main, develop]\n  workflow_dispatch:\n\njobs:\n  lint-js:\n    name: Lint JavaScript\n    # ... job details ...\n\n  test-js:\n    name: Test JavaScript\n    # ... job details ...\n\n  # ... other jobs ...\n</code></pre>"},{"location":"development/deployment/#documentation-deployment","title":"Documentation Deployment","text":"<p>The documentation deployment workflow automatically publishes the documentation site to GitHub Pages whenever changes are made to the documentation files or when manually triggered:</p> <pre><code># .github/workflows/docs-deployment.yml\nname: Deploy Documentation\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'docs/**'\n      - 'mkdocs.yml'\n  workflow_dispatch:\n\n# ... jobs ...\n</code></pre>"},{"location":"development/deployment/#package-deployment","title":"Package Deployment","text":"<p>Package deployment is automated through a GitHub Actions workflow that is triggered when a version tag is pushed to the repository or manually through the GitHub interface.</p> <p>The workflow executes the following steps:</p> <ol> <li>Run tests for all packages</li> <li>Build all packages</li> <li>Publish JavaScript packages to npm</li> <li>Publish the Flutter package to pub.dev</li> <li>Create a GitHub release with notes</li> </ol> <pre><code># .github/workflows/package-deployment.yml\nname: AgentBridge Package Deployment\n\non:\n  push:\n    tags:\n      - 'v*.*.*' # Run workflow on version tags, e.g. v1.0.0\n  workflow_dispatch: # Allow manual triggering\n\n# ... jobs ...\n</code></pre>"},{"location":"development/deployment/#release-process","title":"Release Process","text":"<p>To release a new version of AgentBridge packages, follow these steps:</p> <ol> <li>Update version numbers in all package.json files and pubspec.yaml</li> <li>Update CHANGELOG.md with the changes in the new version</li> <li>Commit the version changes with a message like \"chore: bump version to x.y.z\"</li> <li>Create and push a new tag:    <pre><code>git tag -a vx.y.z -m \"Release vx.y.z\"\ngit push origin vx.y.z\n</code></pre></li> <li>The package deployment workflow will automatically publish all packages to their respective registries</li> </ol>"},{"location":"development/deployment/#managing-environment-secrets","title":"Managing Environment Secrets","text":"<p>The following GitHub repository secrets need to be configured for the workflows to function properly:</p> <ul> <li><code>NPM_TOKEN</code>: Access token for publishing to npm</li> <li><code>PUB_DEV_CREDENTIALS</code>: Credentials JSON for publishing to pub.dev</li> <li><code>CODECOV_TOKEN</code>: Token for uploading coverage reports to Codecov</li> </ul> <p>To add these secrets, go to your GitHub repository settings \u2192 Secrets and variables \u2192 Actions \u2192 New repository secret.</p>"},{"location":"development/deployment/#monitoring-deployments","title":"Monitoring Deployments","text":"<p>You can monitor the status of deployments in the \"Actions\" tab of your GitHub repository. Each workflow run will show detailed logs and any errors that might occur during the deployment process.</p>"},{"location":"development/deployment/#package-registry-security","title":"Package Registry Security","text":""},{"location":"development/deployment/#npm-package-security","title":"npm Package Security","text":"<ul> <li>Use two-factor authentication (2FA) for the npm account</li> <li>Configure package access to restrict who can publish</li> <li>Add <code>.npmignore</code> files to exclude unnecessary files from the package</li> </ul>"},{"location":"development/deployment/#pubdev-package-security","title":"pub.dev Package Security","text":"<ul> <li>Use Google accounts with strong security measures</li> <li>Keep credentials secure and never commit them to the repository</li> <li>Follow pub.dev security best practices</li> </ul>"},{"location":"development/deployment/#deploying-example-applications","title":"Deploying Example Applications","text":"<p>AgentBridge includes several example applications that demonstrate how to use the framework with different web and mobile frameworks. These examples can be deployed for demonstration or testing purposes.</p>"},{"location":"development/deployment/#local-react-example","title":"Local React Example","text":"<p>The local React example uses a WebSocket server for communication between the app and AI agents.</p>"},{"location":"development/deployment/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Node.js 14.x or higher</li> <li>npm 6.x or higher</li> </ul>"},{"location":"development/deployment/#deployment-steps","title":"Deployment Steps","text":"<ol> <li> <p>Clone the AgentBridge repository:    <pre><code>git clone https://github.com/agentbridge/agentbridge.git\ncd agentbridge\n</code></pre></p> </li> <li> <p>Install dependencies and build packages:    <pre><code>npm install\nnpm run build\n</code></pre></p> </li> <li> <p>Navigate to the example directory:    <pre><code>cd examples/local-react-example\n</code></pre></p> </li> <li> <p>Install example dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Start the WebSocket server:    <pre><code>node server.js\n</code></pre>    By default, the server will listen on port 3001. You can modify this in the server.js file.</p> </li> <li> <p>In a separate terminal, start the React application:    <pre><code>npm start\n</code></pre>    The application will be accessible at http://localhost:3000.</p> </li> </ol>"},{"location":"development/deployment/#local-angular-example","title":"Local Angular Example","text":"<p>The local Angular example also uses a WebSocket server for communication.</p>"},{"location":"development/deployment/#prerequisites_2","title":"Prerequisites","text":"<ul> <li>Node.js 14.x or higher</li> <li>npm 6.x or higher</li> <li>Angular CLI 13.x or higher</li> </ul>"},{"location":"development/deployment/#deployment-steps_1","title":"Deployment Steps","text":"<ol> <li> <p>Clone the repository and build packages as above.</p> </li> <li> <p>Navigate to the Angular example directory:    <pre><code>cd examples/local-angular-example\n</code></pre></p> </li> <li> <p>Install example dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Start the WebSocket server:    <pre><code>node server.js\n</code></pre></p> </li> <li> <p>In a separate terminal, start the Angular application:    <pre><code>ng serve\n</code></pre>    The application will be accessible at http://localhost:4200.</p> </li> </ol>"},{"location":"development/deployment/#production-deployment","title":"Production Deployment","text":"<p>For production deployment of the example applications, consider the following approaches:</p>"},{"location":"development/deployment/#websocket-server-deployment","title":"WebSocket Server Deployment","text":"<p>The WebSocket server can be deployed on: - AWS EC2 instances - Heroku - DigitalOcean Droplets - Azure App Service</p> <p>Example deployment for a Node.js WebSocket server on Heroku:</p> <ol> <li> <p>Create a new Heroku app:    <pre><code>heroku create agentbridge-websocket-server\n</code></pre></p> </li> <li> <p>Add a Procfile to the root of the server directory with the following content:    <pre><code>web: node server.js\n</code></pre></p> </li> <li> <p>Set environment variables if needed:    <pre><code>heroku config:set NODE_ENV=production\n</code></pre></p> </li> <li> <p>Deploy the server:    <pre><code>git subtree push --prefix examples/local-react-example heroku main\n</code></pre></p> </li> </ol>"},{"location":"development/deployment/#react-app-deployment","title":"React App Deployment","text":"<p>The React app can be deployed to: - Netlify - Vercel - GitHub Pages - AWS Amplify</p> <p>Example deployment to Netlify:</p> <ol> <li> <p>Build the React application:    <pre><code>cd examples/local-react-example\nnpm run build\n</code></pre></p> </li> <li> <p>Deploy using Netlify CLI:    <pre><code>netlify deploy --prod --dir=build\n</code></pre></p> </li> </ol>"},{"location":"development/deployment/#angular-app-deployment","title":"Angular App Deployment","text":"<p>The Angular app can be deployed to: - Firebase Hosting - Netlify - Vercel - GitHub Pages</p> <p>Example deployment to Firebase Hosting:</p> <ol> <li> <p>Install Firebase CLI:    <pre><code>npm install -g firebase-tools\n</code></pre></p> </li> <li> <p>Log in to Firebase:    <pre><code>firebase login\n</code></pre></p> </li> <li> <p>Initialize Firebase (select Hosting):    <pre><code>firebase init\n</code></pre></p> </li> <li> <p>Build the Angular application:    <pre><code>ng build --prod\n</code></pre></p> </li> <li> <p>Deploy to Firebase:    <pre><code>firebase deploy\n</code></pre></p> </li> </ol>"},{"location":"development/deployment/#configuration-for-production","title":"Configuration for Production","text":"<p>When deploying the applications for production, make sure to update the WebSocket URL to point to your deployed WebSocket server. This can be done by:</p> <ol> <li>Setting an environment variable (e.g., <code>REACT_APP_WEBSOCKET_URL</code> for React apps)</li> <li>Updating the URL in the configuration file</li> <li>Implementing a configuration service that loads the URL from a server</li> </ol> <p>Example .env file for React: <pre><code>REACT_APP_WEBSOCKET_URL=wss://your-websocket-server.herokuapp.com\n</code></pre></p> <p>Example environment.prod.ts file for Angular: <pre><code>export const environment = {\n  production: true,\n  websocketUrl: 'wss://your-websocket-server.herokuapp.com'\n};\n</code></pre></p>"},{"location":"development/deployment/#versioning-and-changelogs","title":"Versioning and Changelogs","text":"<p>Each package should maintain a <code>CHANGELOG.md</code> file that documents changes between versions. Here's a sample format:</p> <pre><code># Changelog\n\n## 1.1.0 (2023-08-15)\n\n### Features\n- Added support for custom component types\n- Improved error handling for function calls\n\n### Fixes\n- Fixed issue with component registration in React adapter\n- Resolved type validation bug in core package\n\n## 1.0.0 (2023-07-01)\n\nInitial stable release.\n</code></pre>"},{"location":"development/deployment/#release-checklist","title":"Release Checklist","text":"<p>Before releasing a new version, complete this checklist:</p> <ol> <li>Update version numbers in all package.json/pubspec.yaml files</li> <li>Update CHANGELOG.md files with all notable changes</li> <li>Ensure all tests pass across all packages</li> <li>Verify cross-package compatibility</li> <li>Build all packages to ensure they compile correctly</li> <li>Create a GitHub release with appropriate tags</li> <li>Deploy packages to registries</li> <li>Verify that packages can be installed and used in sample applications</li> </ol>"},{"location":"development/deployment/#backward-compatibility","title":"Backward Compatibility","text":"<p>When deploying new versions, consider the following to maintain backward compatibility:</p> <ul> <li>Avoid removing public APIs without proper deprecation notices</li> <li>Provide migration guides for major version upgrades</li> <li>Test with previous versions to identify potential issues</li> <li>Add feature flags for new functionality that might impact existing behavior</li> </ul>"},{"location":"development/deployment/#managing-dependencies","title":"Managing Dependencies","text":"<ul> <li>Keep dependencies up to date but stable</li> <li>Lock dependency versions to prevent unexpected changes</li> <li>Test with both minimum and latest dependency versions</li> <li>Document any specific dependency requirements</li> </ul>"},{"location":"development/deployment/#troubleshooting-deployment-issues","title":"Troubleshooting Deployment Issues","text":""},{"location":"development/deployment/#common-npm-deployment-issues","title":"Common npm Deployment Issues","text":"<ul> <li>Authentication errors: Ensure your npm token is valid and you have the correct permissions</li> <li>Version conflicts: Make sure you're not trying to publish a version that already exists</li> <li>Package size issues: Check for large files that should be excluded in .npmignore</li> </ul>"},{"location":"development/deployment/#common-pubdev-deployment-issues","title":"Common pub.dev Deployment Issues","text":"<ul> <li>Pub points: Address issues that might reduce pub points score</li> <li>Analysis issues: Fix any code quality issues reported by the analyzer</li> <li>Dependency conflicts: Resolve any conflicts in the dependency graph</li> </ul>"},{"location":"development/deployment/#post-deployment-verification","title":"Post-Deployment Verification","text":"<p>After deploying packages, verify that:</p> <ol> <li>Packages can be installed from the registries</li> <li>Sample applications work with the new versions</li> <li>Documentation reflects the current API and features</li> <li>Release notes are clear and complete</li> </ol>"},{"location":"development/deployment/#canary-releases","title":"Canary Releases","text":"<p>For testing new features before a full release, consider using canary releases:</p> <pre><code># For npm packages\nnpm publish --tag canary\n\n# For Flutter packages\n# Use a version suffix like \"1.0.0-canary.1\" in pubspec.yaml\nflutter pub publish --preview\n</code></pre>"},{"location":"development/deployment/#rolling-back-releases","title":"Rolling Back Releases","text":"<p>If issues are discovered after deployment:</p>"},{"location":"development/deployment/#npm-packages","title":"npm Packages","text":"<pre><code>npm deprecate @agentbridge/package@version \"Critical issues found, please use version X.Y.Z instead\"\n</code></pre>"},{"location":"development/deployment/#flutter-packages","title":"Flutter Packages","text":"<p>Flutter packages cannot be unpublished, but you can:</p> <ol> <li>Quickly release a patch version that fixes the issue</li> <li>Mark the problematic version as discontinued in the package documentation </li> </ol>"},{"location":"development/mcp-evaluation/","title":"Model Context Protocols (MCPs) Integration Evaluation","text":"<p>This document evaluates the potential integration of Model Context Protocols (MCPs) into the AgentBridge framework, addressing key considerations for implementation and expected benefits.</p>"},{"location":"development/mcp-evaluation/#what-are-model-context-protocols","title":"What are Model Context Protocols?","text":"<p>Model Context Protocols (MCPs) are open standards that define how AI models can seamlessly connect to external data sources, tools, or services. They provide a standardized way for AI agents to:</p> <ul> <li>Discover available functions and tools</li> <li>Exchange context information in real time</li> <li>Maintain consistent communication across various systems</li> <li>Call external functions with standardized parameter formats</li> <li>Process responses in a consistent manner</li> </ul> <p>MCPs act as a universal \"connector\" or \"adapter\" between an AI agent's internal context and the real-world data and functionality it needs to access.</p>"},{"location":"development/mcp-evaluation/#current-agentbridge-architecture","title":"Current AgentBridge Architecture","text":"<p>AgentBridge currently provides a framework for exposing application functionality to AI agents, but without a standardized protocol for discovery and interaction. The current approach requires:</p> <ul> <li>Custom integration code for each AI model integration</li> <li>Proprietary function definition formats</li> <li>Application-specific context management</li> <li>Custom type definitions and validations</li> </ul> <p>While functional, this approach limits interoperability and increases the complexity of integrating with new AI platforms.</p> <pre><code>graph TD\n    subgraph \"Without MCPs\"\n        AIAgent1[AI Agent A] --&gt; |Custom Integration| AgentBridge1[AgentBridge]\n        AIAgent2[AI Agent B] --&gt; |Custom Integration| AgentBridge2[AgentBridge]\n        AIAgent3[AI Agent C] --&gt; |Custom Integration| AgentBridge3[AgentBridge]\n    end</code></pre>"},{"location":"development/mcp-evaluation/#key-evaluation-questions","title":"Key Evaluation Questions","text":""},{"location":"development/mcp-evaluation/#1-discovery-consumption","title":"1. Discovery &amp; Consumption","text":"<p>Question: Can our agents dynamically discover and call the exposed SDK functions through an MCP-based protocol?</p> <p>Analysis:</p> <p>Integrating MCPs would provide significant improvements to function discovery and consumption:</p> <ul> <li> <p>Dynamic Function Discovery: MCPs would allow AI agents to dynamically discover available functions in the AgentBridge registry without prior knowledge of the application's capabilities.</p> </li> <li> <p>Schema-Based Discoverability: Function parameters, types, and descriptions would be exposed in a standardized format that any MCP-compatible AI agent could understand.</p> </li> <li> <p>Runtime Adaptability: As new functions are registered with AgentBridge, they would automatically become available to AI agents without requiring code changes.</p> </li> <li> <p>Consistent Invocation Format: All function calls would follow the same standardized pattern, simplifying integration with different AI models.</p> </li> </ul> <p>Implementation Requirements:</p> <ul> <li>Extend the function registry to expose functions in MCP-compatible format</li> <li>Implement a discovery endpoint/mechanism that adheres to MCP specifications</li> <li>Create schema translation utilities to convert between AgentBridge and MCP type formats</li> <li>Build examples demonstrating dynamic discovery</li> </ul>"},{"location":"development/mcp-evaluation/#2-context-management","title":"2. Context Management","text":"<p>Question: How would MCPs help maintain and pass the necessary context between our agents and the SDKs?</p> <p>Analysis:</p> <p>MCPs would significantly improve context management in the AgentBridge ecosystem:</p> <ul> <li> <p>Standardized Context Format: MCPs define a standard format for context information, ensuring consistent context handling across different AI platforms.</p> </li> <li> <p>Context Persistence: MCPs include mechanisms for maintaining context across multiple function calls, enabling more complex agent interactions.</p> </li> <li> <p>User Authentication Context: MCPs can standardize how user authentication information is passed between agents and functions, improving security consistency.</p> </li> <li> <p>Application State Sharing: MCPs can standardize how application state is shared with AI agents, allowing for more contextually-aware interactions.</p> </li> </ul> <p>Implementation Requirements:</p> <ul> <li>Develop a context management system that adheres to MCP specifications</li> <li>Create context mappers to translate between AgentBridge's internal context and MCP context format</li> <li>Implement context persistence mechanisms</li> <li>Add context validation to ensure security</li> </ul>"},{"location":"development/mcp-evaluation/#3-standardization","title":"3. Standardization","text":"<p>Question: Would using MCPs standardize the interaction across different modules, making it easier for agents to operate regardless of the underlying data sources?</p> <p>Analysis:</p> <p>Adopting MCPs would significantly enhance standardization across the AgentBridge ecosystem:</p> <ul> <li> <p>Cross-Platform Consistency: With MCPs, interactions would be consistent whether the agent is working with a React, Angular, Flutter, or any other platform implementation.</p> </li> <li> <p>Reduced Integration Complexity: New AI platforms could be integrated with minimal additional code if they support the same MCP standard.</p> </li> <li> <p>Unified Type System: MCPs define standard types that could be mapped to AgentBridge's type system, ensuring consistent validation.</p> </li> <li> <p>Protocol Evolution: As MCPs evolve with industry standards, AgentBridge would benefit from improvements without requiring major internal changes.</p> </li> </ul> <p>Implementation Examples:</p> <pre><code>// Example of how a function might be registered with MCP support\nagentBridge.registerFunction({\n  name: 'getWeather',\n  description: 'Get current weather for a location',\n  parameters: {\n    type: 'object',\n    properties: {\n      location: {\n        type: 'string',\n        description: 'City name or coordinates'\n      },\n      units: {\n        type: 'string',\n        enum: ['metric', 'imperial'],\n        default: 'metric'\n      }\n    },\n    required: ['location']\n  },\n  returnType: {\n    type: 'object',\n    properties: {\n      temperature: { type: 'number' },\n      conditions: { type: 'string' },\n      humidity: { type: 'number' }\n    }\n  },\n  handler: async (params, context) =&gt; {\n    // Function implementation\n    return {\n      temperature: 22.5,\n      conditions: 'Sunny',\n      humidity: 45\n    };\n  }\n});\n</code></pre>"},{"location":"development/mcp-evaluation/#4-implementation-complexity","title":"4. Implementation Complexity","text":"<p>Question: What would be the effort required to integrate MCPs into our current architecture? Is this integration viable at this stage?</p> <p>Analysis:</p> <p>Implementing MCP support in AgentBridge would involve moderate complexity:</p> <ul> <li> <p>Adaptation Layer: An MCP adapter component would need to be built to translate between AgentBridge's internal API and the MCP format.</p> </li> <li> <p>Schema Mapping: Mapping between AgentBridge's function definitions and MCP tool descriptions would require careful type translation.</p> </li> <li> <p>Backward Compatibility: The implementation should maintain backward compatibility with existing AgentBridge integrations.</p> </li> <li> <p>Testing Requirements: Comprehensive testing would be needed to ensure compatibility with different AI platforms and MCP implementations.</p> </li> </ul> <p>Viability Assessment:</p> <p>MCP integration is highly viable at this stage for several reasons:</p> <ol> <li> <p>Foundation Available: AgentBridge already has most of the foundational components needed (function registry, type system, adapters).</p> </li> <li> <p>Incremental Implementation: MCP support can be added incrementally without disrupting existing functionality.</p> </li> <li> <p>Return on Investment: The effort required is moderate, but the benefits in terms of interoperability and standardization are substantial.</p> </li> <li> <p>Timing: As MCPs are gaining industry adoption, implementing support now positions AgentBridge favorably in the ecosystem.</p> </li> </ol> <pre><code>graph TD\n    subgraph \"With MCPs\"\n        AIAgent[Any AI Agent with MCP Support] --&gt; |Standard Protocol| MCPLayer[MCP Adapter Layer]\n        MCPLayer --&gt; AgentBridge[AgentBridge]\n    end</code></pre>"},{"location":"development/mcp-evaluation/#implementation-path","title":"Implementation Path","text":""},{"location":"development/mcp-evaluation/#phase-1-research-and-design","title":"Phase 1: Research and Design","text":"<ol> <li>Standard Selection: Evaluate and select specific MCP standards to implement (e.g., OpenAI's function calling schema, Anthropic's tool use schema)</li> <li>Gap Analysis: Identify gaps between current AgentBridge capabilities and MCP requirements</li> <li>Architecture Design: Design the MCP adapter component and integration points</li> <li>POC Development: Create proof-of-concept implementations for key scenarios</li> </ol>"},{"location":"development/mcp-evaluation/#phase-2-core-implementation","title":"Phase 2: Core Implementation","text":"<ol> <li>MCP Adapter Development: Implement the core MCP adapter component</li> <li>Schema Translation: Build utilities for translating between AgentBridge and MCP schemas</li> <li>Context Management: Implement standardized context handling according to MCP specifications</li> <li>Discovery Mechanism: Create MCP-compliant discovery endpoints/mechanisms</li> </ol>"},{"location":"development/mcp-evaluation/#phase-3-platform-integration-and-testing","title":"Phase 3: Platform Integration and Testing","text":"<ol> <li>AI Platform Testing: Test with multiple AI platforms (OpenAI, Anthropic, etc.)</li> <li>Framework Adapter Updates: Update framework adapters to leverage MCP capabilities</li> <li>Performance Optimization: Optimize performance of the MCP integration</li> <li>Documentation: Create comprehensive documentation for MCP integration</li> </ol>"},{"location":"development/mcp-evaluation/#comparison-of-with-and-without-mcps","title":"Comparison of With and Without MCPs","text":"Aspect Without MCPs With MCPs AI Platform Integration Custom integration for each platform Standardized integration for all MCP-supporting platforms Function Discovery Manual documentation and configuration Automatic, standardized discovery Type System Custom type definitions Standard types with mapping to custom types Context Management Custom context handling Standardized context format and persistence Maintenance Cost Higher (multiple custom integrations) Lower (single standard to maintain) Extensibility Requires code changes for new capabilities Dynamic discovery of new capabilities Developer Experience Varied across platforms Consistent across platforms"},{"location":"development/mcp-evaluation/#example-openai-function-calling-as-mcp","title":"Example: OpenAI Function Calling as MCP","text":"<p>OpenAI's function calling schema is an example of an emerging MCP standard. Here's how it might be integrated with AgentBridge:</p> <pre><code>// Current AgentBridge function definition\nagentBridge.registerFunction(\n  'searchProducts',\n  'Search for products in the inventory',\n  {\n    type: 'object',\n    properties: {\n      query: { type: 'string' },\n      category: { type: 'string', optional: true },\n      maxResults: { type: 'number', optional: true }\n    }\n  },\n  async (params, context) =&gt; {\n    // Function implementation\n    return { results: [] };\n  }\n);\n\n// With MCP adapter, this would automatically be exposed in OpenAI format:\n{\n  \"name\": \"searchProducts\",\n  \"description\": \"Search for products in the inventory\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"query\": {\n        \"type\": \"string\",\n        \"description\": \"Search query\"\n      },\n      \"category\": {\n        \"type\": \"string\",\n        \"description\": \"Product category\"\n      },\n      \"maxResults\": {\n        \"type\": \"number\",\n        \"description\": \"Maximum number of results to return\"\n      }\n    },\n    \"required\": [\"query\"]\n  }\n}\n</code></pre>"},{"location":"development/mcp-evaluation/#recommendations","title":"Recommendations","text":"<p>Based on this evaluation, we recommend:</p> <ol> <li> <p>Proceed with MCP Integration: The benefits of standardization, improved discoverability, and reduced integration complexity justify the implementation effort.</p> </li> <li> <p>Phased Approach: Implement MCP support incrementally, starting with the most widely adopted standards (e.g., OpenAI's function calling schema).</p> </li> <li> <p>Maintain Backward Compatibility: Ensure that existing AgentBridge integrations continue to work without modification.</p> </li> <li> <p>Create Reference Implementations: Develop comprehensive examples demonstrating MCP integration with different AI platforms.</p> </li> <li> <p>Documentation and Training: Provide detailed documentation and training materials for developers implementing MCP-based integrations.</p> </li> <li> <p>Monitoring and Feedback: Establish metrics to monitor the effectiveness of MCP integration and gather feedback for continuous improvement.</p> </li> </ol>"},{"location":"development/mcp-evaluation/#conclusion","title":"Conclusion","text":"<p>Integrating Model Context Protocols into the AgentBridge framework would provide significant benefits in terms of standardization, discoverability, context management, and reduced integration complexity. The implementation effort is moderate and can be approached incrementally, with each phase delivering tangible benefits.</p> <p>Given AgentBridge's goal of providing a unified interface for AI agents to interact with applications across different platforms and frameworks, MCP integration aligns perfectly with this mission and would position AgentBridge as a forward-thinking framework in the AI ecosystem.</p> <p>By adopting MCPs, AgentBridge would enable more seamless integration with a wider range of AI platforms, reducing the burden on developers and enabling more sophisticated agent-application interactions. </p>"},{"location":"development/release-notes/","title":"Release Notes","text":""},{"location":"development/release-notes/#version-020-latest","title":"Version 0.2.0 (Latest)","text":"<p>Release Date: June 15, 2023</p>"},{"location":"development/release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Reorganized package structure for better maintainability</li> <li>Renamed packages to follow a more consistent pattern</li> <li>Removed <code>@agentbridge/comm-websocket</code> package (use <code>@agentbridge/server</code> directly)</li> </ul>"},{"location":"development/release-notes/#new-features","title":"New Features","text":"<ul> <li>Added support for TypeScript 5.0</li> <li>Improved error handling with detailed error messages</li> <li>Enhanced type definitions for better type safety</li> <li>Added new hooks for React components</li> <li>Improved performance with optimized component rerenders</li> <li>Enhanced Angular dependency injection patterns</li> <li>New decorators for Angular component and function registration</li> <li>Improved native component support for React Native</li> <li>Reduced bundle size for React Native</li> <li>Added support for Flutter 3.10</li> </ul>"},{"location":"development/release-notes/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fixed reconnection issues with Ably provider</li> <li>Resolved race conditions in component registration</li> <li>Fixed memory leaks in React Native implementation</li> <li>Improved error handling in WebSocket connections</li> <li>Fixed type definitions for function parameters</li> </ul>"},{"location":"development/release-notes/#documentation","title":"Documentation","text":"<ul> <li>Comprehensive migration guide from v0.1.0 to v0.2.0</li> <li>Updated API reference with new methods and properties</li> <li>Added new examples for all supported frameworks</li> <li>Improved security guidelines</li> <li>Enhanced troubleshooting section</li> </ul>"},{"location":"development/release-notes/#version-010-initial-release","title":"Version 0.1.0 (Initial Release)","text":"<p>Release Date: January 10, 2023</p>"},{"location":"development/release-notes/#features","title":"Features","text":"<ul> <li>Initial release of AgentBridge framework</li> <li>Support for React, Angular, React Native, and Flutter</li> <li>Pub/Sub communication with Ably, Firebase, Pusher, and Supabase</li> <li>WebSocket communication for self-hosted mode</li> <li>Component registry for UI component discovery</li> <li>Function registry for callable functions</li> <li>Type system for parameter validation</li> <li>Security features for authentication and authorization </li> </ul>"},{"location":"development/roadmap/","title":"AgentBridge Roadmap","text":"<p>This document outlines the development roadmap for AgentBridge, highlighting what has been accomplished and what's planned for future releases.</p>"},{"location":"development/roadmap/#current-version-alpha","title":"Current Version (Alpha)","text":"<p>The current version of AgentBridge includes the following core functionality:</p> <ul> <li>\u2705 Core architecture with dual-mode communication (Pub/Sub and Self-Hosted)</li> <li>\u2705 Component and function registries with schema validation</li> <li>\u2705 Basic React SDK with hooks, components, and HOCs</li> <li>\u2705 Ably Pub/Sub provider implementation</li> <li>\u2705 WebSocket communication for self-hosted mode</li> <li>\u2705 Type-safe definitions with Zod schema validation</li> </ul>"},{"location":"development/roadmap/#next-steps-beta","title":"Next Steps (Beta)","text":"<p>The following features are planned for the beta release:</p>"},{"location":"development/roadmap/#communication-providers","title":"Communication Providers","text":"<ul> <li> Firebase Pub/Sub provider</li> <li> Pusher Pub/Sub provider</li> <li> Supabase Pub/Sub provider</li> <li> WebSocket server implementation (for backend)</li> <li> Custom provider API for third-party integrations</li> </ul>"},{"location":"development/roadmap/#framework-support","title":"Framework Support","text":"<ul> <li> Angular SDK</li> <li> Vue SDK</li> <li> React Native SDK</li> <li> Flutter SDK</li> <li> Framework adapter API for third-party framework support</li> </ul>"},{"location":"development/roadmap/#component-model","title":"Component Model","text":"<ul> <li> Standard component type definitions (button, input, form, etc.)</li> <li> Component relationship modeling (parent-child, dependencies)</li> <li> Automatic component discovery (reducing manual registration)</li> <li> Component state synchronization</li> </ul>"},{"location":"development/roadmap/#security-enhancements","title":"Security Enhancements","text":"<ul> <li> Authentication integration (OAuth, JWT, API keys)</li> <li> Fine-grained access control for components and functions</li> <li> Rate limiting and throttling</li> <li> Audit logging</li> </ul>"},{"location":"development/roadmap/#developer-experience","title":"Developer Experience","text":"<ul> <li> CLI tool for scaffolding and setup</li> <li> Developer portal and documentation site</li> <li> Visual component explorer for debugging</li> <li> Testing utilities</li> </ul>"},{"location":"development/roadmap/#agent-integration","title":"Agent Integration","text":"<ul> <li> Agent-side SDKs for popular AI frameworks</li> <li> Capability discovery protocol</li> <li> OpenAPI-compatible function descriptions</li> <li> Custom agent protocols</li> </ul>"},{"location":"development/roadmap/#release-timeline","title":"Release Timeline","text":"Phase Target Date Key Features Alpha Q2 2023 Core architecture, React SDK, Ably provider Beta Q3 2023 Multiple framework SDKs, all Pub/Sub providers, security improvements Release Candidate Q4 2023 Agent SDKs, developer tools, full documentation 1.0 Q1 2024 Production-ready with stability guarantees"},{"location":"development/roadmap/#long-term-vision","title":"Long-Term Vision","text":""},{"location":"development/roadmap/#artificial-intelligence-integration","title":"Artificial Intelligence Integration","text":"<ul> <li> AI-assisted component registration</li> <li> Automatic component description generation</li> <li> Intent-based component matching</li> <li> Context-aware function execution</li> </ul>"},{"location":"development/roadmap/#enterprise-features","title":"Enterprise Features","text":"<ul> <li> Multi-tenant support</li> <li> Admin dashboard</li> <li> Analytics and monitoring</li> <li> Compliance and regulatory controls</li> </ul>"},{"location":"development/roadmap/#ecosystem-expansion","title":"Ecosystem Expansion","text":"<ul> <li> Plugin system for extensibility</li> <li> Component marketplace</li> <li> Pre-built integrations with popular services</li> <li> Community templates and examples</li> </ul>"},{"location":"development/roadmap/#contributing","title":"Contributing","text":"<p>We welcome contributions to the AgentBridge project. Here are some areas where help is particularly needed:</p> <ol> <li>Additional Framework SDKs: Help us build SDKs for more frameworks</li> <li>Pub/Sub Providers: Implement additional providers</li> <li>Documentation: Improve and expand documentation</li> <li>Examples: Create example applications showcasing AgentBridge</li> <li>Testing: Write tests and improve test coverage</li> </ol> <p>See the Contributing Guide for more information on how to get involved. </p>"},{"location":"examples/angular-examples/","title":"Angular Examples","text":"<p>This page provides practical examples of using AgentBridge in Angular applications.</p>"},{"location":"examples/angular-examples/#basic-integration","title":"Basic Integration","text":""},{"location":"examples/angular-examples/#setting-up-agentbridge","title":"Setting Up AgentBridge","text":"<pre><code>// app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AgentBridgeModule } from '@agentbridge/angular';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AgentBridgeModule.forRoot({\n      appId: 'your-app-id',\n      apiKey: 'your-api-key',\n      environment: 'development',\n      debug: true\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre>"},{"location":"examples/angular-examples/#todo-list-example","title":"Todo List Example","text":"<p>A simplified todo list application with AgentBridge integration.</p>"},{"location":"examples/angular-examples/#todo-service","title":"Todo Service","text":"<pre><code>// todo.service.ts\nimport { Injectable } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\n  private todos: BehaviorSubject&lt;Todo[]&gt; = new BehaviorSubject&lt;Todo[]&gt;([\n    { id: '1', title: 'Learn AgentBridge', completed: false },\n    { id: '2', title: 'Build an Angular app', completed: true }\n  ]);\n\n  constructor(private agentBridge: AgentBridgeService) {\n    this.registerFunctions();\n  }\n\n  getTodos(): Observable&lt;Todo[]&gt; {\n    return this.todos.asObservable();\n  }\n\n  addTodo(title: string): void {\n    const newTodo: Todo = {\n      id: Date.now().toString(),\n      title,\n      completed: false\n    };\n    this.todos.next([...this.todos.value, newTodo]);\n  }\n\n  toggleTodo(id: string): void {\n    const updatedTodos = this.todos.value.map(todo =&gt; \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    );\n    this.todos.next(updatedTodos);\n  }\n\n  deleteTodo(id: string): void {\n    const updatedTodos = this.todos.value.filter(todo =&gt; todo.id !== id);\n    this.todos.next(updatedTodos);\n  }\n\n  clearCompleted(): void {\n    const updatedTodos = this.todos.value.filter(todo =&gt; !todo.completed);\n    this.todos.next(updatedTodos);\n  }\n\n  private registerFunctions(): void {\n    this.agentBridge.registerFunction({\n      name: 'addTodo',\n      description: 'Add a new todo item to the list',\n      parameters: {\n        type: 'object',\n        properties: {\n          title: {\n            type: 'string',\n            description: 'Title of the todo item',\n          },\n        },\n        required: ['title'],\n      },\n      handler: async (params) =&gt; {\n        const { title } = params;\n\n        if (!title || !title.trim()) {\n          return {\n            success: false,\n            error: 'Title cannot be empty',\n          };\n        }\n\n        this.addTodo(title.trim());\n\n        return {\n          success: true,\n          todo: this.todos.value.find(todo =&gt; todo.title === title.trim())\n        };\n      },\n    });\n\n    // Additional function registrations would follow the same pattern\n  }\n}\n</code></pre>"},{"location":"examples/angular-examples/#todo-component","title":"Todo Component","text":"<pre><code>// todo-list.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\nimport { TodoService, Todo } from './todo.service';\n\n@Component({\n  selector: 'app-todo-list',\n  template: `\n    &lt;div class=\"todo-list-container\" agentComponent=\"todo-list\" [agentComponentProps]=\"{\n      type: 'list',\n      properties: {\n        itemCount: todos.length,\n        completedCount: completedCount\n      },\n      actions: ['clearCompleted']\n    }\"&gt;\n      &lt;h2&gt;Todo List&lt;/h2&gt;\n\n      &lt;div class=\"todo-input\"&gt;\n        &lt;input\n          type=\"text\"\n          #todoInput\n          placeholder=\"What needs to be done?\"\n          class=\"todo-text-input\"\n        /&gt;\n        &lt;button (click)=\"addTodo(todoInput.value); todoInput.value = ''\"&gt;Add&lt;/button&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"todo-items\"&gt;\n        &lt;div *ngFor=\"let todo of todos\" \n             class=\"todo-item\"\n             [class.completed]=\"todo.completed\"\n             agentComponent=\"todo-{{todo.id}}\"\n             [agentComponentProps]=\"{\n               type: 'todo-item',\n               properties: {\n                 id: todo.id,\n                 title: todo.title,\n                 completed: todo.completed\n               },\n               actions: ['toggle', 'delete']\n             }\"&gt;\n          &lt;input\n            type=\"checkbox\"\n            [checked]=\"todo.completed\"\n            (change)=\"toggleTodo(todo.id)\"\n            class=\"todo-checkbox\"\n          /&gt;\n          &lt;span class=\"todo-title\"&gt;{{todo.title}}&lt;/span&gt;\n          &lt;button\n            (click)=\"deleteTodo(todo.id)\"\n            class=\"todo-delete-button\"\n          &gt;\n            Delete\n          &lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"todo-footer\"&gt;\n        &lt;span class=\"todo-count\"&gt;\n          {{todos.filter(t =&gt; !t.completed).length}} items left\n        &lt;/span&gt;\n        &lt;button\n          (click)=\"clearCompleted()\"\n          class=\"clear-completed-button\"\n          [disabled]=\"!hasCompleted\"\n        &gt;\n          Clear completed\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styleUrls: ['./todo-list.component.css']\n})\nexport class TodoListComponent implements OnInit {\n  todos: Todo[] = [];\n\n  constructor(\n    private todoService: TodoService,\n    private agentBridge: AgentBridgeService\n  ) {}\n\n  ngOnInit(): void {\n    this.todoService.getTodos().subscribe(todos =&gt; {\n      this.todos = todos;\n    });\n  }\n\n  get completedCount(): number {\n    return this.todos.filter(todo =&gt; todo.completed).length;\n  }\n\n  get hasCompleted(): boolean {\n    return this.completedCount &gt; 0;\n  }\n\n  addTodo(title: string): void {\n    if (title.trim()) {\n      this.todoService.addTodo(title);\n    }\n  }\n\n  toggleTodo(id: string): void {\n    this.todoService.toggleTodo(id);\n  }\n\n  deleteTodo(id: string): void {\n    this.todoService.deleteTodo(id);\n  }\n\n  clearCompleted(): void {\n    this.todoService.clearCompleted();\n  }\n}\n</code></pre>"},{"location":"examples/angular-examples/#using-mcp-adapters","title":"Using MCP Adapters","text":"<p>Example of integrating MCP adapters in an Angular application.</p> <pre><code>// chat.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\nimport { OpenAIMCPAdapter } from '@agentbridge/mcp-openai';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant' | 'tool';\n  content: string;\n  tool_call_id?: string;\n}\n\n@Component({\n  selector: 'app-chat',\n  template: `\n    &lt;div class=\"chat-container\"&gt;\n      &lt;div class=\"chat-messages\"&gt;\n        &lt;div\n          *ngFor=\"let message of messages\"\n          class=\"message\"\n          [ngClass]=\"message.role === 'user' ? 'user-message' : 'assistant-message'\"\n        &gt;\n          &lt;div class=\"message-content\"&gt;{{message.content}}&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div *ngIf=\"isLoading\" class=\"message assistant-message\"&gt;\n          &lt;div class=\"message-content\"&gt;\n            &lt;div class=\"typing-indicator\"&gt;\n              &lt;span&gt;&lt;/span&gt;\n              &lt;span&gt;&lt;/span&gt;\n              &lt;span&gt;&lt;/span&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"chat-input-container\"&gt;\n        &lt;textarea\n          [(ngModel)]=\"inputText\"\n          (keydown.enter)=\"$event.shiftKey ? null : (sendMessage(), $event.preventDefault())\"\n          placeholder=\"Type a message...\"\n          class=\"chat-input\"\n          [disabled]=\"isLoading\"\n        &gt;&lt;/textarea&gt;\n        &lt;button\n          (click)=\"sendMessage()\"\n          class=\"send-button\"\n          [disabled]=\"isLoading || !inputText.trim()\"\n        &gt;\n          Send\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent implements OnInit {\n  messages: Message[] = [];\n  inputText = '';\n  isLoading = false;\n\n  constructor(\n    private agentBridge: AgentBridgeService,\n    private http: HttpClient\n  ) {}\n\n  ngOnInit(): void {\n    this.setupAgentBridge();\n\n    // Add initial welcome message\n    this.messages.push({\n      id: 'welcome',\n      role: 'assistant',\n      content: 'Hello! I can help you with weather information. Try asking about the weather in a city.'\n    });\n  }\n\n  private setupAgentBridge(): void {\n    // Register OpenAI MCP adapter\n    this.agentBridge.registerMCPAdapter(\n      'openai',\n      new OpenAIMCPAdapter(this.agentBridge.registry)\n    );\n\n    // Register weather function\n    this.agentBridge.registerFunction({\n      name: 'getWeather',\n      description: 'Get the current weather for a location',\n      parameters: {\n        type: 'object',\n        properties: {\n          location: {\n            type: 'string',\n            description: 'The city and state, e.g. San Francisco, CA',\n          },\n        },\n        required: ['location'],\n      },\n      handler: async (params) =&gt; {\n        const { location } = params;\n\n        // Simulate API delay\n        await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n        // Return mock weather data\n        return {\n          location,\n          temperature: 72,\n          conditions: 'sunny',\n          humidity: 45,\n          windSpeed: 8,\n        };\n      }\n    });\n  }\n\n  async sendMessage(): void {\n    if (!this.inputText.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: this.inputText,\n    };\n\n    this.messages.push(userMessage);\n    this.inputText = '';\n    this.isLoading = true;\n\n    try {\n      // Get OpenAI schema from AgentBridge\n      const schema = this.agentBridge.getMCPSchema('openai');\n\n      // Call OpenAI API (simplified for the example)\n      const response = await this.callOpenAI(this.messages, schema.functions);\n\n      // Process the response\n      // Note: This is simplified; a real implementation would handle all message types\n      this.handleResponse(response);\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      this.messages.push({\n        id: `error-${Date.now()}`,\n        role: 'assistant',\n        content: 'Sorry, I encountered an error. Please try again.',\n      });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async callOpenAI(messages: Message[], tools: any[]): Promise&lt;any&gt; {\n    // Simplified OpenAI API call for the example\n    return this.http.post('https://api.openai.com/v1/chat/completions', {\n      model: 'gpt-4',\n      messages: messages.map(msg =&gt; ({\n        role: msg.role,\n        content: msg.content,\n        ...(msg.tool_call_id ? { tool_call_id: msg.tool_call_id } : {})\n      })),\n      tools\n    }, {\n      headers: {\n        'Authorization': `Bearer ${environment.openaiApiKey}`,\n        'Content-Type': 'application/json'\n      }\n    }).toPromise();\n  }\n\n  private async handleResponse(response: any): Promise&lt;void&gt; {\n    if (!response || !response.choices || !response.choices[0].message) {\n      throw new Error('Invalid response format');\n    }\n\n    const assistantMessage = response.choices[0].message;\n    const newAssistantMessage: Message = {\n      id: `assistant-${Date.now()}`,\n      role: 'assistant',\n      content: assistantMessage.content || ''\n    };\n\n    this.messages.push(newAssistantMessage);\n\n    // Check if the assistant wants to call a function\n    if (assistantMessage.tool_calls &amp;&amp; assistantMessage.tool_calls.length &gt; 0) {\n      for (const toolCall of assistantMessage.tool_calls) {\n        // Handle function call through AgentBridge\n        const result = await this.agentBridge.handleMCPFunctionCall(\n          'openai',\n          toolCall\n        );\n\n        // Add function result to messages\n        const functionMessage: Message = {\n          id: `function-${Date.now()}-${Math.random()}`,\n          role: 'tool',\n          tool_call_id: toolCall.id,\n          content: JSON.stringify(result)\n        };\n\n        this.messages.push(functionMessage);\n\n        // Call OpenAI again with the function result\n        const followUpResponse = await this.callOpenAI(this.messages, []);\n        this.handleResponse(followUpResponse);\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"examples/angular-examples/#design-information-collection","title":"Design Information Collection","text":"<p>Example of collecting design information from an Angular application.</p> <pre><code>// design-info.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\nimport { AngularDesignCollector } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-design-info',\n  template: `\n    &lt;div class=\"design-info-container\"&gt;\n      &lt;h2&gt;Design Information Collection&lt;/h2&gt;\n\n      &lt;div *ngIf=\"isCapturing\" class=\"loading\"&gt;\n        Capturing design information...\n      &lt;/div&gt;\n\n      &lt;div *ngIf=\"!isCapturing &amp;&amp; designInfo\" class=\"design-info\"&gt;\n        &lt;h3&gt;Captured Design Information&lt;/h3&gt;\n\n        &lt;div class=\"info-section\"&gt;\n          &lt;h4&gt;App Info:&lt;/h4&gt;\n          &lt;pre&gt;{{designInfo.appInfo | json}}&lt;/pre&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"info-section\"&gt;\n          &lt;h4&gt;Components:&lt;/h4&gt;\n          &lt;p&gt;{{designInfo.components.length}} total components&lt;/p&gt;\n          &lt;p&gt;Types: {{componentTypes}}&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;button\n          (click)=\"captureDesignInfo()\"\n          class=\"capture-button\"\n        &gt;\n          Recapture Design Info\n        &lt;/button&gt;\n      &lt;/div&gt;\n\n      &lt;div *ngIf=\"!isCapturing &amp;&amp; !designInfo\"&gt;\n        No design information captured yet.\n      &lt;/div&gt;\n\n      &lt;!-- Example components to capture --&gt;\n      &lt;div class=\"demo-section\"&gt;\n        &lt;h3&gt;Demo Components&lt;/h3&gt;\n\n        &lt;button\n          id=\"demo-button-primary\"\n          class=\"demo-button primary\"\n        &gt;\n          Primary Button\n        &lt;/button&gt;\n\n        &lt;button\n          id=\"demo-button-secondary\"\n          class=\"demo-button secondary\"\n        &gt;\n          Secondary Button\n        &lt;/button&gt;\n\n        &lt;div class=\"form-group\"&gt;\n          &lt;label for=\"demo-input\"&gt;Text Input&lt;/label&gt;\n          &lt;input\n            id=\"demo-input\"\n            type=\"text\"\n            class=\"demo-input\"\n            placeholder=\"Enter text\"\n          /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styleUrls: ['./design-info.component.css']\n})\nexport class DesignInfoComponent implements OnInit {\n  designInfo: any = null;\n  isCapturing = false;\n\n  constructor(private agentBridge: AgentBridgeService) {}\n\n  ngOnInit(): void {\n    // Capture design info after initial render\n    setTimeout(() =&gt; this.captureDesignInfo(), 100);\n  }\n\n  get componentTypes(): string {\n    if (!this.designInfo || !this.designInfo.components) {\n      return '';\n    }\n\n    const types = new Set(this.designInfo.components.map((c: any) =&gt; c.type));\n    return Array.from(types).join(', ');\n  }\n\n  captureDesignInfo(): void {\n    this.isCapturing = true;\n\n    setTimeout(() =&gt; {\n      // Create a design collector\n      const designCollector = new AngularDesignCollector({\n        captureOptions: {\n          includeStyles: true,\n          includeDisabledComponents: true,\n          includePositions: true,\n          maxDepth: 10,\n        },\n      });\n\n      // Capture design information\n      const info = designCollector.captureDesignInfo();\n\n      // Register with AgentBridge\n      this.agentBridge.registerDesignInfo(info);\n\n      this.designInfo = info;\n      this.isCapturing = false;\n\n      // Register a function to get design info\n      this.agentBridge.registerFunction({\n        name: 'getDesignInfo',\n        description: 'Get information about the UI design and layout',\n        parameters: {\n          type: 'object',\n          properties: {\n            includeDetails: {\n              type: 'boolean',\n              description: 'Whether to include detailed styling information'\n            }\n          }\n        },\n        handler: async (params: any) =&gt; {\n          const { includeDetails = false } = params;\n\n          if (!includeDetails) {\n            // Return simplified version\n            return {\n              appInfo: info.appInfo,\n              componentCount: info.components.length,\n              componentTypes: Array.from(new Set(info.components.map((c: any) =&gt; c.type))),\n              screens: info.screens?.map((s: any) =&gt; s.name) || []\n            };\n          }\n\n          return info;\n        }\n      });\n    }, 100);\n  }\n}\n</code></pre> <p>For more examples of AgentBridge usage in Angular applications, refer to the Angular Components guide and the Web Features overview. </p>"},{"location":"examples/flutter-examples/","title":"Flutter Examples","text":"<p>This page provides practical examples of using AgentBridge in Flutter applications.</p>"},{"location":"examples/flutter-examples/#basic-integration","title":"Basic Integration","text":""},{"location":"examples/flutter-examples/#setting-up-agentbridge","title":"Setting Up AgentBridge","text":"<pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Initialize AgentBridge\n  await AgentBridge.instance.initialize(\n    config: AgentBridgeConfig(\n      appId: 'your-app-id',\n      apiKey: 'your-api-key',\n      environment: 'development',\n      debug: true,\n    ),\n  );\n\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'AgentBridge Example',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: HomeScreen(),\n    );\n  }\n}\n</code></pre>"},{"location":"examples/flutter-examples/#todo-list-example","title":"Todo List Example","text":"<p>A complete example of a todo list application with AgentBridge integration.</p>"},{"location":"examples/flutter-examples/#todo-model","title":"Todo Model","text":"<pre><code>// lib/models/todo.dart\nclass Todo {\n  final String id;\n  final String title;\n  bool completed;\n\n  Todo({\n    required this.id,\n    required this.title,\n    this.completed = false,\n  });\n\n  Map&lt;String, dynamic&gt; toJson() {\n    return {\n      'id': id,\n      'title': title,\n      'completed': completed,\n    };\n  }\n\n  factory Todo.fromJson(Map&lt;String, dynamic&gt; json) {\n    return Todo(\n      id: json['id'],\n      title: json['title'],\n      completed: json['completed'] ?? false,\n    );\n  }\n}\n</code></pre>"},{"location":"examples/flutter-examples/#todo-list-screen","title":"Todo List Screen","text":"<pre><code>// lib/screens/todo_list_screen.dart\nimport 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\nimport '../models/todo.dart';\nimport '../widgets/todo_item.dart';\nimport '../widgets/todo_input.dart';\n\nclass TodoListScreen extends StatefulWidget {\n  @override\n  _TodoListScreenState createState() =&gt; _TodoListScreenState();\n}\n\nclass _TodoListScreenState extends State&lt;TodoListScreen&gt; {\n  final List&lt;Todo&gt; todos = [];\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Register functions with AgentBridge\n    _registerFunctions();\n\n    // Load initial todos\n    _loadTodos();\n  }\n\n  void _registerFunctions() {\n    final agentBridge = AgentBridge.instance;\n\n    // Add todo function\n    agentBridge.registerFunction(\n      name: 'addTodo',\n      description: 'Add a new todo item to the list',\n      parameters: {\n        'type': 'object',\n        'properties': {\n          'title': {\n            'type': 'string',\n            'description': 'Title of the todo item'\n          }\n        },\n        'required': ['title']\n      },\n      handler: (params) async {\n        final title = params['title'];\n\n        if (title == null || title.isEmpty) {\n          return {\n            'success': false,\n            'error': 'Title cannot be empty'\n          };\n        }\n\n        final newTodo = Todo(\n          id: DateTime.now().millisecondsSinceEpoch.toString(),\n          title: title,\n        );\n\n        setState(() {\n          todos.add(newTodo);\n        });\n\n        return {\n          'success': true,\n          'todo': newTodo.toJson()\n        };\n      },\n    );\n\n    // Toggle todo function\n    agentBridge.registerFunction(\n      name: 'toggleTodo',\n      description: 'Toggle the completed status of a todo item',\n      parameters: {\n        'type': 'object',\n        'properties': {\n          'id': {\n            'type': 'string',\n            'description': 'ID of the todo item to toggle'\n          }\n        },\n        'required': ['id']\n      },\n      handler: (params) async {\n        final id = params['id'];\n\n        final todoIndex = todos.indexWhere((todo) =&gt; todo.id == id);\n\n        if (todoIndex == -1) {\n          return {\n            'success': false,\n            'error': 'Todo not found'\n          };\n        }\n\n        setState(() {\n          todos[todoIndex].completed = !todos[todoIndex].completed;\n        });\n\n        return {\n          'success': true,\n          'todo': todos[todoIndex].toJson()\n        };\n      },\n    );\n\n    // Delete todo function\n    agentBridge.registerFunction(\n      name: 'deleteTodo',\n      description: 'Delete a todo item from the list',\n      parameters: {\n        'type': 'object',\n        'properties': {\n          'id': {\n            'type': 'string',\n            'description': 'ID of the todo item to delete'\n          }\n        },\n        'required': ['id']\n      },\n      handler: (params) async {\n        final id = params['id'];\n\n        final todoIndex = todos.indexWhere((todo) =&gt; todo.id == id);\n\n        if (todoIndex == -1) {\n          return {\n            'success': false,\n            'error': 'Todo not found'\n          };\n        }\n\n        setState(() {\n          todos.removeAt(todoIndex);\n        });\n\n        return {\n          'success': true\n        };\n      },\n    );\n\n    // Get todos function\n    agentBridge.registerFunction(\n      name: 'getTodos',\n      description: 'Get all todo items',\n      parameters: {\n        'type': 'object',\n        'properties': {}\n      },\n      handler: (params) async {\n        return {\n          'success': true,\n          'todos': todos.map((todo) =&gt; todo.toJson()).toList()\n        };\n      },\n    );\n  }\n\n  void _loadTodos() {\n    // Load initial todos (from API, local storage, etc.)\n    setState(() {\n      todos.add(Todo(\n        id: '1',\n        title: 'Learn AgentBridge',\n        completed: false,\n      ));\n      todos.add(Todo(\n        id: '2',\n        title: 'Build a Flutter app',\n        completed: true,\n      ));\n    });\n  }\n\n  void _addTodo(String title) {\n    setState(() {\n      todos.add(Todo(\n        id: DateTime.now().millisecondsSinceEpoch.toString(),\n        title: title,\n      ));\n    });\n  }\n\n  void _toggleTodo(String id) {\n    setState(() {\n      final todo = todos.firstWhere((todo) =&gt; todo.id == id);\n      todo.completed = !todo.completed;\n    });\n  }\n\n  void _deleteTodo(String id) {\n    setState(() {\n      todos.removeWhere((todo) =&gt; todo.id == id);\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Todo List'),\n      ),\n      body: Column(\n        children: [\n          TodoInput(\n            onAddTodo: _addTodo,\n          ),\n          Expanded(\n            child: ListView.builder(\n              itemCount: todos.length,\n              itemBuilder: (context, index) {\n                final todo = todos[index];\n                return TodoItem(\n                  todo: todo,\n                  onToggle: () =&gt; _toggleTodo(todo.id),\n                  onDelete: () =&gt; _deleteTodo(todo.id),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"examples/flutter-examples/#todo-item-widget","title":"Todo Item Widget","text":"<pre><code>// lib/widgets/todo_item.dart\nimport 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\nimport '../models/todo.dart';\n\nclass TodoItem extends StatelessWidget with AgentComponentMixin {\n  final Todo todo;\n  final VoidCallback onToggle;\n  final VoidCallback onDelete;\n\n  TodoItem({\n    Key? key,\n    required this.todo,\n    required this.onToggle,\n    required this.onDelete,\n  }) : super(key: key);\n\n  @override\n  ComponentDefinition getComponentDefinition() {\n    return ComponentDefinition(\n      id: 'todo-${todo.id}',\n      type: 'todo-item',\n      properties: {\n        'id': todo.id,\n        'title': todo.title,\n        'completed': todo.completed,\n      },\n      actions: ['toggle', 'delete'],\n      metadata: {\n        'importance': 'medium',\n        'description': 'A todo item that can be toggled or deleted',\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      leading: AgentCheckbox(\n        id: 'checkbox-${todo.id}',\n        value: todo.completed,\n        onChanged: (_) =&gt; onToggle(),\n      ),\n      title: Text(\n        todo.title,\n        style: TextStyle(\n          decoration: todo.completed ? TextDecoration.lineThrough : null,\n        ),\n      ),\n      trailing: AgentButton(\n        id: 'delete-${todo.id}',\n        icon: Icons.delete,\n        label: 'Delete',\n        onPressed: onDelete,\n        style: AgentButtonStyle(\n          backgroundColor: Colors.red[100],\n          textColor: Colors.red[900],\n          padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"examples/flutter-examples/#todo-input-widget","title":"Todo Input Widget","text":"<pre><code>// lib/widgets/todo_input.dart\nimport 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass TodoInput extends StatefulWidget with AgentComponentMixin {\n  final Function(String) onAddTodo;\n\n  TodoInput({\n    Key? key,\n    required this.onAddTodo,\n  }) : super(key: key);\n\n  @override\n  ComponentDefinition getComponentDefinition() {\n    return ComponentDefinition(\n      id: 'todo-input',\n      type: 'input-form',\n      properties: {\n        'placeholder': 'Add a new todo',\n      },\n      actions: ['submit'],\n      metadata: {\n        'importance': 'high',\n        'description': 'Form for adding new todo items',\n      },\n    );\n  }\n\n  @override\n  _TodoInputState createState() =&gt; _TodoInputState();\n}\n\nclass _TodoInputState extends State&lt;TodoInput&gt; {\n  final _controller = TextEditingController();\n\n  void _submitTodo() {\n    final title = _controller.text.trim();\n    if (title.isNotEmpty) {\n      widget.onAddTodo(title);\n      _controller.clear();\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: EdgeInsets.all(16.0),\n      child: Row(\n        children: [\n          Expanded(\n            child: AgentTextField(\n              id: 'todo-title-input',\n              controller: _controller,\n              label: 'New Todo',\n              placeholder: 'Enter a task',\n              onSubmitted: (_) =&gt; _submitTodo(),\n            ),\n          ),\n          SizedBox(width: 16.0),\n          AgentButton(\n            id: 'add-todo-button',\n            label: 'Add',\n            icon: Icons.add,\n            onPressed: _submitTodo,\n            style: AgentButtonStyle(\n              backgroundColor: Colors.blue,\n              textColor: Colors.white,\n              borderRadius: 8.0,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"examples/flutter-examples/#using-mcp-adapters","title":"Using MCP Adapters","text":"<p>A complete example of integrating MCP adapters in a Flutter application.</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\nimport 'package:dio/dio.dart';\n\nclass MCPExampleScreen extends StatefulWidget {\n  @override\n  _MCPExampleScreenState createState() =&gt; _MCPExampleScreenState();\n}\n\nclass _MCPExampleScreenState extends State&lt;MCPExampleScreen&gt; {\n  final _openaiKey = 'your-openai-api-key';\n  final _chatController = TextEditingController();\n  final List&lt;Map&lt;String, dynamic&gt;&gt; _messages = [];\n  bool _isLoading = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _setupAgentBridge();\n  }\n\n  void _setupAgentBridge() {\n    final agentBridge = AgentBridge.instance;\n\n    // Register OpenAI MCP adapter\n    agentBridge.registerMCPAdapter(\n      'openai',\n      OpenAIMCPAdapter(agentBridge.registry),\n    );\n\n    // Register a simple function\n    agentBridge.registerFunction(\n      name: 'getWeather',\n      description: 'Get the current weather for a location',\n      parameters: {\n        'type': 'object',\n        'properties': {\n          'location': {\n            'type': 'string',\n            'description': 'The city and state, e.g. San Francisco, CA'\n          }\n        },\n        'required': ['location']\n      },\n      handler: (params) async {\n        // In a real app, this would call a weather API\n        final location = params['location'];\n        return {\n          'location': location,\n          'temperature': 72,\n          'conditions': 'sunny',\n          'humidity': 45,\n          'windSpeed': 8\n        };\n      },\n    );\n  }\n\n  Future&lt;void&gt; _sendMessage() async {\n    final message = _chatController.text.trim();\n    if (message.isEmpty) return;\n\n    setState(() {\n      _messages.add({\n        'role': 'user',\n        'content': message,\n      });\n      _isLoading = true;\n      _chatController.clear();\n    });\n\n    try {\n      // Get OpenAI schema from AgentBridge\n      final schema = AgentBridge.instance.getMCPSchema('openai');\n\n      // Call OpenAI API with the schema\n      final dio = Dio();\n      final response = await dio.post(\n        'https://api.openai.com/v1/chat/completions',\n        options: Options(\n          headers: {\n            'Authorization': 'Bearer $_openaiKey',\n            'Content-Type': 'application/json',\n          },\n        ),\n        data: {\n          'model': 'gpt-4',\n          'messages': _messages,\n          'tools': schema['functions'],\n        },\n      );\n\n      final assistantMessage = response.data['choices'][0]['message'];\n      setState(() {\n        _messages.add(assistantMessage);\n      });\n\n      // Check if the assistant wants to call a function\n      if (assistantMessage['tool_calls'] != null) {\n        for (final toolCall in assistantMessage['tool_calls']) {\n          // Handle function call through AgentBridge\n          final result = await AgentBridge.instance.handleMCPFunctionCall(\n            'openai',\n            toolCall,\n          );\n\n          // Add function result to messages\n          setState(() {\n            _messages.add({\n              'role': 'tool',\n              'tool_call_id': toolCall['id'],\n              'content': json.encode(result),\n            });\n          });\n        }\n\n        // Get a follow-up response after function call\n        final followUpResponse = await dio.post(\n          'https://api.openai.com/v1/chat/completions',\n          options: Options(\n            headers: {\n              'Authorization': 'Bearer $_openaiKey',\n              'Content-Type': 'application/json',\n            },\n          ),\n          data: {\n            'model': 'gpt-4',\n            'messages': _messages,\n          },\n        );\n\n        final followUpMessage = followUpResponse.data['choices'][0]['message'];\n        setState(() {\n          _messages.add(followUpMessage);\n        });\n      }\n    } catch (e) {\n      print('Error: $e');\n      setState(() {\n        _messages.add({\n          'role': 'assistant',\n          'content': 'Sorry, I encountered an error. Please try again.',\n        });\n      });\n    } finally {\n      setState(() {\n        _isLoading = false;\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('MCP Example'),\n      ),\n      body: Column(\n        children: [\n          Expanded(\n            child: ListView.builder(\n              padding: EdgeInsets.all(16.0),\n              itemCount: _messages.length,\n              itemBuilder: (context, index) {\n                final message = _messages[index];\n                final isUser = message['role'] == 'user';\n\n                return Align(\n                  alignment: isUser\n                    ? Alignment.centerRight\n                    : Alignment.centerLeft,\n                  child: Container(\n                    margin: EdgeInsets.only(\n                      bottom: 8.0,\n                      left: isUser ? 64.0 : 0.0,\n                      right: isUser ? 0.0 : 64.0,\n                    ),\n                    padding: EdgeInsets.all(12.0),\n                    decoration: BoxDecoration(\n                      color: isUser ? Colors.blue : Colors.grey[200],\n                      borderRadius: BorderRadius.circular(16.0),\n                    ),\n                    child: Text(\n                      message['content'],\n                      style: TextStyle(\n                        color: isUser ? Colors.white : Colors.black,\n                      ),\n                    ),\n                  ),\n                );\n              },\n            ),\n          ),\n          if (_isLoading)\n            Padding(\n              padding: EdgeInsets.all(16.0),\n              child: CircularProgressIndicator(),\n            ),\n          Padding(\n            padding: EdgeInsets.all(16.0),\n            child: Row(\n              children: [\n                Expanded(\n                  child: AgentTextField(\n                    id: 'chat-input',\n                    controller: _chatController,\n                    placeholder: 'Type a message',\n                    onSubmitted: (_) =&gt; _sendMessage(),\n                  ),\n                ),\n                SizedBox(width: 8.0),\n                AgentButton(\n                  id: 'send-button',\n                  icon: Icons.send,\n                  label: 'Send',\n                  onPressed: _sendMessage,\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"examples/flutter-examples/#design-information-collection","title":"Design Information Collection","text":"<p>Example of collecting design information from a Flutter application.</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass DesignInfoExample extends StatefulWidget {\n  @override\n  _DesignInfoExampleState createState() =&gt; _DesignInfoExampleState();\n}\n\nclass _DesignInfoExampleState extends State&lt;DesignInfoExample&gt; {\n  final _designCollector = FlutterDesignCollector(\n    captureOptions: CaptureOptions(\n      includeStyles: true,\n      includeDisabledComponents: true,\n      includePositions: true,\n      maxDepth: 10,\n    ),\n  );\n  bool _isCapturing = false;\n  Map&lt;String, dynamic&gt;? _designInfo;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Set up post-frame callback to capture design info after first render\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      _captureDesignInfo();\n    });\n  }\n\n  void _captureDesignInfo() {\n    setState(() {\n      _isCapturing = true;\n    });\n\n    // Capture design information\n    final designInfo = _designCollector.captureDesignInfo(context);\n\n    // Register with AgentBridge\n    AgentBridge.instance.registerDesignInfo(designInfo);\n\n    setState(() {\n      _designInfo = designInfo;\n      _isCapturing = false;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Design Info Example'),\n      ),\n      body: _isCapturing\n        ? Center(child: CircularProgressIndicator())\n        : _designInfo == null\n          ? Center(child: Text('No design info captured yet'))\n          : SingleChildScrollView(\n              padding: EdgeInsets.all(16.0),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    'Captured Design Information',\n                    style: Theme.of(context).textTheme.headlineSmall,\n                  ),\n                  SizedBox(height: 16.0),\n                  Text(\n                    'App Info:',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  SizedBox(height: 8.0),\n                  Text(\n                    _designInfo!['appInfo'].toString(),\n                  ),\n                  SizedBox(height: 16.0),\n                  Text(\n                    'Components:',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  SizedBox(height: 8.0),\n                  Text(\n                    'Total components: ${_designInfo!['components'].length}',\n                  ),\n                  SizedBox(height: 16.0),\n                  AgentButton(\n                    id: 'refresh-design-info',\n                    label: 'Refresh Design Info',\n                    onPressed: _captureDesignInfo,\n                  ),\n                ],\n              ),\n            ),\n    );\n  }\n}\n</code></pre> <p>For more examples of AgentBridge usage in Flutter applications, refer to the Flutter Components guide and the Mobile Features overview. </p>"},{"location":"examples/react-examples/","title":"React Examples","text":"<p>This page provides practical examples of using AgentBridge in React applications.</p>"},{"location":"examples/react-examples/#basic-integration","title":"Basic Integration","text":""},{"location":"examples/react-examples/#setting-up-agentbridge","title":"Setting Up AgentBridge","text":"<pre><code>// App.jsx\nimport React, { useEffect } from 'react';\nimport { AgentBridgeProvider } from '@agentbridge/react';\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider\n      config={{\n        appId: 'your-app-id',\n        apiKey: 'your-api-key',\n        environment: 'development',\n        debug: true,\n      }}\n    &gt;\n      &lt;MainContent /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nfunction MainContent() {\n  // Your application content\n  return (\n    &lt;div className=\"app-container\"&gt;\n      &lt;h1&gt;AgentBridge React Example&lt;/h1&gt;\n      {/* Your components here */}\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"examples/react-examples/#todo-list-example","title":"Todo List Example","text":"<p>A complete example of a todo list application with AgentBridge integration.</p>"},{"location":"examples/react-examples/#components-directory-structure","title":"Components Directory Structure","text":"<pre><code>/components\n  /todo\n    TodoInput.jsx\n    TodoItem.jsx\n    TodoList.jsx\n</code></pre>"},{"location":"examples/react-examples/#todo-input-component","title":"Todo Input Component","text":"<pre><code>// components/todo/TodoInput.jsx\nimport React, { useState } from 'react';\nimport { useAgentComponent } from '@agentbridge/react';\n\nfunction TodoInput({ onAddTodo }) {\n  const [text, setText] = useState('');\n\n  // Register component with AgentBridge\n  useAgentComponent('todo-input', {\n    type: 'input-form',\n    properties: {\n      placeholder: 'Add a new todo',\n      value: text\n    },\n    actions: ['submit']\n  });\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    if (text.trim()) {\n      onAddTodo(text.trim());\n      setText('');\n    }\n  };\n\n  return (\n    &lt;form className=\"todo-input\" onSubmit={handleSubmit}&gt;\n      &lt;input\n        type=\"text\"\n        value={text}\n        onChange={(e) =&gt; setText(e.target.value)}\n        placeholder=\"What needs to be done?\"\n        className=\"todo-text-input\"\n        data-testid=\"todo-input\"\n      /&gt;\n      &lt;button type=\"submit\" className=\"todo-add-button\"&gt;\n        Add\n      &lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default TodoInput;\n</code></pre>"},{"location":"examples/react-examples/#todo-item-component","title":"Todo Item Component","text":"<pre><code>// components/todo/TodoItem.jsx\nimport React from 'react';\nimport { useAgentComponent } from '@agentbridge/react';\n\nfunction TodoItem({ todo, onToggle, onDelete }) {\n  // Register component with AgentBridge\n  useAgentComponent(`todo-${todo.id}`, {\n    type: 'todo-item',\n    properties: {\n      id: todo.id,\n      title: todo.title,\n      completed: todo.completed,\n    },\n    actions: ['toggle', 'delete'],\n    metadata: {\n      importance: 'medium',\n      description: 'A todo item that can be toggled or deleted',\n    },\n  });\n\n  return (\n    &lt;div className={`todo-item ${todo.completed ? 'completed' : ''}`}&gt;\n      &lt;input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={() =&gt; onToggle(todo.id)}\n        className=\"todo-checkbox\"\n        data-testid={`todo-checkbox-${todo.id}`}\n      /&gt;\n      &lt;span className=\"todo-title\"&gt;{todo.title}&lt;/span&gt;\n      &lt;button\n        onClick={() =&gt; onDelete(todo.id)}\n        className=\"todo-delete-button\"\n        data-testid={`todo-delete-${todo.id}`}\n      &gt;\n        Delete\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default TodoItem;\n</code></pre>"},{"location":"examples/react-examples/#todo-list-component","title":"Todo List Component","text":"<pre><code>// components/todo/TodoList.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useAgentBridge, useAgentComponent } from '@agentbridge/react';\nimport TodoItem from './TodoItem';\nimport TodoInput from './TodoInput';\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([\n    { id: '1', title: 'Learn AgentBridge', completed: false },\n    { id: '2', title: 'Build a React app', completed: true },\n  ]);\n\n  const agentBridge = useAgentBridge();\n\n  // Register component with AgentBridge\n  useAgentComponent('todo-list', {\n    type: 'list',\n    properties: {\n      itemCount: todos.length,\n      completedCount: todos.filter(todo =&gt; todo.completed).length,\n    },\n    actions: ['clearCompleted'],\n    metadata: {\n      importance: 'high',\n      description: 'A list of todo items',\n    },\n  });\n\n  useEffect(() =&gt; {\n    // Register functions with AgentBridge\n    agentBridge.registerFunction({\n      name: 'addTodo',\n      description: 'Add a new todo item to the list',\n      parameters: {\n        type: 'object',\n        properties: {\n          title: {\n            type: 'string',\n            description: 'Title of the todo item',\n          },\n        },\n        required: ['title'],\n      },\n      handler: async (params) =&gt; {\n        const { title } = params;\n\n        if (!title || !title.trim()) {\n          return {\n            success: false,\n            error: 'Title cannot be empty',\n          };\n        }\n\n        const newTodo = {\n          id: Date.now().toString(),\n          title: title.trim(),\n          completed: false,\n        };\n\n        setTodos(currentTodos =&gt; [...currentTodos, newTodo]);\n\n        return {\n          success: true,\n          todo: newTodo,\n        };\n      },\n    });\n\n    agentBridge.registerFunction({\n      name: 'toggleTodo',\n      description: 'Toggle the completed status of a todo item',\n      parameters: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'ID of the todo item to toggle',\n          },\n        },\n        required: ['id'],\n      },\n      handler: async (params) =&gt; {\n        const { id } = params;\n\n        let updatedTodo = null;\n\n        setTodos(currentTodos =&gt; {\n          const updatedTodos = currentTodos.map(todo =&gt; {\n            if (todo.id === id) {\n              updatedTodo = { ...todo, completed: !todo.completed };\n              return updatedTodo;\n            }\n            return todo;\n          });\n\n          return updatedTodos;\n        });\n\n        if (!updatedTodo) {\n          return {\n            success: false,\n            error: 'Todo not found',\n          };\n        }\n\n        return {\n          success: true,\n          todo: updatedTodo,\n        };\n      },\n    });\n\n    agentBridge.registerFunction({\n      name: 'deleteTodo',\n      description: 'Delete a todo item from the list',\n      parameters: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'ID of the todo item to delete',\n          },\n        },\n        required: ['id'],\n      },\n      handler: async (params) =&gt; {\n        const { id } = params;\n\n        const todoExists = todos.some(todo =&gt; todo.id === id);\n\n        if (!todoExists) {\n          return {\n            success: false,\n            error: 'Todo not found',\n          };\n        }\n\n        setTodos(currentTodos =&gt; currentTodos.filter(todo =&gt; todo.id !== id));\n\n        return {\n          success: true,\n        };\n      },\n    });\n\n    agentBridge.registerFunction({\n      name: 'getTodos',\n      description: 'Get all todo items',\n      parameters: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async () =&gt; {\n        return {\n          success: true,\n          todos,\n        };\n      },\n    });\n\n    agentBridge.registerFunction({\n      name: 'clearCompletedTodos',\n      description: 'Clear all completed todo items',\n      parameters: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async () =&gt; {\n        const completedCount = todos.filter(todo =&gt; todo.completed).length;\n\n        if (completedCount === 0) {\n          return {\n            success: false,\n            error: 'No completed todos to clear',\n          };\n        }\n\n        setTodos(currentTodos =&gt; currentTodos.filter(todo =&gt; !todo.completed));\n\n        return {\n          success: true,\n          clearedCount: completedCount,\n        };\n      },\n    });\n\n    return () =&gt; {\n      // Cleanup when component unmounts\n      agentBridge.unregisterFunction('addTodo');\n      agentBridge.unregisterFunction('toggleTodo');\n      agentBridge.unregisterFunction('deleteTodo');\n      agentBridge.unregisterFunction('getTodos');\n      agentBridge.unregisterFunction('clearCompletedTodos');\n    };\n  }, [todos, agentBridge]);\n\n  const handleAddTodo = (title) =&gt; {\n    const newTodo = {\n      id: Date.now().toString(),\n      title,\n      completed: false,\n    };\n    setTodos([...todos, newTodo]);\n  };\n\n  const handleToggleTodo = (id) =&gt; {\n    setTodos(todos.map(todo =&gt;\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const handleDeleteTodo = (id) =&gt; {\n    setTodos(todos.filter(todo =&gt; todo.id !== id));\n  };\n\n  const handleClearCompleted = () =&gt; {\n    setTodos(todos.filter(todo =&gt; !todo.completed));\n  };\n\n  return (\n    &lt;div className=\"todo-list-container\"&gt;\n      &lt;h2&gt;Todo List&lt;/h2&gt;\n      &lt;TodoInput onAddTodo={handleAddTodo} /&gt;\n      &lt;div className=\"todo-items\"&gt;\n        {todos.map(todo =&gt; (\n          &lt;TodoItem\n            key={todo.id}\n            todo={todo}\n            onToggle={handleToggleTodo}\n            onDelete={handleDeleteTodo}\n          /&gt;\n        ))}\n      &lt;/div&gt;\n      &lt;div className=\"todo-footer\"&gt;\n        &lt;span className=\"todo-count\"&gt;\n          {todos.filter(todo =&gt; !todo.completed).length} items left\n        &lt;/span&gt;\n        &lt;button\n          onClick={handleClearCompleted}\n          className=\"clear-completed-button\"\n          disabled={!todos.some(todo =&gt; todo.completed)}\n        &gt;\n          Clear completed\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default TodoList;\n</code></pre>"},{"location":"examples/react-examples/#using-mcp-adapters","title":"Using MCP Adapters","text":"<p>A complete example of integrating MCP adapters in a React application.</p> <pre><code>// MCPChatComponent.jsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useAgentBridge } from '@agentbridge/react';\nimport { OpenAIMCPAdapter } from '@agentbridge/mcp-openai';\nimport axios from 'axios';\n\nfunction MCPChatComponent() {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const agentBridge = useAgentBridge();\n\n  useEffect(() =&gt; {\n    // Set up AgentBridge with MCP adapter\n    setupAgentBridge();\n\n    // Add initial welcome message\n    setMessages([\n      {\n        id: 'welcome',\n        role: 'assistant',\n        content: 'Hello! I can help you with weather information. Try asking about the weather in a city.',\n      },\n    ]);\n\n    return () =&gt; {\n      // Cleanup\n      agentBridge.unregisterFunction('getWeather');\n    };\n  }, [agentBridge]);\n\n  useEffect(() =&gt; {\n    // Scroll to bottom when messages change\n    scrollToBottom();\n  }, [messages]);\n\n  const setupAgentBridge = () =&gt; {\n    // Register OpenAI MCP adapter\n    agentBridge.registerMCPAdapter(\n      'openai',\n      new OpenAIMCPAdapter(agentBridge.registry)\n    );\n\n    // Register weather function\n    agentBridge.registerFunction({\n      name: 'getWeather',\n      description: 'Get the current weather for a location',\n      parameters: {\n        type: 'object',\n        properties: {\n          location: {\n            type: 'string',\n            description: 'The city and state, e.g. San Francisco, CA',\n          },\n        },\n        required: ['location'],\n      },\n      handler: async (params) =&gt; {\n        // In a real app, this would call a weather API\n        const { location } = params;\n\n        // Simulate API delay\n        await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n        // Return mock weather data\n        return {\n          location,\n          temperature: 72,\n          conditions: 'sunny',\n          humidity: 45,\n          windSpeed: 8,\n        };\n      },\n    });\n  };\n\n  const scrollToBottom = () =&gt; {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const sendMessage = async () =&gt; {\n    if (!inputText.trim()) return;\n\n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: inputText,\n    };\n\n    setMessages(prevMessages =&gt; [...prevMessages, userMessage]);\n    setInputText('');\n    setIsLoading(true);\n\n    try {\n      // Get OpenAI schema from AgentBridge\n      const schema = agentBridge.getMCPSchema('openai');\n\n      // Prepare the messages in OpenAI format\n      const apiMessages = messages.concat(userMessage).map(msg =&gt; ({\n        role: msg.role,\n        content: msg.content,\n        ...(msg.tool_call_id ? { tool_call_id: msg.tool_call_id } : {}),\n      }));\n\n      // Call OpenAI API\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-4',\n          messages: apiMessages,\n          tools: schema.functions,\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const assistantMessage = response.data.choices[0].message;\n      const newAssistantMessage = {\n        id: `assistant-${Date.now()}`,\n        ...assistantMessage,\n      };\n\n      setMessages(prevMessages =&gt; [...prevMessages, newAssistantMessage]);\n\n      // Check if the assistant wants to call a function\n      if (assistantMessage.tool_calls &amp;&amp; assistantMessage.tool_calls.length &gt; 0) {\n        for (const toolCall of assistantMessage.tool_calls) {\n          // Handle function call through AgentBridge\n          const result = await agentBridge.handleMCPFunctionCall(\n            'openai',\n            toolCall\n          );\n\n          // Add function result to messages\n          const functionMessage = {\n            id: `function-${Date.now()}-${Math.random()}`,\n            role: 'tool',\n            tool_call_id: toolCall.id,\n            content: JSON.stringify(result),\n          };\n\n          setMessages(prevMessages =&gt; [...prevMessages, functionMessage]);\n\n          // Get a follow-up response from OpenAI\n          const updatedMessages = [\n            ...apiMessages, \n            newAssistantMessage, \n            functionMessage\n          ];\n\n          const followUpResponse = await axios.post(\n            'https://api.openai.com/v1/chat/completions',\n            {\n              model: 'gpt-4',\n              messages: updatedMessages,\n            },\n            {\n              headers: {\n                'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n                'Content-Type': 'application/json',\n              },\n            }\n          );\n\n          const followUpMessage = followUpResponse.data.choices[0].message;\n          setMessages(prevMessages =&gt; [\n            ...prevMessages, \n            {\n              id: `assistant-followup-${Date.now()}`,\n              ...followUpMessage,\n            }\n          ]);\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      setMessages(prevMessages =&gt; [\n        ...prevMessages,\n        {\n          id: `error-${Date.now()}`,\n          role: 'assistant',\n          content: 'Sorry, I encountered an error. Please try again.',\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyDown = (e) =&gt; {\n    if (e.key === 'Enter' &amp;&amp; !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    &lt;div className=\"chat-container\"&gt;\n      &lt;div className=\"chat-messages\"&gt;\n        {messages.map(message =&gt; (\n          &lt;div\n            key={message.id}\n            className={`message ${message.role === 'user' ? 'user-message' : 'assistant-message'}`}\n          &gt;\n            &lt;div className=\"message-content\"&gt;{message.content}&lt;/div&gt;\n          &lt;/div&gt;\n        ))}\n        {isLoading &amp;&amp; (\n          &lt;div className=\"message assistant-message\"&gt;\n            &lt;div className=\"message-content\"&gt;\n              &lt;div className=\"typing-indicator\"&gt;\n                &lt;span&gt;&lt;/span&gt;\n                &lt;span&gt;&lt;/span&gt;\n                &lt;span&gt;&lt;/span&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        )}\n        &lt;div ref={messagesEndRef} /&gt;\n      &lt;/div&gt;\n      &lt;div className=\"chat-input-container\"&gt;\n        &lt;textarea\n          value={inputText}\n          onChange={(e) =&gt; setInputText(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Type a message...\"\n          className=\"chat-input\"\n          disabled={isLoading}\n        /&gt;\n        &lt;button\n          onClick={sendMessage}\n          className=\"send-button\"\n          disabled={isLoading || !inputText.trim()}\n        &gt;\n          Send\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default MCPChatComponent;\n</code></pre>"},{"location":"examples/react-examples/#design-information-collection","title":"Design Information Collection","text":"<p>Example of collecting design information from a React application.</p> <pre><code>// DesignInfoCollector.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useAgentBridge } from '@agentbridge/react';\nimport { ReactDesignCollector } from '@agentbridge/react';\n\nfunction DesignInfoCollector() {\n  const [designInfo, setDesignInfo] = useState(null);\n  const [isCapturing, setIsCapturing] = useState(false);\n  const agentBridge = useAgentBridge();\n\n  useEffect(() =&gt; {\n    // Capture design info after initial render\n    captureDesignInfo();\n  }, []);\n\n  const captureDesignInfo = () =&gt; {\n    setIsCapturing(true);\n\n    setTimeout(() =&gt; {\n      // Create a design collector\n      const designCollector = new ReactDesignCollector({\n        captureOptions: {\n          includeStyles: true,\n          includeDisabledComponents: true,\n          includePositions: true,\n          maxDepth: 10,\n        },\n      });\n\n      // Capture design information\n      const info = designCollector.captureDesignInfo();\n\n      // Register with AgentBridge\n      agentBridge.registerDesignInfo(info);\n\n      setDesignInfo(info);\n      setIsCapturing(false);\n\n      // Register a function to get design info\n      agentBridge.registerFunction({\n        name: 'getDesignInfo',\n        description: 'Get information about the UI design and layout',\n        parameters: {\n          type: 'object',\n          properties: {\n            includeDetails: {\n              type: 'boolean',\n              description: 'Whether to include detailed styling information'\n            }\n          }\n        },\n        handler: async (params) =&gt; {\n          const { includeDetails = false } = params;\n\n          if (!includeDetails) {\n            // Return simplified version\n            return {\n              appInfo: info.appInfo,\n              componentCount: info.components.length,\n              componentTypes: [...new Set(info.components.map(c =&gt; c.type))],\n              screens: info.screens?.map(s =&gt; s.name) || []\n            };\n          }\n\n          return info;\n        }\n      });\n    }, 100); // Small delay to ensure components are rendered\n  };\n\n  return (\n    &lt;div className=\"design-info-container\"&gt;\n      &lt;h2&gt;Design Information Collection&lt;/h2&gt;\n\n      {isCapturing ? (\n        &lt;div className=\"loading\"&gt;Capturing design information...&lt;/div&gt;\n      ) : designInfo ? (\n        &lt;div className=\"design-info\"&gt;\n          &lt;h3&gt;Captured Design Information&lt;/h3&gt;\n\n          &lt;div className=\"info-section\"&gt;\n            &lt;h4&gt;App Info:&lt;/h4&gt;\n            &lt;pre&gt;\n              {JSON.stringify(designInfo.appInfo, null, 2)}\n            &lt;/pre&gt;\n          &lt;/div&gt;\n\n          &lt;div className=\"info-section\"&gt;\n            &lt;h4&gt;Components:&lt;/h4&gt;\n            &lt;p&gt;{designInfo.components.length} total components&lt;/p&gt;\n            &lt;p&gt;Types: {[...new Set(designInfo.components.map(c =&gt; c.type))].join(', ')}&lt;/p&gt;\n          &lt;/div&gt;\n\n          &lt;button\n            onClick={captureDesignInfo}\n            className=\"capture-button\"\n          &gt;\n            Recapture Design Info\n          &lt;/button&gt;\n        &lt;/div&gt;\n      ) : (\n        &lt;div&gt;No design information captured yet.&lt;/div&gt;\n      )}\n\n      {/* Example components to capture */}\n      &lt;div className=\"demo-section\"&gt;\n        &lt;h3&gt;Demo Components&lt;/h3&gt;\n\n        &lt;button\n          id=\"demo-button-primary\"\n          className=\"demo-button primary\"\n          onClick={() =&gt; {}}\n        &gt;\n          Primary Button\n        &lt;/button&gt;\n\n        &lt;button\n          id=\"demo-button-secondary\"\n          className=\"demo-button secondary\"\n          onClick={() =&gt; {}}\n        &gt;\n          Secondary Button\n        &lt;/button&gt;\n\n        &lt;div className=\"form-group\"&gt;\n          &lt;label htmlFor=\"demo-input\"&gt;Text Input&lt;/label&gt;\n          &lt;input\n            id=\"demo-input\"\n            type=\"text\"\n            className=\"demo-input\"\n            placeholder=\"Enter text\"\n          /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default DesignInfoCollector;\n</code></pre>"},{"location":"examples/react-examples/#using-react-hooks-for-state-management","title":"Using React Hooks for State Management","text":"<p>Example of using the <code>useAgentState</code> hook for state management.</p> <pre><code>// Counter.jsx\nimport React from 'react';\nimport { useAgentState, useAgentAction } from '@agentbridge/react';\n\nfunction Counter() {\n  // Create state that's registered with AgentBridge\n  const [count, setCount] = useAgentState('counter', 0, {\n    type: 'counter',\n    properties: {\n      value: 0,\n      min: 0,\n      max: 100,\n    },\n    actions: ['increment', 'decrement', 'reset'],\n  });\n\n  // Register increment action\n  const increment = useAgentAction(\n    'increment-counter',\n    () =&gt; {\n      setCount(prev =&gt; Math.min(prev + 1, 100));\n      return { success: true, newValue: count + 1 };\n    },\n    {\n      description: 'Increment the counter by 1',\n      parameters: {},\n    }\n  );\n\n  // Register decrement action\n  const decrement = useAgentAction(\n    'decrement-counter',\n    () =&gt; {\n      setCount(prev =&gt; Math.max(prev - 1, 0));\n      return { success: true, newValue: count - 1 };\n    },\n    {\n      description: 'Decrement the counter by 1',\n      parameters: {},\n    }\n  );\n\n  // Register reset action\n  const reset = useAgentAction(\n    'reset-counter',\n    () =&gt; {\n      setCount(0);\n      return { success: true, newValue: 0 };\n    },\n    {\n      description: 'Reset the counter to 0',\n      parameters: {},\n    }\n  );\n\n  return (\n    &lt;div className=\"counter-container\"&gt;\n      &lt;h2&gt;Counter Example&lt;/h2&gt;\n      &lt;div className=\"counter-display\"&gt;{count}&lt;/div&gt;\n      &lt;div className=\"counter-controls\"&gt;\n        &lt;button\n          onClick={decrement}\n          disabled={count &lt;= 0}\n          className=\"counter-button decrement\"\n        &gt;\n          -\n        &lt;/button&gt;\n        &lt;button\n          onClick={reset}\n          className=\"counter-button reset\"\n        &gt;\n          Reset\n        &lt;/button&gt;\n        &lt;button\n          onClick={increment}\n          disabled={count &gt;= 100}\n          className=\"counter-button increment\"\n        &gt;\n          +\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre> <p>For more examples of AgentBridge usage in React applications, refer to the React Components guide and the Web Features overview. </p>"},{"location":"examples/react-native-examples/","title":"React Native Examples","text":"<p>This page provides practical examples of using AgentBridge in React Native applications.</p>"},{"location":"examples/react-native-examples/#basic-integration","title":"Basic Integration","text":""},{"location":"examples/react-native-examples/#setting-up-agentbridge","title":"Setting Up AgentBridge","text":"<pre><code>// App.js\nimport React, { useEffect } from 'react';\nimport { SafeAreaView, StatusBar, View, Text } from 'react-native';\nimport { AgentBridge } from '@agentbridge/react-native';\n\nfunction App() {\n  useEffect(() =&gt; {\n    // Initialize AgentBridge\n    AgentBridge.initialize({\n      appId: 'your-app-id',\n      apiKey: 'your-api-key',\n      environment: 'development',\n      debug: true,\n    });\n\n    // Register a simple function\n    AgentBridge.registerFunction({\n      name: 'greet',\n      description: 'Send a greeting to the user',\n      parameters: {\n        type: 'object',\n        properties: {\n          name: {\n            type: 'string',\n            description: 'Name of the person to greet'\n          }\n        },\n        required: ['name']\n      },\n      handler: async (params) =&gt; {\n        console.log(`Hello, ${params.name}!`);\n        return { message: `Hello, ${params.name}!` };\n      }\n    });\n\n    return () =&gt; {\n      // Cleanup when component unmounts\n      AgentBridge.cleanup();\n    };\n  }, []);\n\n  return (\n    &lt;SafeAreaView style={{ flex: 1 }}&gt;\n      &lt;StatusBar barStyle=\"dark-content\" /&gt;\n      &lt;View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}&gt;\n        &lt;Text&gt;Welcome to AgentBridge React Native!&lt;/Text&gt;\n      &lt;/View&gt;\n    &lt;/SafeAreaView&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"examples/react-native-examples/#todo-list-example","title":"Todo List Example","text":"<p>A complete example of a todo list application with AgentBridge integration.</p>"},{"location":"examples/react-native-examples/#components-directory-structure","title":"Components Directory Structure","text":"<pre><code>/components\n  /todo\n    TodoInput.js\n    TodoItem.js\n    TodoList.js\n</code></pre>"},{"location":"examples/react-native-examples/#todo-input-component","title":"Todo Input Component","text":"<pre><code>// components/todo/TodoInput.js\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { AgentTextField, AgentButton, useAgentComponent } from '@agentbridge/react-native';\n\nconst TodoInput = ({ onAddTodo }) =&gt; {\n  const [text, setText] = useState('');\n\n  // Register component with AgentBridge\n  useAgentComponent('todo-input', {\n    type: 'input-form',\n    properties: {\n      placeholder: 'Add a new todo',\n      value: text\n    },\n    actions: ['submit']\n  });\n\n  const handleAddTodo = () =&gt; {\n    if (text.trim()) {\n      onAddTodo(text.trim());\n      setText('');\n    }\n  };\n\n  return (\n    &lt;View style={styles.container}&gt;\n      &lt;AgentTextField\n        id=\"todo-text-input\"\n        value={text}\n        onChangeText={setText}\n        placeholder=\"What needs to be done?\"\n        style={styles.input}\n        onSubmitEditing={handleAddTodo}\n      /&gt;\n      &lt;AgentButton\n        id=\"add-todo-button\"\n        label=\"Add\"\n        onPress={handleAddTodo}\n        style={styles.button}\n        textStyle={styles.buttonText}\n      /&gt;\n    &lt;/View&gt;\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginHorizontal: 20,\n    marginVertical: 10,\n  },\n  input: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 4,\n    paddingHorizontal: 10,\n    paddingVertical: 8,\n    marginRight: 10,\n  },\n  button: {\n    backgroundColor: '#0066cc',\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    borderRadius: 4,\n    justifyContent: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n\nexport default TodoInput;\n</code></pre>"},{"location":"examples/react-native-examples/#todo-item-component","title":"Todo Item Component","text":"<pre><code>// components/todo/TodoItem.js\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { AgentCheckbox, AgentButton, useAgentComponent } from '@agentbridge/react-native';\n\nconst TodoItem = ({ todo, onToggle, onDelete }) =&gt; {\n  // Register component with AgentBridge\n  useAgentComponent(`todo-${todo.id}`, {\n    type: 'todo-item',\n    properties: {\n      id: todo.id,\n      title: todo.title,\n      completed: todo.completed,\n    },\n    actions: ['toggle', 'delete'],\n    metadata: {\n      importance: 'medium',\n      description: 'A todo item that can be toggled or deleted',\n    },\n  });\n\n  return (\n    &lt;View style={styles.container}&gt;\n      &lt;AgentCheckbox\n        id={`checkbox-${todo.id}`}\n        value={todo.completed}\n        onValueChange={() =&gt; onToggle(todo.id)}\n        style={styles.checkbox}\n      /&gt;\n      &lt;Text \n        style={[\n          styles.title, \n          todo.completed &amp;&amp; styles.completed\n        ]}\n      &gt;\n        {todo.title}\n      &lt;/Text&gt;\n      &lt;AgentButton\n        id={`delete-${todo.id}`}\n        icon=\"trash\"\n        onPress={() =&gt; onDelete(todo.id)}\n        style={styles.deleteButton}\n      /&gt;\n    &lt;/View&gt;\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n  },\n  checkbox: {\n    marginRight: 10,\n  },\n  title: {\n    flex: 1,\n    fontSize: 16,\n  },\n  completed: {\n    textDecorationLine: 'line-through',\n    color: '#888',\n  },\n  deleteButton: {\n    padding: 8,\n  },\n});\n\nexport default TodoItem;\n</code></pre>"},{"location":"examples/react-native-examples/#todo-list-component","title":"Todo List Component","text":"<pre><code>// components/todo/TodoList.js\nimport React, { useState, useEffect } from 'react';\nimport { View, FlatList, Text, StyleSheet } from 'react-native';\nimport { AgentBridge, useAgentComponent } from '@agentbridge/react-native';\nimport TodoItem from './TodoItem';\nimport TodoInput from './TodoInput';\n\nconst TodoList = () =&gt; {\n  const [todos, setTodos] = useState([\n    { id: '1', title: 'Learn AgentBridge', completed: false },\n    { id: '2', title: 'Build a React Native app', completed: true },\n  ]);\n\n  // Register component with AgentBridge\n  useAgentComponent('todo-list', {\n    type: 'list',\n    properties: {\n      itemCount: todos.length,\n      completedCount: todos.filter(todo =&gt; todo.completed).length,\n    },\n    actions: ['clearCompleted'],\n    metadata: {\n      importance: 'high',\n      description: 'A list of todo items',\n    },\n  });\n\n  useEffect(() =&gt; {\n    // Register functions with AgentBridge\n    AgentBridge.registerFunction({\n      name: 'addTodo',\n      description: 'Add a new todo item to the list',\n      parameters: {\n        type: 'object',\n        properties: {\n          title: {\n            type: 'string',\n            description: 'Title of the todo item',\n          },\n        },\n        required: ['title'],\n      },\n      handler: async (params) =&gt; {\n        const { title } = params;\n\n        if (!title || !title.trim()) {\n          return {\n            success: false,\n            error: 'Title cannot be empty',\n          };\n        }\n\n        const newTodo = {\n          id: Date.now().toString(),\n          title: title.trim(),\n          completed: false,\n        };\n\n        setTodos(currentTodos =&gt; [...currentTodos, newTodo]);\n\n        return {\n          success: true,\n          todo: newTodo,\n        };\n      },\n    });\n\n    AgentBridge.registerFunction({\n      name: 'toggleTodo',\n      description: 'Toggle the completed status of a todo item',\n      parameters: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'ID of the todo item to toggle',\n          },\n        },\n        required: ['id'],\n      },\n      handler: async (params) =&gt; {\n        const { id } = params;\n\n        let updatedTodo = null;\n\n        setTodos(currentTodos =&gt; {\n          const updatedTodos = currentTodos.map(todo =&gt; {\n            if (todo.id === id) {\n              updatedTodo = { ...todo, completed: !todo.completed };\n              return updatedTodo;\n            }\n            return todo;\n          });\n\n          return updatedTodos;\n        });\n\n        if (!updatedTodo) {\n          return {\n            success: false,\n            error: 'Todo not found',\n          };\n        }\n\n        return {\n          success: true,\n          todo: updatedTodo,\n        };\n      },\n    });\n\n    AgentBridge.registerFunction({\n      name: 'deleteTodo',\n      description: 'Delete a todo item from the list',\n      parameters: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'ID of the todo item to delete',\n          },\n        },\n        required: ['id'],\n      },\n      handler: async (params) =&gt; {\n        const { id } = params;\n\n        const todoExists = todos.some(todo =&gt; todo.id === id);\n\n        if (!todoExists) {\n          return {\n            success: false,\n            error: 'Todo not found',\n          };\n        }\n\n        setTodos(currentTodos =&gt; currentTodos.filter(todo =&gt; todo.id !== id));\n\n        return {\n          success: true,\n        };\n      },\n    });\n\n    AgentBridge.registerFunction({\n      name: 'getTodos',\n      description: 'Get all todo items',\n      parameters: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async () =&gt; {\n        return {\n          success: true,\n          todos,\n        };\n      },\n    });\n\n    AgentBridge.registerFunction({\n      name: 'clearCompletedTodos',\n      description: 'Clear all completed todo items',\n      parameters: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async () =&gt; {\n        const completedCount = todos.filter(todo =&gt; todo.completed).length;\n\n        if (completedCount === 0) {\n          return {\n            success: false,\n            error: 'No completed todos to clear',\n          };\n        }\n\n        setTodos(currentTodos =&gt; currentTodos.filter(todo =&gt; !todo.completed));\n\n        return {\n          success: true,\n          clearedCount: completedCount,\n        };\n      },\n    });\n\n    return () =&gt; {\n      // Cleanup when component unmounts\n      AgentBridge.unregisterFunction('addTodo');\n      AgentBridge.unregisterFunction('toggleTodo');\n      AgentBridge.unregisterFunction('deleteTodo');\n      AgentBridge.unregisterFunction('getTodos');\n      AgentBridge.unregisterFunction('clearCompletedTodos');\n    };\n  }, [todos]);\n\n  const handleAddTodo = (title) =&gt; {\n    const newTodo = {\n      id: Date.now().toString(),\n      title,\n      completed: false,\n    };\n    setTodos([...todos, newTodo]);\n  };\n\n  const handleToggleTodo = (id) =&gt; {\n    setTodos(todos.map(todo =&gt;\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const handleDeleteTodo = (id) =&gt; {\n    setTodos(todos.filter(todo =&gt; todo.id !== id));\n  };\n\n  const handleClearCompleted = () =&gt; {\n    setTodos(todos.filter(todo =&gt; !todo.completed));\n  };\n\n  return (\n    &lt;View style={styles.container}&gt;\n      &lt;Text style={styles.title}&gt;Todo List&lt;/Text&gt;\n      &lt;TodoInput onAddTodo={handleAddTodo} /&gt;\n      &lt;FlatList\n        data={todos}\n        keyExtractor={item =&gt; item.id}\n        renderItem={({ item }) =&gt; (\n          &lt;TodoItem\n            todo={item}\n            onToggle={handleToggleTodo}\n            onDelete={handleDeleteTodo}\n          /&gt;\n        )}\n        style={styles.list}\n      /&gt;\n      &lt;View style={styles.footer}&gt;\n        &lt;Text style={styles.count}&gt;\n          {todos.filter(todo =&gt; !todo.completed).length} items left\n        &lt;/Text&gt;\n        &lt;AgentButton\n          id=\"clear-completed-button\"\n          label=\"Clear completed\"\n          onPress={handleClearCompleted}\n          disabled={!todos.some(todo =&gt; todo.completed)}\n          style={[\n            styles.clearButton,\n            !todos.some(todo =&gt; todo.completed) &amp;&amp; styles.disabledButton\n          ]}\n          textStyle={styles.clearButtonText}\n        /&gt;\n      &lt;/View&gt;\n    &lt;/View&gt;\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginTop: 20,\n    marginBottom: 10,\n  },\n  list: {\n    flex: 1,\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderTopWidth: 1,\n    borderTopColor: '#eee',\n  },\n  count: {\n    color: '#888',\n  },\n  clearButton: {\n    paddingVertical: 6,\n    paddingHorizontal: 10,\n  },\n  clearButtonText: {\n    color: '#0066cc',\n  },\n  disabledButton: {\n    opacity: 0.5,\n  },\n});\n\nexport default TodoList;\n</code></pre>"},{"location":"examples/react-native-examples/#using-mcp-adapters","title":"Using MCP Adapters","text":"<p>A complete example of integrating MCP adapters in a React Native application.</p> <pre><code>// MCPChatScreen.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport {\n  AgentTextField,\n  AgentButton,\n  AgentBridge,\n} from '@agentbridge/react-native';\nimport axios from 'axios';\n\nconst MCPChatScreen = () =&gt; {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const flatListRef = useRef(null);\n\n  useEffect(() =&gt; {\n    // Set up AgentBridge\n    setupAgentBridge();\n\n    // Add initial welcome message\n    setMessages([\n      {\n        id: 'welcome',\n        role: 'assistant',\n        content: 'Hello! I can help you with weather information. Try asking about the weather in a city.',\n      },\n    ]);\n\n    return () =&gt; {\n      // Cleanup\n      AgentBridge.unregisterFunction('getWeather');\n    };\n  }, []);\n\n  const setupAgentBridge = () =&gt; {\n    // Register OpenAI MCP adapter\n    AgentBridge.registerMCPAdapter(\n      'openai',\n      new OpenAIMCPAdapter(AgentBridge.registry)\n    );\n\n    // Register weather function\n    AgentBridge.registerFunction({\n      name: 'getWeather',\n      description: 'Get the current weather for a location',\n      parameters: {\n        type: 'object',\n        properties: {\n          location: {\n            type: 'string',\n            description: 'The city and state, e.g. San Francisco, CA',\n          },\n        },\n        required: ['location'],\n      },\n      handler: async (params) =&gt; {\n        // In a real app, this would call a weather API\n        const { location } = params;\n\n        // Simulate API delay\n        await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n        // Return mock weather data\n        return {\n          location,\n          temperature: 72,\n          conditions: 'sunny',\n          humidity: 45,\n          windSpeed: 8,\n        };\n      },\n    });\n  };\n\n  const sendMessage = async () =&gt; {\n    if (!inputText.trim()) return;\n\n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: inputText,\n    };\n\n    setMessages(prevMessages =&gt; [...prevMessages, userMessage]);\n    setInputText('');\n    setIsLoading(true);\n\n    try {\n      // Get OpenAI schema from AgentBridge\n      const schema = AgentBridge.getMCPSchema('openai');\n\n      // Prepare the messages in OpenAI format\n      const apiMessages = messages.concat(userMessage).map(msg =&gt; ({\n        role: msg.role,\n        content: msg.content,\n        ...(msg.tool_call_id ? { tool_call_id: msg.tool_call_id } : {}),\n      }));\n\n      // Call OpenAI API\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-4',\n          messages: apiMessages,\n          tools: schema.functions,\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const assistantMessage = response.data.choices[0].message;\n      const newAssistantMessage = {\n        id: `assistant-${Date.now()}`,\n        ...assistantMessage,\n      };\n\n      setMessages(prevMessages =&gt; [...prevMessages, newAssistantMessage]);\n\n      // Check if the assistant wants to call a function\n      if (assistantMessage.tool_calls &amp;&amp; assistantMessage.tool_calls.length &gt; 0) {\n        for (const toolCall of assistantMessage.tool_calls) {\n          // Handle function call through AgentBridge\n          const result = await AgentBridge.handleMCPFunctionCall(\n            'openai',\n            toolCall\n          );\n\n          // Add function result to messages\n          const functionMessage = {\n            id: `function-${Date.now()}-${Math.random()}`,\n            role: 'tool',\n            tool_call_id: toolCall.id,\n            content: JSON.stringify(result),\n          };\n\n          setMessages(prevMessages =&gt; [...prevMessages, functionMessage]);\n\n          // Get a follow-up response from OpenAI\n          const updatedMessages = [\n            ...apiMessages, \n            newAssistantMessage, \n            functionMessage\n          ];\n\n          const followUpResponse = await axios.post(\n            'https://api.openai.com/v1/chat/completions',\n            {\n              model: 'gpt-4',\n              messages: updatedMessages,\n            },\n            {\n              headers: {\n                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n                'Content-Type': 'application/json',\n              },\n            }\n          );\n\n          const followUpMessage = followUpResponse.data.choices[0].message;\n          setMessages(prevMessages =&gt; [\n            ...prevMessages, \n            {\n              id: `assistant-followup-${Date.now()}`,\n              ...followUpMessage,\n            }\n          ]);\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      setMessages(prevMessages =&gt; [\n        ...prevMessages,\n        {\n          id: `error-${Date.now()}`,\n          role: 'assistant',\n          content: 'Sorry, I encountered an error. Please try again.',\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n\n      // Scroll to bottom\n      if (flatListRef.current) {\n        setTimeout(() =&gt; {\n          flatListRef.current.scrollToEnd({ animated: true });\n        }, 100);\n      }\n    }\n  };\n\n  const renderMessageItem = ({ item }) =&gt; {\n    const isUser = item.role === 'user';\n\n    return (\n      &lt;View\n        style={[\n          styles.messageBubble,\n          isUser ? styles.userBubble : styles.assistantBubble,\n        ]}\n      &gt;\n        &lt;Text style={isUser ? styles.userText : styles.assistantText}&gt;\n          {item.content}\n        &lt;/Text&gt;\n      &lt;/View&gt;\n    );\n  };\n\n  return (\n    &lt;KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}\n    &gt;\n      &lt;FlatList\n        ref={flatListRef}\n        data={messages}\n        keyExtractor={item =&gt; item.id}\n        renderItem={renderMessageItem}\n        contentContainerStyle={styles.messagesContainer}\n        onLayout={() =&gt; {\n          if (flatListRef.current) {\n            flatListRef.current.scrollToEnd({ animated: false });\n          }\n        }}\n      /&gt;\n\n      {isLoading &amp;&amp; (\n        &lt;View style={styles.loadingContainer}&gt;\n          &lt;Text style={styles.loadingText}&gt;AI is thinking...&lt;/Text&gt;\n        &lt;/View&gt;\n      )}\n\n      &lt;View style={styles.inputContainer}&gt;\n        &lt;AgentTextField\n          id=\"chat-input\"\n          value={inputText}\n          onChangeText={setInputText}\n          placeholder=\"Type a message...\"\n          style={styles.input}\n          onSubmitEditing={sendMessage}\n        /&gt;\n        &lt;AgentButton\n          id=\"send-button\"\n          icon=\"send\"\n          onPress={sendMessage}\n          style={styles.sendButton}\n        /&gt;\n      &lt;/View&gt;\n    &lt;/KeyboardAvoidingView&gt;\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  messagesContainer: {\n    padding: 16,\n    paddingBottom: 20,\n  },\n  messageBubble: {\n    maxWidth: '80%',\n    paddingVertical: 10,\n    paddingHorizontal: 14,\n    borderRadius: 18,\n    marginBottom: 10,\n  },\n  userBubble: {\n    backgroundColor: '#0084ff',\n    alignSelf: 'flex-end',\n    borderBottomRightRadius: 4,\n  },\n  assistantBubble: {\n    backgroundColor: '#e4e4e4',\n    alignSelf: 'flex-start',\n    borderBottomLeftRadius: 4,\n  },\n  userText: {\n    color: 'white',\n  },\n  assistantText: {\n    color: 'black',\n  },\n  loadingContainer: {\n    padding: 10,\n    alignItems: 'center',\n  },\n  loadingText: {\n    color: '#888',\n    fontStyle: 'italic',\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    padding: 10,\n    borderTopWidth: 1,\n    borderTopColor: '#ddd',\n    backgroundColor: 'white',\n  },\n  input: {\n    flex: 1,\n    backgroundColor: '#f0f0f0',\n    borderRadius: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    marginRight: 10,\n  },\n  sendButton: {\n    width: 44,\n    height: 44,\n    borderRadius: 22,\n    backgroundColor: '#0084ff',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default MCPChatScreen;\n</code></pre>"},{"location":"examples/react-native-examples/#design-information-collection","title":"Design Information Collection","text":"<p>Example of collecting design information from a React Native application.</p> <pre><code>// DesignInfoExample.js\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  ScrollView,\n  StyleSheet,\n  SafeAreaView,\n} from 'react-native';\nimport {\n  AgentButton,\n  AgentBridge,\n  ReactNativeDesignCollector,\n} from '@agentbridge/react-native';\n\nconst DesignInfoExample = () =&gt; {\n  const [designInfo, setDesignInfo] = useState(null);\n  const [isCapturing, setIsCapturing] = useState(false);\n\n  useEffect(() =&gt; {\n    // Capture design info after initial render\n    captureDesignInfo();\n\n    return () =&gt; {\n      // Cleanup\n    };\n  }, []);\n\n  const captureDesignInfo = () =&gt; {\n    setIsCapturing(true);\n\n    setTimeout(() =&gt; {\n      // Create a design collector\n      const designCollector = new ReactNativeDesignCollector({\n        captureOptions: {\n          includeStyles: true,\n          includeDisabledComponents: true,\n          includePositions: true,\n          maxDepth: 10,\n        },\n      });\n\n      // Capture design information\n      const info = designCollector.captureDesignInfo();\n\n      // Register with AgentBridge\n      AgentBridge.registerDesignInfo(info);\n\n      setDesignInfo(info);\n      setIsCapturing(false);\n    }, 100); // Small delay to ensure components are rendered\n  };\n\n  return (\n    &lt;SafeAreaView style={styles.container}&gt;\n      &lt;ScrollView contentContainerStyle={styles.scrollContent}&gt;\n        &lt;Text style={styles.title}&gt;Design Information Collection&lt;/Text&gt;\n\n        {isCapturing ? (\n          &lt;Text style={styles.loadingText}&gt;Capturing design information...&lt;/Text&gt;\n        ) : designInfo ? (\n          &lt;View&gt;\n            &lt;Text style={styles.sectionTitle}&gt;Captured Design Information&lt;/Text&gt;\n\n            &lt;Text style={styles.label}&gt;App Info:&lt;/Text&gt;\n            &lt;View style={styles.infoBox}&gt;\n              &lt;Text&gt;\n                {JSON.stringify(designInfo.appInfo, null, 2)}\n              &lt;/Text&gt;\n            &lt;/View&gt;\n\n            &lt;Text style={styles.label}&gt;\n              Components: {designInfo.components.length} total\n            &lt;/Text&gt;\n            &lt;View style={styles.infoBox}&gt;\n              &lt;Text&gt;\n                {designInfo.components.map(comp =&gt; comp.id).join(', ')}\n              &lt;/Text&gt;\n            &lt;/View&gt;\n\n            &lt;AgentButton\n              id=\"recapture-button\"\n              label=\"Recapture Design Info\"\n              onPress={captureDesignInfo}\n              style={styles.button}\n              textStyle={styles.buttonText}\n            /&gt;\n          &lt;/View&gt;\n        ) : (\n          &lt;Text&gt;No design information captured yet.&lt;/Text&gt;\n        )}\n\n        {/* Example components to capture */}\n        &lt;View style={styles.demoSection}&gt;\n          &lt;Text style={styles.sectionTitle}&gt;Demo Components&lt;/Text&gt;\n\n          &lt;AgentButton\n            id=\"demo-button-primary\"\n            label=\"Primary Button\"\n            onPress={() =&gt; {}}\n            style={[styles.button, styles.primaryButton]}\n            textStyle={styles.buttonText}\n          /&gt;\n\n          &lt;AgentButton\n            id=\"demo-button-secondary\"\n            label=\"Secondary Button\"\n            onPress={() =&gt; {}}\n            style={[styles.button, styles.secondaryButton]}\n            textStyle={styles.secondaryButtonText}\n          /&gt;\n        &lt;/View&gt;\n      &lt;/ScrollView&gt;\n    &lt;/SafeAreaView&gt;\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  scrollContent: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n  },\n  loadingText: {\n    fontSize: 16,\n    fontStyle: 'italic',\n    color: '#666',\n    marginVertical: 20,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginTop: 20,\n    marginBottom: 10,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginTop: 10,\n    marginBottom: 5,\n  },\n  infoBox: {\n    backgroundColor: '#f0f0f0',\n    padding: 10,\n    borderRadius: 5,\n    marginBottom: 15,\n  },\n  button: {\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n    marginTop: 15,\n    alignItems: 'center',\n  },\n  primaryButton: {\n    backgroundColor: '#0066cc',\n  },\n  secondaryButton: {\n    backgroundColor: 'white',\n    borderWidth: 1,\n    borderColor: '#0066cc',\n    marginTop: 10,\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  secondaryButtonText: {\n    color: '#0066cc',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  demoSection: {\n    marginTop: 30,\n    padding: 15,\n    backgroundColor: '#f9f9f9',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#eee',\n  },\n});\n\nexport default DesignInfoExample;\n</code></pre> <p>For more examples of AgentBridge usage in React Native applications, refer to the React Native Components guide and the Mobile Features overview. </p>"},{"location":"getting-started/communication-modes/","title":"Communication Modes","text":"<p>AgentBridge supports two primary communication modes to suit different application architectures:</p> <ol> <li>Pub/Sub Mode: For frontend-only applications without dedicated backends</li> <li>Self-Hosted Mode: For applications with dedicated backends</li> </ol> <p>This guide will help you choose the right mode for your application and understand how to implement it.</p>"},{"location":"getting-started/communication-modes/#pubsub-mode","title":"Pub/Sub Mode","text":"<p>Pub/Sub mode uses third-party real-time messaging services to facilitate communication between AI agents and your application. This mode is ideal for applications without a dedicated backend.</p> <pre><code>graph TD\n    A[AI Agent] &lt;--&gt;|Pub/Sub Messages| B[Pub/Sub Service]\n    B &lt;--&gt;|Pub/Sub Messages| C[Application]\n\n    subgraph \"Application\"\n        D[AgentBridge] &lt;--&gt; E[UI Components]\n        D &lt;--&gt; F[Function Registry]\n    end\n\n    subgraph \"Pub/Sub Service Options\"\n        G[Ably]\n        H[Firebase]\n        I[Pusher]\n        J[Supabase]\n    end</code></pre>"},{"location":"getting-started/communication-modes/#how-it-works","title":"How It Works","text":"<ol> <li>Your application initializes AgentBridge with a pub/sub provider (Ably, Firebase, etc.)</li> <li>AgentBridge connects to the pub/sub service and publishes capabilities</li> <li>AI agents connect to the same pub/sub service</li> <li>AI agents discover capabilities and send commands</li> <li>Your application executes commands and sends results</li> </ol>"},{"location":"getting-started/communication-modes/#supported-providers","title":"Supported Providers","text":"<p>AgentBridge supports several pub/sub providers:</p>"},{"location":"getting-started/communication-modes/#ably","title":"Ably","text":"<p>Ably is a real-time messaging service with a generous free tier.</p> <pre><code>import { AblyProvider } from '@agentbridge/provider-ably';\n\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key'\n});\n\nbridge.initialize(ablyProvider);\n</code></pre>"},{"location":"getting-started/communication-modes/#firebase","title":"Firebase","text":"<p>Firebase Realtime Database is Google's real-time solution with a strong ecosystem.</p> <pre><code>import { FirebaseProvider } from '@agentbridge/provider-firebase';\n\nconst firebaseProvider = new FirebaseProvider({\n  firebaseConfig: {\n    // Your Firebase config\n  }\n});\n\nbridge.initialize(firebaseProvider);\n</code></pre>"},{"location":"getting-started/communication-modes/#pusher","title":"Pusher","text":"<p>Pusher is a popular real-time messaging platform.</p> <pre><code>import { PusherProvider } from '@agentbridge/provider-pusher';\n\nconst pusherProvider = new PusherProvider({\n  key: 'your-pusher-key',\n  cluster: 'eu'\n});\n\nbridge.initialize(pusherProvider);\n</code></pre>"},{"location":"getting-started/communication-modes/#supabase","title":"Supabase","text":"<p>Supabase Realtime is an open-source Firebase alternative.</p> <pre><code>import { SupabaseProvider } from '@agentbridge/provider-supabase';\n\nconst supabaseProvider = new SupabaseProvider({\n  supabaseUrl: 'https://your-project.supabase.co',\n  supabaseKey: 'your-supabase-key'\n});\n\nbridge.initialize(supabaseProvider);\n</code></pre>"},{"location":"getting-started/communication-modes/#custom-providers","title":"Custom Providers","text":"<p>You can implement custom pub/sub providers by implementing the <code>CommunicationProvider</code> interface. See the Custom Pub/Sub Providers documentation for more details.</p>"},{"location":"getting-started/communication-modes/#pros-and-cons","title":"Pros and Cons","text":""},{"location":"getting-started/communication-modes/#pros","title":"Pros","text":"<ul> <li>Simple to set up and maintain</li> <li>No backend required</li> <li>Multiple provider options</li> <li>Low operational overhead</li> </ul>"},{"location":"getting-started/communication-modes/#cons","title":"Cons","text":"<ul> <li>Limited control over communication</li> <li>Potential security concerns with client-side keys</li> <li>Third-party dependencies</li> <li>Possible usage limits or costs</li> </ul>"},{"location":"getting-started/communication-modes/#self-hosted-mode","title":"Self-Hosted Mode","text":"<p>Self-hosted mode uses WebSockets with your own backend server, which acts as a mediator between AI agents and your application.</p> <pre><code>graph TD\n    A[AI Agent] &lt;--&gt;|HTTP/WebSocket| B[Your Backend]\n    B &lt;--&gt;|WebSocket| C[Application]\n\n    subgraph \"Application\"\n        D[AgentBridge] &lt;--&gt; E[UI Components]\n        D &lt;--&gt; F[Function Registry]\n    end\n\n    subgraph \"Your Backend\"\n        G[WebSocket Server]\n        H[Authentication]\n        I[Business Logic]\n    end</code></pre>"},{"location":"getting-started/communication-modes/#how-it-works_1","title":"How It Works","text":"<ol> <li>Your application initializes AgentBridge with the WebSocket provider</li> <li>AgentBridge connects to your backend server via WebSockets</li> <li>AI agents connect to your backend server (via HTTP or WebSockets)</li> <li>Your backend server mediates communication between AI agents and applications</li> <li>Your backend can implement additional logic, authentication, etc.</li> </ol>"},{"location":"getting-started/communication-modes/#implementation","title":"Implementation","text":""},{"location":"getting-started/communication-modes/#frontend-configuration","title":"Frontend Configuration","text":"<pre><code>import { WebSocketProvider } from '@agentbridge/communication-websocket';\n\nconst wsProvider = new WebSocketProvider({\n  url: 'wss://your-server.com/agent-bridge',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n});\n\nbridge.initialize(wsProvider);\n</code></pre>"},{"location":"getting-started/communication-modes/#backend-implementation","title":"Backend Implementation","text":"<p>You'll need to implement a WebSocket server on your backend. Here's a basic example using Node.js:</p> <pre><code>const WebSocket = require('ws');\nconst server = new WebSocket.Server({ port: 8080 });\n\nserver.on('connection', (ws, req) =&gt; {\n  // Handle authentication\n  const token = req.headers['authorization']?.split(' ')[1];\n  if (!validateToken(token)) {\n    ws.close(4001, 'Unauthorized');\n    return;\n  }\n\n  // Handle messages\n  ws.on('message', (message) =&gt; {\n    const parsedMessage = JSON.parse(message);\n    handleMessage(parsedMessage, ws);\n  });\n});\n</code></pre> <p>For detailed server implementation examples, see the WebSocket Configuration documentation.</p>"},{"location":"getting-started/communication-modes/#pros-and-cons_1","title":"Pros and Cons","text":""},{"location":"getting-started/communication-modes/#pros_1","title":"Pros","text":"<ul> <li>Complete control over communication</li> <li>Enhanced security options</li> <li>Integration with existing backend systems</li> <li>No third-party dependencies</li> <li>No usage limits or costs</li> </ul>"},{"location":"getting-started/communication-modes/#cons_1","title":"Cons","text":"<ul> <li>More complex to set up and maintain</li> <li>Requires backend development</li> <li>Operational overhead</li> <li>Scalability considerations</li> </ul>"},{"location":"getting-started/communication-modes/#choosing-the-right-mode","title":"Choosing the Right Mode","text":"<p>Consider the following factors when choosing a communication mode:</p>"},{"location":"getting-started/communication-modes/#choose-pubsub-mode-if","title":"Choose Pub/Sub Mode If:","text":"<ul> <li>You don't have a backend or don't want to modify it</li> <li>You need a quick and simple setup</li> <li>You're building a prototype or MVP</li> <li>You're comfortable with third-party services</li> <li>Your application doesn't handle highly sensitive data</li> </ul>"},{"location":"getting-started/communication-modes/#choose-self-hosted-mode-if","title":"Choose Self-Hosted Mode If:","text":"<ul> <li>You already have a backend</li> <li>You need complete control over communication</li> <li>You handle sensitive data with specific security requirements</li> <li>You want to avoid third-party dependencies</li> <li>You need to integrate with existing backend systems</li> <li>You're concerned about third-party service limits or costs</li> </ul>"},{"location":"getting-started/communication-modes/#configuration","title":"Configuration","text":""},{"location":"getting-started/communication-modes/#pubsub-configuration","title":"Pub/Sub Configuration","text":"<p>See the Pub/Sub Configuration documentation for detailed configuration options.</p>"},{"location":"getting-started/communication-modes/#websocket-configuration","title":"WebSocket Configuration","text":"<p>See the WebSocket Configuration documentation for detailed configuration options.</p>"},{"location":"getting-started/communication-modes/#security-considerations","title":"Security Considerations","text":"<p>Both communication modes require careful security implementation:</p> <ul> <li>Authentication: Implement proper authentication for both AI agents and users</li> <li>Authorization: Control what actions AI agents can perform</li> <li>Data Validation: Validate all data exchanged with AI agents</li> <li>Transport Security: Use secure connections (HTTPS/WSS)</li> </ul> <p>For detailed security guidance, see the Security Best Practices documentation.</p>"},{"location":"getting-started/communication-modes/#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide: Install AgentBridge and its dependencies</li> <li>Quick Start: Build your first AI-enabled application</li> <li>Core Concepts: Learn about the core concepts of AgentBridge </li> </ul>"},{"location":"getting-started/examples/","title":"Example Projects","text":"<p>AgentBridge provides several example projects that demonstrate how to use the framework with different web and mobile frameworks.</p>"},{"location":"getting-started/examples/#react-examples","title":"React Examples","text":""},{"location":"getting-started/examples/#local-react-example","title":"Local React Example","text":"<p>The Local React Example demonstrates how to use AgentBridge with React in a self-hosted mode using WebSockets for communication.</p> <p>Location: <code>examples/local-react-example</code></p> <p>Features: - WebSocket-based communication between the app and AI agents - Counter component with properties and actions - Event history tracking - AgentBridge function registration</p> <p>Running the example:</p> <pre><code># Start the WebSocket server\ncd examples/local-react-example\nnpm install\nnode server.js\n\n# In a separate terminal, start the React app\ncd examples/local-react-example\nnpm install\nnpm start\n</code></pre> <p>Key components: - <code>Counter.js</code>: Demonstrates the <code>useRegisterComponent</code> hook for registering a UI component - <code>App.js</code>: Shows how to set up the <code>AgentBridgeProvider</code> with a WebSocket communication provider - <code>server.js</code>: Implements a simple WebSocket server for communication</p>"},{"location":"getting-started/examples/#react-counter-example","title":"React Counter Example","text":"<p>The React Counter Example demonstrates using AgentBridge with React in both Pub/Sub and Self-Hosted modes.</p> <p>Location: <code>examples/react-counter</code></p> <p>Features: - Support for both Pub/Sub (Ably) and Self-Hosted (WebSocket) communication - UI for switching between communication modes - Counter component with properties and actions - History panel for tracking actions</p> <p>Running the example:</p> <pre><code>cd examples/react-counter\nnpm install\nnpm start\n\n# For Self-Hosted mode, start the WebSocket server in another terminal\nnpm run server\n</code></pre> <p>Key components: - <code>Counter.js</code>: Demonstrates component registration with properties and actions - <code>App.js</code>: Shows setting up different communication providers - <code>useAgentBridge.js</code>: Custom hook for managing AgentBridge configuration</p>"},{"location":"getting-started/examples/#angular-examples","title":"Angular Examples","text":""},{"location":"getting-started/examples/#local-angular-example","title":"Local Angular Example","text":"<p>The Local Angular Example demonstrates how to use AgentBridge with Angular in a self-hosted mode.</p> <p>Location: <code>examples/local-angular-example</code></p> <p>Features: - WebSocket-based communication - Angular component directives - Function registration using decorators</p> <p>Running the example:</p> <pre><code># Start the WebSocket server\ncd examples/local-angular-example\nnpm install\nnode server.js\n\n# In a separate terminal, start the Angular app\ncd examples/local-angular-example\nnpm install\nng serve\n</code></pre> <p>Key components: - Uses the <code>AgentBridgeModule</code> for integration - Demonstrates the <code>agentBridgeComponent</code> directive - Shows how to register functions with AgentBridge</p>"},{"location":"getting-started/examples/#technical-details","title":"Technical Details","text":""},{"location":"getting-started/examples/#websocket-server","title":"WebSocket Server","text":"<p>Both the React and Angular examples use a simple WebSocket server for self-hosted mode. The server:</p> <ol> <li>Listens for connections from the app and AI agents</li> <li>Forwards messages between the app and agents</li> <li>Maintains connection state and handles reconnections</li> <li>Implements a ping-pong mechanism to keep connections alive</li> </ol> <p>Features: - Client type detection (app vs. agent) - Message forwarding - Connection tracking - Ping/pong for connection health checks</p> <p>Implementation: <pre><code>const WebSocket = require('ws');\nconst http = require('http');\nconst { v4: uuidv4 } = require('uuid');\n\n// Create HTTP server\nconst server = http.createServer();\n\n// Create WebSocket server\nconst wss = new WebSocket.Server({ server });\n\n// Handle connections\nwss.on('connection', (ws) =&gt; {\n  const clientId = uuidv4();\n\n  // Handle messages\n  ws.on('message', (message) =&gt; {\n    // Process and forward messages\n  });\n\n  // Handle disconnections\n  ws.on('close', () =&gt; {\n    // Clean up\n  });\n});\n\nserver.listen(3001);\n</code></pre></p>"},{"location":"getting-started/examples/#next-steps","title":"Next Steps","text":"<p>After exploring these examples, you can:</p> <ol> <li>Customize the examples to fit your use case</li> <li>Integrate AgentBridge into your own application</li> <li>Create your own AI agents that interact with these examples</li> </ol> <p>For more advanced usage, see the Advanced Topics section. </p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will walk you through installing AgentBridge for different frameworks and platforms.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing AgentBridge, ensure you have:</p> <ul> <li>Node.js 14.x or higher (for JavaScript packages)</li> <li>npm 7.x or higher or yarn 1.22.x or higher</li> <li>Flutter 3.0.0 or higher (for Flutter package)</li> </ul>"},{"location":"getting-started/installation/#installing-the-core-package","title":"Installing the Core Package","text":"<p>The core package is required for all installations:</p> <pre><code>npm install @agentbridge/core\n</code></pre>"},{"location":"getting-started/installation/#installing-framework-sdks","title":"Installing Framework SDKs","text":"<p>Choose the framework SDK that matches your application:</p>"},{"location":"getting-started/installation/#react","title":"React","text":"<pre><code>npm install @agentbridge/react\n</code></pre>"},{"location":"getting-started/installation/#angular","title":"Angular","text":"<pre><code>npm install @agentbridge/angular\n</code></pre>"},{"location":"getting-started/installation/#react-native","title":"React Native","text":"<pre><code>npm install @agentbridge/react-native\n</code></pre>"},{"location":"getting-started/installation/#flutter","title":"Flutter","text":"<p>Add to your <code>pubspec.yaml</code>:</p> <pre><code>dependencies:\n  agentbridge: ^0.2.0\n</code></pre> <p>Then run:</p> <pre><code>flutter pub get\n</code></pre>"},{"location":"getting-started/installation/#installing-communication-providers","title":"Installing Communication Providers","text":"<p>You'll need at least one communication provider to connect your application with AI agents:</p>"},{"location":"getting-started/installation/#ably-provider","title":"Ably Provider","text":"<p>Ably offers a reliable real-time messaging service with an excellent free tier.</p> <pre><code>npm install @agentbridge/provider-ably\n</code></pre> <p>You'll need an Ably API key, which you can get by signing up for a free account.</p>"},{"location":"getting-started/installation/#firebase-provider","title":"Firebase Provider","text":"<p>Firebase provides a comprehensive platform with real-time database capabilities.</p> <pre><code>npm install @agentbridge/provider-firebase\n</code></pre> <p>You'll need to create a Firebase project and configure your application to use it.</p>"},{"location":"getting-started/installation/#pusher-provider","title":"Pusher Provider","text":"<p>Pusher is a popular real-time messaging platform.</p> <pre><code>npm install @agentbridge/provider-pusher\n</code></pre> <p>You'll need a Pusher account and API credentials.</p>"},{"location":"getting-started/installation/#supabase-provider","title":"Supabase Provider","text":"<p>Supabase is an open-source Firebase alternative with real-time capabilities.</p> <pre><code>npm install @agentbridge/provider-supabase\n</code></pre> <p>You'll need a Supabase project and API credentials.</p>"},{"location":"getting-started/installation/#websocket-provider-self-hosted-mode","title":"WebSocket Provider (Self-Hosted Mode)","text":"<p>For applications with backends, you can use the WebSocket provider for direct communication:</p> <pre><code>npm install @agentbridge/communication-websocket\n</code></pre> <p>If you're using the self-hosted mode, you'll also need the server package:</p> <pre><code>npm install @agentbridge/server\n</code></pre>"},{"location":"getting-started/installation/#framework-specific-setup","title":"Framework-Specific Setup","text":""},{"location":"getting-started/installation/#react-setup","title":"React Setup","text":"<ol> <li>Install the required packages:</li> </ol> <pre><code>npm install @agentbridge/core @agentbridge/react\n</code></pre> <ol> <li>Choose a communication provider (e.g., Ably):</li> </ol> <pre><code>npm install @agentbridge/provider-ably\n</code></pre> <ol> <li>Wrap your application with the AgentBridgeProvider:</li> </ol> <pre><code>import React from 'react';\nimport { AgentBridgeProvider } from '@agentbridge/react';\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\n// Create a communication provider\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key',\n});\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider \n      applicationId=\"your-app-id\"\n      communicationProvider={ablyProvider}\n    &gt;\n      {/* Your app components */}\n      &lt;YourApp /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"getting-started/installation/#angular-setup","title":"Angular Setup","text":"<ol> <li>Install the required packages:</li> </ol> <pre><code>npm install @agentbridge/core @agentbridge/angular\n</code></pre> <ol> <li>Choose a communication provider (e.g., Firebase):</li> </ol> <pre><code>npm install @agentbridge/provider-firebase\n</code></pre> <ol> <li>Import the AgentBridgeModule in your app module:</li> </ol> <pre><code>// app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AgentBridgeModule } from '@agentbridge/angular';\nimport { FirebaseProvider } from '@agentbridge/provider-firebase';\nimport { AppComponent } from './app.component';\n\n// Create a communication provider\nconst firebaseProvider = new FirebaseProvider({\n  firebaseConfig: {\n    apiKey: 'your-api-key',\n    authDomain: 'your-auth-domain',\n    projectId: 'your-project-id',\n    storageBucket: 'your-storage-bucket',\n    messagingSenderId: 'your-messaging-sender-id',\n    appId: 'your-app-id'\n  }\n});\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AgentBridgeModule.forRoot({\n      applicationId: 'your-app-id',\n      communicationProvider: firebaseProvider\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre>"},{"location":"getting-started/installation/#react-native-setup","title":"React Native Setup","text":"<ol> <li>Install the required packages:</li> </ol> <pre><code>npm install @agentbridge/core @agentbridge/react-native\n</code></pre> <ol> <li>Choose a communication provider (e.g., Pusher):</li> </ol> <pre><code>npm install @agentbridge/provider-pusher\n</code></pre> <ol> <li>Wrap your application with the AgentBridgeProvider:</li> </ol> <pre><code>import React from 'react';\nimport { SafeAreaView, StatusBar } from 'react-native';\nimport { AgentBridgeProvider } from '@agentbridge/react-native';\nimport { PusherProvider } from '@agentbridge/provider-pusher';\n\n// Create a communication provider\nconst pusherProvider = new PusherProvider({\n  appId: 'your-pusher-app-id',\n  key: 'your-pusher-key',\n  cluster: 'your-pusher-cluster',\n});\n\nfunction App() {\n  return (\n    &lt;SafeAreaView style={{ flex: 1 }}&gt;\n      &lt;StatusBar barStyle=\"dark-content\" /&gt;\n      &lt;AgentBridgeProvider \n        applicationId=\"your-app-id\"\n        communicationProvider={pusherProvider}\n      &gt;\n        {/* Your app components */}\n        &lt;YourApp /&gt;\n      &lt;/AgentBridgeProvider&gt;\n    &lt;/SafeAreaView&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"getting-started/installation/#flutter-setup","title":"Flutter Setup","text":"<ol> <li>Add dependencies to <code>pubspec.yaml</code>:</li> </ol> <pre><code>dependencies:\n  agentbridge: ^0.2.0\n  supabase_flutter: ^1.10.0  # If using Supabase provider\n</code></pre> <ol> <li> <p>Run <code>flutter pub get</code></p> </li> <li> <p>Initialize AgentBridge in your app:</p> </li> </ol> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\nimport 'package:agentbridge/providers/supabase_provider.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    // Create a Supabase provider\n    final supabaseProvider = SupabaseProvider(\n      url: 'your-supabase-url',\n      anonKey: 'your-supabase-anon-key',\n    );\n\n    return MaterialApp(\n      title: 'AgentBridge Demo',\n      home: AgentBridgeProvider(\n        applicationId: 'your-app-id',\n        communicationProvider: supabaseProvider,\n        child: MyHomePage(),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"getting-started/installation/#self-hosted-mode-setup","title":"Self-Hosted Mode Setup","text":"<p>If you're using self-hosted mode, you'll need to set up the server component:</p> <ol> <li>Install the server package:</li> </ol> <pre><code>npm install @agentbridge/server\n</code></pre> <ol> <li>Create a server instance:</li> </ol> <pre><code>// server.js\nimport { AgentBridgeServer } from '@agentbridge/server';\n\nconst server = new AgentBridgeServer({\n  port: 3000,\n  authenticationHandler: async (token) =&gt; {\n    // Implement your authentication logic\n    // Return null if authentication fails, or user info if it succeeds\n    return { id: 'user-123', name: 'John Doe' };\n  }\n});\n\nserver.start().then(() =&gt; {\n  console.log('AgentBridge server running on port 3000');\n});\n</code></pre> <ol> <li>Connect your client application:</li> </ol> <pre><code>import { WebSocketProvider } from '@agentbridge/communication-websocket';\n\nconst webSocketProvider = new WebSocketProvider({\n  url: 'ws://localhost:3000',\n  authToken: 'your-auth-token'\n});\n\n// Then use this provider with your framework's AgentBridgeProvider\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that AgentBridge is installed correctly, you can implement a simple component and function:</p>"},{"location":"getting-started/installation/#react-verification","title":"React Verification","text":"<pre><code>import React from 'react';\nimport { useAgentFunction, AgentButton } from '@agentbridge/react';\n\nfunction VerificationComponent() {\n  useAgentFunction({\n    name: 'ping',\n    description: 'Test function that returns a pong response',\n    parameters: {},\n    handler: async () =&gt; {\n      return { message: 'pong', timestamp: new Date().toISOString() };\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;AgentBridge Test&lt;/h2&gt;\n      &lt;AgentButton \n        id=\"test-button\"\n        label=\"Test Button\"\n        onClick={() =&gt; console.log('Button clicked')}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li>Connection failed: Check your API keys and network connection</li> <li>Components not registered: Ensure your components have unique IDs</li> <li>Functions not working: Verify the function registration and parameters</li> <li>WebSocket connection issues: Check port availability and firewall settings</li> <li>React/Angular provider errors: Make sure the provider is wrapped correctly</li> </ol>"},{"location":"getting-started/installation/#version-compatibility","title":"Version Compatibility","text":"<p>Ensure all your AgentBridge packages have compatible versions. It's recommended to use the same version number for all packages.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide: Build your first AI-enabled application</li> <li>Choose a Communication Mode: Learn more about Pub/Sub vs. Self-Hosted modes </li> </ul>"},{"location":"getting-started/migration-guide/","title":"Migrating from v0.1.0 to v0.2.0","text":"<p>This guide helps you migrate your AgentBridge implementation from v0.1.0 to v0.2.0, which introduces a new package structure and naming convention.</p>"},{"location":"getting-started/migration-guide/#package-structure-changes","title":"Package Structure Changes","text":"<p>In v0.2.0, we've reorganized the package structure to improve maintainability and clarity:</p> v0.1.0 Structure v0.2.0 Structure <code>packages/web/react</code> <code>packages/frameworks/react</code> <code>packages/web/angular</code> <code>packages/frameworks/angular</code> <code>packages/mobile/react-native</code> <code>packages/frameworks/react-native</code> <code>packages/mobile/flutter</code> <code>packages/frameworks/flutter</code> <code>packages/pubsub-*</code> <code>packages/providers/*</code> <code>packages/comm-websocket</code> Removed - Use <code>@agentbridge/server</code> directly"},{"location":"getting-started/migration-guide/#package-naming-changes","title":"Package Naming Changes","text":"<p>Package names have also been updated to follow a more consistent pattern:</p> v0.1.0 Package Name v0.2.0 Package Name <code>@agentbridge/pubsub-ably</code> <code>@agentbridge/provider-ably</code> <code>@agentbridge/pubsub-firebase</code> <code>@agentbridge/provider-firebase</code> <code>@agentbridge/pubsub-pusher</code> <code>@agentbridge/provider-pusher</code> <code>@agentbridge/pubsub-supabase</code> <code>@agentbridge/provider-supabase</code> <code>@agentbridge/comm-websocket</code> Removed - Use <code>@agentbridge/server</code> directly"},{"location":"getting-started/migration-guide/#updating-dependencies","title":"Updating Dependencies","text":"<p>Update your package.json dependencies:</p> <pre><code>{\n  \"dependencies\": {\n    \"@agentbridge/core\": \"^0.2.0\",\n-   \"@agentbridge/react\": \"^0.1.0\",\n+   \"@agentbridge/react\": \"^0.2.0\",\n-   \"@agentbridge/pubsub-ably\": \"^0.1.0\",\n+   \"@agentbridge/provider-ably\": \"^0.2.0\",\n    \"ably\": \"^1.2.48\"\n  }\n}\n</code></pre>"},{"location":"getting-started/migration-guide/#updating-import-statements","title":"Updating Import Statements","text":"<p>Update your import statements to use the new package names:</p> <pre><code>import { AgentBridgeProvider } from '@agentbridge/react';\n- import { AblyProvider } from '@agentbridge/pubsub-ably';\n+ import { AblyProvider } from '@agentbridge/provider-ably';\n\n// Initialize a provider\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-api-key'\n});\n</code></pre>"},{"location":"getting-started/migration-guide/#self-hosted-mode-changes","title":"Self-Hosted Mode Changes","text":"<p>If you were using the WebSocket communication mode, switch to using the server package directly:</p> <pre><code>// Frontend\n- import { WebSocketProvider } from '@agentbridge/comm-websocket';\n+ // No specific provider needed for frontend with self-hosted mode\n  import { AgentBridgeProvider } from '@agentbridge/react';\n\n// Backend\n  import { AgentBridgeServer } from '@agentbridge/server';\n</code></pre>"},{"location":"getting-started/migration-guide/#api-changes","title":"API Changes","text":"<p>The core API remains largely the same, with improvements to type definitions and error handling.</p>"},{"location":"getting-started/migration-guide/#framework-specific-changes","title":"Framework-Specific Changes","text":""},{"location":"getting-started/migration-guide/#react","title":"React","text":"<ul> <li>Updated hooks for improved TypeScript support</li> <li>Better performance with component rerenders</li> </ul>"},{"location":"getting-started/migration-guide/#angular","title":"Angular","text":"<ul> <li>Enhanced dependency injection patterns</li> <li>New decorators for component and function registration</li> </ul>"},{"location":"getting-started/migration-guide/#react-native","title":"React Native","text":"<ul> <li>Improved native component support</li> <li>Reduced bundle size</li> </ul>"},{"location":"getting-started/migration-guide/#next-steps","title":"Next Steps","text":"<p>After migrating to v0.2.0:</p> <ol> <li>Test your application thoroughly to ensure all functionality works as expected</li> <li>Update your documentation to reflect the new package names</li> <li>Check the Release Notes for detailed information about all changes</li> </ol> <p>If you encounter any issues during migration, please open an issue on our GitHub repository. </p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you quickly set up AgentBridge in your application and start exposing functionality to AI agents.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 14+ or a compatible JavaScript environment</li> <li>npm, yarn, or another package manager</li> <li>A frontend application (React, Angular, React Native, or Flutter)</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<ol> <li>Install the core package and your preferred framework adapter:</li> </ol> <pre><code># For React\nnpm install @agentbridge/core @agentbridge/react\n\n# For Angular\nnpm install @agentbridge/core @agentbridge/angular\n\n# For React Native\nnpm install @agentbridge/core @agentbridge/react-native\n\n# For Flutter\n# See Flutter-specific installation instructions\n</code></pre> <ol> <li>Install a communication provider:</li> </ol> <pre><code># Choose one of these providers\nnpm install @agentbridge/provider-ably     # Ably\nnpm install @agentbridge/provider-firebase # Firebase\nnpm install @agentbridge/provider-pusher   # Pusher\nnpm install @agentbridge/provider-supabase # Supabase\n\n# Or for self-hosted mode\nnpm install @agentbridge/communication-websocket\n</code></pre>"},{"location":"getting-started/quick-start/#basic-setup","title":"Basic Setup","text":""},{"location":"getting-started/quick-start/#react-application","title":"React Application","text":"<pre><code>import React from 'react';\nimport { AgentBridgeProvider } from '@agentbridge/react';\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\n// Create a communication provider\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key',\n});\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider \n      applicationId=\"your-app-id\"\n      communicationProvider={ablyProvider}\n    &gt;\n      {/* Your app components */}\n      &lt;YourApplication /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"getting-started/quick-start/#angular-application","title":"Angular Application","text":"<pre><code>// app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AgentBridgeModule } from '@agentbridge/angular';\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\nimport { AppComponent } from './app.component';\n\n// Create a communication provider\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key',\n});\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AgentBridgeModule.forRoot({\n      applicationId: 'your-app-id',\n      communicationProvider: ablyProvider,\n    }),\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"getting-started/quick-start/#react-native-application","title":"React Native Application","text":"<pre><code>import React from 'react';\nimport { SafeAreaView } from 'react-native';\nimport { AgentBridgeProvider } from '@agentbridge/react-native';\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\n// Create a communication provider\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key',\n});\n\nfunction App() {\n  return (\n    &lt;SafeAreaView style={{ flex: 1 }}&gt;\n      &lt;AgentBridgeProvider \n        applicationId=\"your-app-id\"\n        communicationProvider={ablyProvider}\n      &gt;\n        {/* Your app components */}\n        &lt;YourApplication /&gt;\n      &lt;/AgentBridgeProvider&gt;\n    &lt;/SafeAreaView&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"getting-started/quick-start/#registering-components","title":"Registering Components","text":"<p>Components can be registered to allow AI agents to discover and interact with them.</p>"},{"location":"getting-started/quick-start/#react","title":"React","text":"<pre><code>import React, { useState } from 'react';\nimport { useAgentComponent } from '@agentbridge/react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  // Register this component with AgentBridge\n  useAgentComponent('counter-component', {\n    // Define the component properties that agents can access\n    properties: {\n      count,\n    },\n    // Define actions that agents can perform\n    actions: {\n      increment: () =&gt; {\n        setCount(count + 1);\n        return true;\n      },\n      decrement: () =&gt; {\n        setCount(count - 1);\n        return true;\n      },\n      reset: () =&gt; {\n        setCount(0);\n        return true;\n      }\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Counter: {count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count - 1)}&gt;Decrement&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(0)}&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"getting-started/quick-start/#angular","title":"Angular","text":"<pre><code>import { Component } from '@angular/core';\nimport { AgentComponent } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Counter: {{ count }}&lt;/h2&gt;\n      &lt;button (click)=\"increment()\"&gt;Increment&lt;/button&gt;\n      &lt;button (click)=\"decrement()\"&gt;Decrement&lt;/button&gt;\n      &lt;button (click)=\"reset()\"&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  `\n})\n@AgentComponent({\n  id: 'counter-component',\n  properties: ['count'],\n  actions: ['increment', 'decrement', 'reset']\n})\nexport class CounterComponent {\n  count = 0;\n\n  increment() {\n    this.count++;\n    return true;\n  }\n\n  decrement() {\n    this.count--;\n    return true;\n  }\n\n  reset() {\n    this.count = 0;\n    return true;\n  }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#registering-functions","title":"Registering Functions","text":"<p>Functions can be registered to allow AI agents to call them.</p>"},{"location":"getting-started/quick-start/#react_1","title":"React","text":"<pre><code>import React, { useEffect } from 'react';\nimport { useAgentBridge } from '@agentbridge/react';\n\nfunction WeatherFunction() {\n  const { registerFunction } = useAgentBridge();\n\n  useEffect(() =&gt; {\n    // Register a function with AgentBridge\n    registerFunction({\n      name: 'getWeather',\n      description: 'Get weather information for a location',\n      parameters: {\n        type: 'object',\n        properties: {\n          location: { type: 'string' },\n          units: { type: 'string', enum: ['metric', 'imperial'] }\n        },\n        required: ['location']\n      },\n      handler: async (params) =&gt; {\n        const { location, units = 'metric' } = params;\n\n        // Implementation (replace with actual API call)\n        console.log(`Getting weather for ${location} in ${units}`);\n\n        // Mock weather data\n        return {\n          location,\n          temperature: 22,\n          conditions: 'sunny',\n          humidity: 45,\n          units\n        };\n      }\n    });\n\n    // Clean up function when component unmounts\n    return () =&gt; {\n      // Unregister the function\n      // This is optional but recommended\n      unregisterFunction('getWeather');\n    };\n  }, [registerFunction]);\n\n  return null; // This component doesn't render anything\n}\n</code></pre>"},{"location":"getting-started/quick-start/#angular_1","title":"Angular","text":"<pre><code>import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-weather-function',\n  template: '' // This component doesn't render anything\n})\nexport class WeatherFunctionComponent implements OnInit, OnDestroy {\n  constructor(private agentBridge: AgentBridgeService) {}\n\n  ngOnInit() {\n    // Register a function with AgentBridge\n    this.agentBridge.registerFunction({\n      name: 'getWeather',\n      description: 'Get weather information for a location',\n      parameters: {\n        type: 'object',\n        properties: {\n          location: { type: 'string' },\n          units: { type: 'string', enum: ['metric', 'imperial'] }\n        },\n        required: ['location']\n      },\n      handler: async (params) =&gt; {\n        const { location, units = 'metric' } = params;\n\n        // Implementation (replace with actual API call)\n        console.log(`Getting weather for ${location} in ${units}`);\n\n        // Mock weather data\n        return {\n          location,\n          temperature: 22,\n          conditions: 'sunny',\n          humidity: 45,\n          units\n        };\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    // Unregister the function when component is destroyed\n    this.agentBridge.unregisterFunction('getWeather');\n  }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#communication-modes","title":"Communication Modes","text":"<p>AgentBridge supports two communication modes:</p>"},{"location":"getting-started/quick-start/#pubsub-mode-backend-less","title":"Pub/Sub Mode (Backend-less)","text":"<p>In this mode, AgentBridge uses a third-party messaging service:</p> <pre><code>// Example with Ably\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key',\n});\n\n// Use this provider with AgentBridgeProvider\n</code></pre> <p>See the Pub/Sub Configuration documentation for more options and providers.</p>"},{"location":"getting-started/quick-start/#self-hosted-mode-with-backend","title":"Self-Hosted Mode (With Backend)","text":"<p>In this mode, AgentBridge connects to your backend via WebSockets:</p> <pre><code>// Example with WebSocket\nimport { WebSocketProvider } from '@agentbridge/communication-websocket';\n\nconst wsProvider = new WebSocketProvider({\n  url: 'wss://your-server.com/agent-bridge',\n  // Optional authentication\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n});\n\n// Use this provider with AgentBridgeProvider\n</code></pre> <p>See the WebSocket Configuration documentation for more options.</p>"},{"location":"getting-started/quick-start/#complete-example","title":"Complete Example","text":"<p>Here's a complete example with React that registers both components and functions:</p> <pre><code>import React, { useState } from 'react';\nimport { AgentBridgeProvider, useAgentComponent, useAgentFunction } from '@agentbridge/react';\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\n// Create a communication provider\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key',\n});\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  // Register this component with AgentBridge\n  useAgentComponent('counter-component', {\n    properties: { count },\n    actions: {\n      increment: () =&gt; {\n        setCount(count + 1);\n        return true;\n      },\n      decrement: () =&gt; {\n        setCount(count - 1);\n        return true;\n      },\n      reset: () =&gt; {\n        setCount(0);\n        return true;\n      }\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Counter: {count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count - 1)}&gt;Decrement&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(0)}&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction Calculator() {\n  // Register a function\n  useAgentFunction({\n    name: 'calculate',\n    description: 'Perform a calculation',\n    parameters: {\n      type: 'object',\n      properties: {\n        operation: { type: 'string', enum: ['add', 'subtract', 'multiply', 'divide'] },\n        a: { type: 'number' },\n        b: { type: 'number' }\n      },\n      required: ['operation', 'a', 'b']\n    },\n    handler: async (params) =&gt; {\n      const { operation, a, b } = params;\n\n      switch (operation) {\n        case 'add':\n          return { result: a + b };\n        case 'subtract':\n          return { result: a - b };\n        case 'multiply':\n          return { result: a * b };\n        case 'divide':\n          if (b === 0) {\n            throw new Error('Division by zero');\n          }\n          return { result: a / b };\n        default:\n          throw new Error('Unknown operation');\n      }\n    }\n  });\n\n  return null; // This component doesn't render anything\n}\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider \n      applicationId=\"your-app-id\"\n      communicationProvider={ablyProvider}\n    &gt;\n      &lt;div&gt;\n        &lt;h1&gt;AgentBridge Demo&lt;/h1&gt;\n        &lt;Counter /&gt;\n        &lt;Calculator /&gt;\n      &lt;/div&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>React SDK: Learn more about the React SDK</li> <li>Angular SDK: Learn more about the Angular SDK</li> <li>React Native SDK: Learn more about the React Native SDK</li> <li>Component Registry: Learn more about component registration</li> <li>Function Registry: Learn more about function registration</li> <li>Security Best Practices: Secure your AgentBridge implementation</li> </ul>"},{"location":"mobile/flutter-api/","title":"Flutter API Reference","text":"<p>This page provides detailed API reference for the AgentBridge Flutter SDK.</p>"},{"location":"mobile/flutter-api/#core-classes","title":"Core Classes","text":""},{"location":"mobile/flutter-api/#agentbridge","title":"AgentBridge","text":"<p>The main class for interacting with AgentBridge in Flutter applications.</p> <pre><code>class AgentBridge {\n  /// Singleton instance\n  static final AgentBridge instance = AgentBridge._();\n\n  /// Private constructor for singleton\n  AgentBridge._();\n\n  /// Initialize with configuration\n  Future&lt;void&gt; initialize({\n    required AgentBridgeConfig config,\n  }) async {\n    // Initialization logic\n  }\n\n  /// Register a function that can be called by AI agents\n  void registerFunction({\n    required String name,\n    required String description,\n    required Map&lt;String, dynamic&gt; parameters,\n    required Future&lt;dynamic&gt; Function(Map&lt;String, dynamic&gt;) handler,\n  }) {\n    // Registration logic\n  }\n\n  /// Execute a function by name with parameters\n  Future&lt;dynamic&gt; executeFunction(\n    String name,\n    Map&lt;String, dynamic&gt; params,\n  ) async {\n    // Execution logic\n  }\n\n  /// Register a UI component\n  void registerComponent(ComponentDefinition component) {\n    // Component registration logic\n  }\n\n  /// Register design information\n  void registerDesignInfo(Map&lt;String, dynamic&gt; designInfo) {\n    // Design info registration logic\n  }\n\n  /// Register an MCP adapter\n  void registerMCPAdapter(String type, MCPAdapter adapter) {\n    // MCP adapter registration logic\n  }\n\n  /// Get schema for a specific MCP type\n  Map&lt;String, dynamic&gt; getMCPSchema(String type) {\n    // Schema retrieval logic\n  }\n\n  /// Handle an MCP function call\n  Future&lt;dynamic&gt; handleMCPFunctionCall(\n    String type,\n    Map&lt;String, dynamic&gt; functionCall,\n  ) async {\n    // Function call handling logic\n  }\n}\n</code></pre>"},{"location":"mobile/flutter-api/#agentbridgeconfig","title":"AgentBridgeConfig","text":"<p>Configuration for the AgentBridge instance.</p> <pre><code>class AgentBridgeConfig {\n  /// App ID for the AgentBridge service\n  final String appId;\n\n  /// API key for authentication\n  final String apiKey;\n\n  /// Environment to use (development, production)\n  final String environment;\n\n  /// Whether to enable debug logging\n  final bool debug;\n\n  /// Custom endpoint for AgentBridge service\n  final String? endpoint;\n\n  AgentBridgeConfig({\n    required this.appId,\n    required this.apiKey,\n    this.environment = 'production',\n    this.debug = false,\n    this.endpoint,\n  });\n}\n</code></pre>"},{"location":"mobile/flutter-api/#componentdefinition","title":"ComponentDefinition","text":"<p>Defines a UI component for registration with AgentBridge.</p> <pre><code>class ComponentDefinition {\n  /// Unique identifier for the component\n  final String id;\n\n  /// Type of component (button, textfield, etc.)\n  final String type;\n\n  /// Properties of the component\n  final Map&lt;String, dynamic&gt; properties;\n\n  /// Actions supported by the component\n  final List&lt;String&gt; actions;\n\n  /// Additional metadata about the component\n  final Map&lt;String, dynamic&gt;? metadata;\n\n  /// IDs of child components\n  final List&lt;String&gt;? children;\n\n  ComponentDefinition({\n    required this.id,\n    required this.type,\n    required this.properties,\n    required this.actions,\n    this.metadata,\n    this.children,\n  });\n\n  /// Convert to JSON representation\n  Map&lt;String, dynamic&gt; toJson() {\n    return {\n      'id': id,\n      'type': type,\n      'properties': properties,\n      'actions': actions,\n      if (metadata != null) 'metadata': metadata,\n      if (children != null) 'children': children,\n    };\n  }\n}\n</code></pre>"},{"location":"mobile/flutter-api/#mixins","title":"Mixins","text":""},{"location":"mobile/flutter-api/#agentcomponentmixin","title":"AgentComponentMixin","text":"<p>Mixin for Flutter widgets to make them automatically register with AgentBridge.</p> <pre><code>mixin AgentComponentMixin on StatefulWidget {\n  /// Get the component definition for this widget\n  ComponentDefinition getComponentDefinition();\n\n  @override\n  State&lt;StatefulWidget&gt; createState() {\n    // Create state and handle registration\n  }\n}\n</code></pre>"},{"location":"mobile/flutter-api/#design-collection","title":"Design Collection","text":""},{"location":"mobile/flutter-api/#flutterdesigncollector","title":"FlutterDesignCollector","text":"<p>Collects design information from Flutter widgets.</p> <pre><code>class FlutterDesignCollector {\n  /// Configuration options for design collection\n  final CaptureOptions captureOptions;\n\n  FlutterDesignCollector({\n    this.captureOptions = const CaptureOptions(),\n  });\n\n  /// Capture design information from the current context\n  Map&lt;String, dynamic&gt; captureDesignInfo(BuildContext context) {\n    // Capture logic\n    return {};\n  }\n\n  /// Enable or disable debug mode\n  void setDebugMode(bool enabled) {\n    // Debug mode logic\n  }\n\n  /// Visualize component boundaries (debug only)\n  void visualizeComponents(BuildContext context) {\n    // Visualization logic\n  }\n}\n</code></pre>"},{"location":"mobile/flutter-api/#captureoptions","title":"CaptureOptions","text":"<p>Options for design information capture.</p> <pre><code>class CaptureOptions {\n  /// Whether to include styling information\n  final bool includeStyles;\n\n  /// Whether to include disabled components\n  final bool includeDisabledComponents;\n\n  /// Whether to include hidden components\n  final bool includeHiddenComponents;\n\n  /// Whether to include position information\n  final bool includePositions;\n\n  /// Maximum depth of component tree to capture\n  final int maxDepth;\n\n  /// Whether to capture screenshots (if available)\n  final bool captureScreenshots;\n\n  const CaptureOptions({\n    this.includeStyles = true,\n    this.includeDisabledComponents = true,\n    this.includeHiddenComponents = false,\n    this.includePositions = true,\n    this.maxDepth = 10,\n    this.captureScreenshots = false,\n  });\n}\n</code></pre>"},{"location":"mobile/flutter-api/#mcp-support","title":"MCP Support","text":""},{"location":"mobile/flutter-api/#mcpadapter","title":"MCPAdapter","text":"<p>Interface for Model Context Protocol adapters.</p> <pre><code>abstract class MCPAdapter {\n  /// Convert function definition to MCP schema\n  Map&lt;String, dynamic&gt; convertToMCPSchema(Map&lt;String, dynamic&gt; functionDef);\n\n  /// Convert MCP call to AgentBridge format\n  Map&lt;String, dynamic&gt; convertFromMCPCall(Map&lt;String, dynamic&gt; mcpCall);\n\n  /// Map context to MCP format\n  Map&lt;String, dynamic&gt; mapContext(Map&lt;String, dynamic&gt; context);\n\n  /// Map response to MCP format\n  Map&lt;String, dynamic&gt; mapResponse(Map&lt;String, dynamic&gt; response);\n\n  /// Get schema for all functions\n  Map&lt;String, dynamic&gt; getFunctionSchema();\n}\n</code></pre>"},{"location":"mobile/flutter-api/#mcpmanager","title":"MCPManager","text":"<p>Manages MCP adapters for AgentBridge.</p> <pre><code>class MCPManager {\n  /// Register an adapter for a specific MCP type\n  void registerAdapter(String type, MCPAdapter adapter) {\n    // Registration logic\n  }\n\n  /// Get schema for a specific MCP type\n  Map&lt;String, dynamic&gt; getSchema(String type) {\n    // Schema retrieval logic\n  }\n\n  /// Handle function call from a specific MCP type\n  Future&lt;dynamic&gt; handleFunctionCall(\n    String type,\n    Map&lt;String, dynamic&gt; functionCall,\n  ) async {\n    // Function call handling logic\n  }\n\n  /// Set global context for all MCP interactions\n  void setGlobalContext(Map&lt;String, dynamic&gt; context) {\n    // Context setting logic\n  }\n}\n</code></pre>"},{"location":"mobile/flutter-api/#utility-classes","title":"Utility Classes","text":""},{"location":"mobile/flutter-api/#functionregistry","title":"FunctionRegistry","text":"<p>Manages function registrations for AgentBridge.</p> <pre><code>class FunctionRegistry {\n  /// Register a function\n  void registerFunction({\n    required String name,\n    required String description,\n    required Map&lt;String, dynamic&gt; parameters,\n    required Future&lt;dynamic&gt; Function(Map&lt;String, dynamic&gt;) handler,\n  }) {\n    // Registration logic\n  }\n\n  /// Get function by name\n  Map&lt;String, dynamic&gt;? getFunction(String name) {\n    // Retrieval logic\n  }\n\n  /// Get all registered functions\n  List&lt;Map&lt;String, dynamic&gt;&gt; getAllFunctions() {\n    // Retrieval logic\n  }\n\n  /// Execute a function by name with parameters\n  Future&lt;dynamic&gt; executeFunction(\n    String name,\n    Map&lt;String, dynamic&gt; params,\n  ) async {\n    // Execution logic\n  }\n}\n</code></pre>"},{"location":"mobile/flutter-api/#componentregistry","title":"ComponentRegistry","text":"<p>Manages component registrations for AgentBridge.</p> <pre><code>class ComponentRegistry {\n  /// Register a component\n  void registerComponent(ComponentDefinition component) {\n    // Registration logic\n  }\n\n  /// Update a component\n  void updateComponent(String id, Map&lt;String, dynamic&gt; updates) {\n    // Update logic\n  }\n\n  /// Unregister a component\n  void unregisterComponent(String id) {\n    // Unregistration logic\n  }\n\n  /// Get all registered components\n  List&lt;ComponentDefinition&gt; getAllComponents() {\n    // Retrieval logic\n  }\n\n  /// Get component by ID\n  ComponentDefinition? getComponent(String id) {\n    // Retrieval logic\n  }\n}\n</code></pre> <p>For detailed usage examples, refer to the Flutter Components guide and the Mobile Features overview. </p>"},{"location":"mobile/mobile-features/","title":"Mobile Features","text":"<p>This page documents the mobile-specific features available in AgentBridge for both Flutter and React Native platforms.</p>"},{"location":"mobile/mobile-features/#cross-platform-features","title":"Cross-Platform Features","text":"<p>The following features are available on both Flutter and React Native platforms:</p>"},{"location":"mobile/mobile-features/#native-ui-components","title":"Native UI Components","text":"<p>AgentBridge provides platform-specific UI components that follow native design patterns while maintaining a consistent API for AI agent interactions:</p> <ul> <li>Buttons and action items</li> <li>Text fields and form inputs</li> <li>Selection components (dropdown, pickers)</li> <li>Toggle components (switch, checkbox)</li> <li>List views and collection views</li> <li>Cards and containers</li> <li>Navigation components</li> <li>Modals and dialogs</li> </ul>"},{"location":"mobile/mobile-features/#device-capabilities","title":"Device Capabilities","text":"<p>Access to device-specific capabilities through consistent APIs:</p> <pre><code>// React Native\nimport { DeviceCapabilities } from '@agentbridge/react-native';\n\n// Check if a capability is available\nconst hasCamera = await DeviceCapabilities.isAvailable('camera');\n\n// Request permission for a capability\nconst cameraPermission = await DeviceCapabilities.requestPermission('camera');\n\n// Use a device capability\nconst photo = await DeviceCapabilities.useCapability('camera', {\n  mode: 'photo',\n  quality: 'high'\n});\n</code></pre> <pre><code>// Flutter\nimport 'package:agentbridge/device_capabilities.dart';\n\n// Check if a capability is available\nfinal hasCamera = await DeviceCapabilities.isAvailable('camera');\n\n// Request permission for a capability\nfinal cameraPermission = await DeviceCapabilities.requestPermission('camera');\n\n// Use a device capability\nfinal photo = await DeviceCapabilities.useCapability('camera', {\n  'mode': 'photo',\n  'quality': 'high'\n});\n</code></pre>"},{"location":"mobile/mobile-features/#offline-support","title":"Offline Support","text":"<p>AgentBridge provides offline capabilities for mobile applications:</p> <ul> <li>Function queue for executing operations when connectivity is restored</li> <li>Local storage for persisting state and user data</li> <li>Synchronization mechanisms for resolving conflicts</li> </ul> <pre><code>// React Native\nimport { OfflineSupport } from '@agentbridge/react-native';\n\n// Queue a function for execution\nOfflineSupport.queueFunction('submitForm', formData);\n\n// Check sync status\nconst syncStatus = await OfflineSupport.getSyncStatus();\n\n// Force synchronization\nawait OfflineSupport.synchronize();\n</code></pre> <pre><code>// Flutter\nimport 'package:agentbridge/offline_support.dart';\n\n// Queue a function for execution\nOfflineSupport.queueFunction('submitForm', formData);\n\n// Check sync status\nfinal syncStatus = await OfflineSupport.getSyncStatus();\n\n// Force synchronization\nawait OfflineSupport.synchronize();\n</code></pre>"},{"location":"mobile/mobile-features/#responsive-design-support","title":"Responsive Design Support","text":"<p>Utilities for creating responsive designs that adapt to different screen sizes and orientations:</p> <pre><code>// React Native\nimport { ResponsiveLayout } from '@agentbridge/react-native';\n\n// Get current device info\nconst deviceInfo = ResponsiveLayout.getDeviceInfo();\n\n// Use responsive dimensions\nconst cardWidth = ResponsiveLayout.getDimension('card.width');\n\n// Respond to orientation changes\nResponsiveLayout.onOrientationChange((orientation) =&gt; {\n  // Update layout\n});\n</code></pre> <pre><code>// Flutter\nimport 'package:agentbridge/responsive_layout.dart';\n\n// Get current device info\nfinal deviceInfo = ResponsiveLayout.getDeviceInfo();\n\n// Use responsive dimensions\nfinal cardWidth = ResponsiveLayout.getDimension('card.width');\n\n// Respond to orientation changes\nResponsiveLayout.onOrientationChange((orientation) {\n  // Update layout\n});\n</code></pre>"},{"location":"mobile/mobile-features/#flutter-specific-features","title":"Flutter-Specific Features","text":"<p>Features specific to the Flutter platform:</p>"},{"location":"mobile/mobile-features/#widget-lifecycle-management","title":"Widget Lifecycle Management","text":"<pre><code>import 'package:agentbridge/lifecycle_manager.dart';\n\nclass MyStatefulWidget extends StatefulWidget with LifecycleAwareMixin {\n  @override\n  void onLifecycleEvent(LifecycleEvent event) {\n    switch (event) {\n      case LifecycleEvent.create:\n        // Widget created\n        break;\n      case LifecycleEvent.mount:\n        // Widget mounted\n        break;\n      case LifecycleEvent.update:\n        // Widget updated\n        break;\n      case LifecycleEvent.unmount:\n        // Widget unmounted\n        break;\n    }\n  }\n}\n</code></pre>"},{"location":"mobile/mobile-features/#custom-painters","title":"Custom Painters","text":"<p>Support for AI-controlled custom painters in Flutter:</p> <pre><code>import 'package:agentbridge/custom_painter.dart';\n\nclass MyPainter extends AgentCustomPainter {\n  @override\n  void paint(Canvas canvas, Size size) {\n    // Standard painting logic\n  }\n\n  // Method that can be called by AI agents\n  void drawCircleAtPosition(double x, double y, double radius) {\n    // Implementation\n  }\n}\n</code></pre>"},{"location":"mobile/mobile-features/#animation-control","title":"Animation Control","text":"<p>Allow AI agents to control Flutter animations:</p> <pre><code>import 'package:agentbridge/animation_controller.dart';\n\nfinal animationController = AgentAnimationController(\n  id: 'fade-animation',\n  duration: Duration(milliseconds: 500),\n  vsync: this,\n);\n\n// In component definition\nregisterComponent(ComponentDefinition(\n  id: 'fade-animation',\n  type: 'animation',\n  properties: {\n    'duration': 500,\n    'value': animationController.value,\n    'status': animationController.status.toString(),\n  },\n  actions: ['play', 'pause', 'reset', 'reverse'],\n));\n</code></pre>"},{"location":"mobile/mobile-features/#react-native-specific-features","title":"React Native-Specific Features","text":"<p>Features specific to the React Native platform:</p>"},{"location":"mobile/mobile-features/#native-module-bridge","title":"Native Module Bridge","text":"<p>Simplified access to native modules:</p> <pre><code>import { NativeBridge } from '@agentbridge/react-native';\n\n// Register a native module\nNativeBridge.registerNativeModule('Biometrics', {\n  authenticate: async () =&gt; {\n    // Implementation\n    return { success: true };\n  }\n});\n\n// Use a native module\nconst result = await NativeBridge.callNativeMethod('Biometrics', 'authenticate');\n</code></pre>"},{"location":"mobile/mobile-features/#component-hooks","title":"Component Hooks","text":"<p>React hooks for integrating with AgentBridge:</p> <pre><code>import { useAgentState, useAgentAction } from '@agentbridge/react-native';\n\nfunction MyComponent() {\n  // State that can be observed and modified by AI agents\n  const [value, setValue] = useAgentState('my-input', '');\n\n  // Register an action that can be triggered by AI agents\n  const handleSubmit = useAgentAction('submit-form', async () =&gt; {\n    // Implementation\n    return { success: true };\n  });\n\n  return (\n    &lt;View&gt;\n      &lt;TextInput value={value} onChangeText={setValue} /&gt;\n      &lt;Button title=\"Submit\" onPress={handleSubmit} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/mobile-features/#jsi-optimizations","title":"JSI Optimizations","text":"<p>Performance optimizations using JavaScript Interface (JSI):</p> <pre><code>import { JsiOptimizer } from '@agentbridge/react-native';\n\n// Register JSI functions for performance-critical operations\nJsiOptimizer.registerJsiFunction('processImageData', (imageData) =&gt; {\n  // High-performance image processing\n  return processedData;\n});\n\n// Use JSI function\nconst result = JsiOptimizer.callJsiFunction('processImageData', imageData);\n</code></pre>"},{"location":"mobile/mobile-features/#integration-with-mobile-ai","title":"Integration with Mobile AI","text":"<p>AgentBridge provides integration with on-device AI models:</p>"},{"location":"mobile/mobile-features/#on-device-models","title":"On-Device Models","text":"<pre><code>// React Native\nimport { OnDeviceAI } from '@agentbridge/react-native';\n\n// Initialize on-device model\nawait OnDeviceAI.initializeModel('text-classification');\n\n// Use on-device model\nconst result = await OnDeviceAI.executeModel('text-classification', {\n  text: 'Sample text to classify'\n});\n</code></pre> <pre><code>// Flutter\nimport 'package:agentbridge/on_device_ai.dart';\n\n// Initialize on-device model\nawait OnDeviceAI.initializeModel('text-classification');\n\n// Use on-device model\nfinal result = await OnDeviceAI.executeModel('text-classification', {\n  'text': 'Sample text to classify'\n});\n</code></pre>"},{"location":"mobile/mobile-features/#hybrid-ai-execution","title":"Hybrid AI Execution","text":"<p>Intelligently switch between cloud and on-device AI based on connectivity, battery, and performance requirements:</p> <pre><code>// React Native\nimport { HybridAI } from '@agentbridge/react-native';\n\n// Configure hybrid execution\nHybridAI.configure({\n  preferOnDevice: true,\n  batteryThreshold: 0.2, // Switch to cloud if battery below 20%\n  networkRequirement: 'any', // 'wifi', 'any', or 'none'\n});\n\n// Execute AI function with automatic routing\nconst result = await HybridAI.execute('generateResponse', {\n  prompt: 'Hello, how can you help me?'\n});\n</code></pre> <pre><code>// Flutter\nimport 'package:agentbridge/hybrid_ai.dart';\n\n// Configure hybrid execution\nHybridAI.configure({\n  'preferOnDevice': true,\n  'batteryThreshold': 0.2, // Switch to cloud if battery below 20%\n  'networkRequirement': 'any', // 'wifi', 'any', or 'none'\n});\n\n// Execute AI function with automatic routing\nfinal result = await HybridAI.execute('generateResponse', {\n  'prompt': 'Hello, how can you help me?'\n});\n</code></pre>"},{"location":"mobile/mobile-features/#platform-integration","title":"Platform Integration","text":""},{"location":"mobile/mobile-features/#deep-linking","title":"Deep Linking","text":"<p>Support for deep linking to specific parts of your application:</p> <pre><code>// React Native\nimport { DeepLinking } from '@agentbridge/react-native';\n\n// Register deep link handlers\nDeepLinking.registerHandler('product/:id', (params) =&gt; {\n  // Navigate to product page with params.id\n});\n\n// Create a deep link\nconst deepLink = DeepLinking.createLink('product/123', {\n  utm_source: 'email',\n  utm_campaign: 'summer_sale'\n});\n</code></pre> <pre><code>// Flutter\nimport 'package:agentbridge/deep_linking.dart';\n\n// Register deep link handlers\nDeepLinking.registerHandler('product/:id', (params) {\n  // Navigate to product page with params['id']\n});\n\n// Create a deep link\nfinal deepLink = DeepLinking.createLink('product/123', {\n  'utm_source': 'email',\n  'utm_campaign': 'summer_sale'\n});\n</code></pre>"},{"location":"mobile/mobile-features/#push-notifications","title":"Push Notifications","text":"<p>Integration with platform-specific push notification services:</p> <pre><code>// React Native\nimport { PushNotifications } from '@agentbridge/react-native';\n\n// Request permission\nconst hasPermission = await PushNotifications.requestPermission();\n\n// Register device token\nawait PushNotifications.registerDeviceToken(deviceToken);\n\n// Handle notification\nPushNotifications.onNotificationReceived((notification) =&gt; {\n  // Process notification\n});\n</code></pre> <pre><code>// Flutter\nimport 'package:agentbridge/push_notifications.dart';\n\n// Request permission\nfinal hasPermission = await PushNotifications.requestPermission();\n\n// Register device token\nawait PushNotifications.registerDeviceToken(deviceToken);\n\n// Handle notification\nPushNotifications.onNotificationReceived((notification) {\n  // Process notification\n});\n</code></pre>"},{"location":"mobile/mobile-features/#best-practices","title":"Best Practices","text":""},{"location":"mobile/mobile-features/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Minimize Bridge Crossings: In React Native, minimize the number of calls that cross the JavaScript-Native bridge</li> <li>Use Native Rendering: Utilize platform-specific rendering optimizations when available</li> <li>Implement Virtualization: For long lists, use virtualized list components</li> <li>Optimize Asset Loading: Use appropriate image formats and lazy loading techniques</li> <li>Enable ProGuard/R8: On Android, use code shrinking to reduce app size</li> </ol>"},{"location":"mobile/mobile-features/#battery-efficiency","title":"Battery Efficiency","text":"<ol> <li>Throttle Updates: Limit the frequency of UI updates and background operations</li> <li>Batch Network Requests: Group multiple network requests to reduce radio usage</li> <li>Monitor Battery Level: Adjust functionality based on battery level</li> <li>Use Efficient APIs: Choose APIs that minimize battery usage</li> </ol>"},{"location":"mobile/mobile-features/#security-considerations","title":"Security Considerations","text":"<ol> <li>Secure Storage: Use platform-specific secure storage for sensitive data</li> <li>Network Security: Implement TLS for all network communications</li> <li>Input Validation: Validate all inputs, especially those from AI agents</li> <li>Permission Management: Request only necessary permissions</li> <li>Code Obfuscation: Implement code obfuscation to protect intellectual property</li> </ol> <p>For detailed examples of mobile components, refer to the platform-specific guides: - Flutter Components - React Native Components </p>"},{"location":"mobile/flutter/components/","title":"Flutter Components","text":"<p>This page documents all the UI components available in the AgentBridge Flutter SDK. These components are designed to be easily controlled by AI agents while providing a native Flutter experience.</p>"},{"location":"mobile/flutter/components/#core-components","title":"Core Components","text":"<p>The AgentBridge Flutter SDK provides several ready-to-use components that can be controlled by AI agents:</p>"},{"location":"mobile/flutter/components/#agentbutton","title":"AgentButton","text":"<p>A button component that can be controlled by AI agents.</p> <pre><code>AgentButton(\n  id: 'submit-button',\n  label: 'Submit',\n  onPressed: () {\n    // Your action here\n  },\n  style: AgentButtonStyle(\n    backgroundColor: Colors.blue,\n    textColor: Colors.white,\n    borderRadius: 8.0,\n    padding: const EdgeInsets.symmetric(\n      horizontal: 16.0, \n      vertical: 8.0\n    ),\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the button <code>label</code> String Text to display on the button <code>onPressed</code> Function Callback function when button is pressed <code>style</code> AgentButtonStyle Style configuration for the button <code>disabled</code> bool Whether the button is disabled <code>loading</code> bool Whether to show a loading indicator <code>icon</code> Icon Optional icon to display with the button <code>iconPosition</code> IconPosition Position of the icon (left or right)"},{"location":"mobile/flutter/components/#agenttextfield","title":"AgentTextField","text":"<p>A text field component that can be controlled by AI agents.</p> <pre><code>AgentTextField(\n  id: 'email-input',\n  label: 'Email Address',\n  placeholder: 'Enter your email',\n  onChanged: (value) {\n    // Handle text change\n  },\n  onSubmitted: (value) {\n    // Handle submission\n  },\n  keyboardType: TextInputType.emailAddress,\n  style: AgentTextFieldStyle(\n    borderColor: Colors.grey,\n    focusedBorderColor: Colors.blue,\n    borderRadius: 4.0,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_1","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the text field <code>label</code> String Label text for the field <code>placeholder</code> String Placeholder text when empty <code>value</code> String Current value of the text field <code>onChanged</code> Function(String) Callback when text changes <code>onSubmitted</code> Function(String) Callback when the enter key is pressed <code>keyboardType</code> TextInputType Type of keyboard to show <code>obscureText</code> bool Whether to hide the text (for passwords) <code>maxLines</code> int Maximum number of lines to show <code>minLines</code> int Minimum number of lines to show <code>maxLength</code> int Maximum length of the text <code>enabled</code> bool Whether the text field is enabled <code>style</code> AgentTextFieldStyle Style configuration for the text field"},{"location":"mobile/flutter/components/#agentswitch","title":"AgentSwitch","text":"<p>A switch component that can be toggled on or off by AI agents.</p> <pre><code>AgentSwitch(\n  id: 'notifications-switch',\n  label: 'Enable Notifications',\n  value: notificationsEnabled,\n  onChanged: (newValue) {\n    setState(() {\n      notificationsEnabled = newValue;\n    });\n  },\n  style: AgentSwitchStyle(\n    activeColor: Colors.green,\n    inactiveColor: Colors.grey,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_2","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the switch <code>label</code> String Label text for the switch <code>value</code> bool Current state of the switch <code>onChanged</code> Function(bool) Callback when switch value changes <code>disabled</code> bool Whether the switch is disabled <code>style</code> AgentSwitchStyle Style configuration for the switch"},{"location":"mobile/flutter/components/#agentdropdown","title":"AgentDropdown","text":"<p>A dropdown component that allows selection from a list of options.</p> <pre><code>AgentDropdown&lt;String&gt;(\n  id: 'country-dropdown',\n  label: 'Select Country',\n  value: selectedCountry,\n  items: countries.map((country) =&gt; \n    AgentDropdownItem(\n      value: country,\n      label: country,\n    )\n  ).toList(),\n  onChanged: (newValue) {\n    setState(() {\n      selectedCountry = newValue;\n    });\n  },\n  style: AgentDropdownStyle(\n    borderColor: Colors.grey,\n    borderRadius: 4.0,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_3","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the dropdown <code>label</code> String Label text for the dropdown <code>value</code> T Currently selected value <code>items</code> List&gt; List of dropdown items <code>onChanged</code> Function(T) Callback when selection changes <code>hint</code> String Hint text when no item is selected <code>disabled</code> bool Whether the dropdown is disabled <code>style</code> AgentDropdownStyle Style configuration for the dropdown"},{"location":"mobile/flutter/components/#agentcheckbox","title":"AgentCheckbox","text":"<p>A checkbox component that can be checked or unchecked by AI agents.</p> <pre><code>AgentCheckbox(\n  id: 'terms-checkbox',\n  label: 'I agree to the terms and conditions',\n  value: termsAccepted,\n  onChanged: (newValue) {\n    setState(() {\n      termsAccepted = newValue;\n    });\n  },\n  style: AgentCheckboxStyle(\n    activeColor: Colors.blue,\n    checkColor: Colors.white,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_4","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the checkbox <code>label</code> String Label text for the checkbox <code>value</code> bool Current state of the checkbox <code>onChanged</code> Function(bool) Callback when checkbox value changes <code>disabled</code> bool Whether the checkbox is disabled <code>style</code> AgentCheckboxStyle Style configuration for the checkbox"},{"location":"mobile/flutter/components/#agentslider","title":"AgentSlider","text":"<p>A slider component that can be adjusted by AI agents.</p> <pre><code>AgentSlider(\n  id: 'volume-slider',\n  label: 'Volume',\n  value: volume,\n  min: 0.0,\n  max: 100.0,\n  divisions: 10,\n  onChanged: (newValue) {\n    setState(() {\n      volume = newValue;\n    });\n  },\n  style: AgentSliderStyle(\n    activeColor: Colors.blue,\n    inactiveColor: Colors.grey,\n  ),\n)\n</code></pre>"},{"location":"mobile/flutter/components/#properties_5","title":"Properties","text":"Property Type Description <code>id</code> String Unique identifier for the slider <code>label</code> String Label text for the slider <code>value</code> double Current value of the slider <code>min</code> double Minimum value of the slider <code>max</code> double Maximum value of the slider <code>divisions</code> int Number of discrete divisions <code>onChanged</code> Function(double) Callback when slider value changes <code>disabled</code> bool Whether the slider is disabled <code>style</code> AgentSliderStyle Style configuration for the slider"},{"location":"mobile/flutter/components/#building-custom-components","title":"Building Custom Components","text":"<p>You can create custom components that can be controlled by AI agents by using the <code>AgentComponentMixin</code>. Here's how to create a custom component:</p>"},{"location":"mobile/flutter/components/#creating-a-custom-component","title":"Creating a Custom Component","text":"<pre><code>class CustomAgentCard extends StatefulWidget with AgentComponentMixin {\n  final String id;\n  final String title;\n  final String description;\n  final VoidCallback? onTap;\n\n  CustomAgentCard({\n    required this.id,\n    required this.title,\n    this.description = '',\n    this.onTap,\n  }) : super(id: id);\n\n  @override\n  _CustomAgentCardState createState() =&gt; _CustomAgentCardState();\n\n  @override\n  Map&lt;String, dynamic&gt; getAgentProperties() {\n    return {\n      'title': title,\n      'description': description,\n      'canTap': onTap != null,\n    };\n  }\n\n  @override\n  List&lt;String&gt; getAgentActions() {\n    return ['tap'];\n  }\n\n  @override\n  Future&lt;dynamic&gt; handleAgentAction(String action, Map&lt;String, dynamic&gt; params) async {\n    if (action == 'tap' &amp;&amp; onTap != null) {\n      onTap!();\n      return true;\n    }\n    return false;\n  }\n}\n\nclass _CustomAgentCardState extends State&lt;CustomAgentCard&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      child: InkWell(\n        onTap: widget.onTap,\n        child: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(\n                widget.title,\n                style: Theme.of(context).textTheme.headline6,\n              ),\n              if (widget.description.isNotEmpty)\n                Text(\n                  widget.description,\n                  style: Theme.of(context).textTheme.bodyText2,\n                ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/components/#using-the-custom-component","title":"Using the Custom Component","text":"<pre><code>CustomAgentCard(\n  id: 'feature-card',\n  title: 'Premium Feature',\n  description: 'Unlock this feature by upgrading your account',\n  onTap: () {\n    // Handle tap\n  },\n)\n</code></pre>"},{"location":"mobile/flutter/components/#component-registration","title":"Component Registration","text":"<p>All components using <code>AgentComponentMixin</code> are automatically registered with the AgentBridge registry when they are rendered. This makes them discoverable and controllable by AI agents.</p>"},{"location":"mobile/flutter/components/#best-practices","title":"Best Practices","text":"<ol> <li>Unique IDs: Always provide unique IDs for your components</li> <li>Descriptive Properties: Make your component properties descriptive for AI agents</li> <li>Consistent Actions: Use consistent action names across similar components</li> <li>Proper State Management: Update your component state properly when actions are triggered</li> <li>Accessibility: Ensure your components are accessible to all users</li> <li>Error Handling: Handle errors gracefully in action handlers</li> </ol>"},{"location":"mobile/flutter/components/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the AgentBridge Flutter API</li> <li>Explore Mobile-Specific Features</li> <li>See Examples of AgentBridge components in action </li> </ul>"},{"location":"mobile/flutter/overview/","title":"Flutter SDK Overview","text":"<p>The AgentBridge Flutter SDK provides widgets, services, and utilities that integrate the AgentBridge framework with Flutter applications. This SDK makes it easy to expose application functionality and UI components to AI agents in a mobile environment.</p>"},{"location":"mobile/flutter/overview/#features","title":"Features","text":"<ul> <li>Flutter Integration: Seamless integration with Flutter's widget system</li> <li>State Management: Uses Flutter's state management for component tracking</li> <li>UI Widgets: Ready-to-use Flutter widgets that can be controlled by AI agents</li> <li>Mobile-Specific Functions: Functions tailored for mobile applications (vibration, sensors, etc.)</li> <li>Provider Integration: Works with Provider for dependency injection</li> <li>Utilities: Helper classes and mixins for easy integration</li> </ul>"},{"location":"mobile/flutter/overview/#installation","title":"Installation","text":"<p>Add AgentBridge to your Flutter application by adding it to your <code>pubspec.yaml</code> file:</p> <pre><code>dependencies:\n  agentbridge: ^0.1.0\n</code></pre> <p>Then run:</p> <pre><code>flutter pub get\n</code></pre>"},{"location":"mobile/flutter/overview/#basic-setup","title":"Basic Setup","text":"<p>To use AgentBridge in your Flutter application, wrap your app with the <code>AgentBridgeProvider</code>:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    // Create an AgentBridge instance\n    final bridge = AgentBridge();\n\n    return MaterialApp(\n      title: 'AgentBridge Demo',\n      home: AgentBridgeProvider(\n        bridge: bridge,\n        child: MyHomePage(),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#registering-functions","title":"Registering Functions","text":"<p>You can register functions that AI agents can call using the <code>AgentBridge</code> instance:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key}) : super(key: key);\n\n  @override\n  _MyHomePageState createState() =&gt; _MyHomePageState();\n}\n\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\n  @override\n  void initState() {\n    super.initState();\n\n    // Get the AgentBridge instance from the provider\n    final bridge = context.agentBridge();\n\n    // Register a function\n    bridge.registerFunction(\n      name: 'getDeviceInfo',\n      description: 'Get information about the device',\n      handler: (params, context) async {\n        return {\n          'platform': Theme.of(context).platform.toString(),\n          'screenSize': {\n            'width': MediaQuery.of(context).size.width,\n            'height': MediaQuery.of(context).size.height,\n          },\n          'timestamp': DateTime.now().toIso8601String(),\n        };\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('AgentBridge Demo'),\n      ),\n      body: Center(\n        child: Text('AgentBridge Flutter Demo'),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#using-agentbridge-widgets","title":"Using AgentBridge Widgets","text":"<p>The Flutter SDK provides several widgets that can be controlled by AI agents:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass MyUIPage extends StatefulWidget {\n  const MyUIPage({Key? key}) : super(key: key);\n\n  @override\n  _MyUIPageState createState() =&gt; _MyUIPageState();\n}\n\nclass _MyUIPageState extends State&lt;MyUIPage&gt; {\n  int _counter = 0;\n  String _inputValue = '';\n  bool _switchValue = false;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('AgentBridge Widgets'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            // Using AgentButton\n            AgentButton(\n              agentId: 'counter-button',\n              onPressed: _incrementCounter,\n              child: Text('Increment: $_counter'),\n            ),\n\n            // Using AgentTextField\n            AgentTextField(\n              agentId: 'text-input',\n              initialValue: _inputValue,\n              hintText: 'Enter some text',\n              onChanged: (value) {\n                setState(() {\n                  _inputValue = value;\n                });\n              },\n            ),\n\n            // Using AgentSwitch\n            AgentSwitch(\n              agentId: 'toggle-switch',\n              initialValue: _switchValue,\n              onChanged: (value) {\n                setState(() {\n                  _switchValue = value;\n                });\n              },\n            ),\n\n            // Using AgentDropdown\n            AgentDropdown&lt;String&gt;(\n              agentId: 'dropdown',\n              initialValue: 'option1',\n              items: [\n                DropdownMenuItem(\n                  value: 'option1',\n                  child: Text('Option 1'),\n                ),\n                DropdownMenuItem(\n                  value: 'option2',\n                  child: Text('Option 2'),\n                ),\n                DropdownMenuItem(\n                  value: 'option3',\n                  child: Text('Option 3'),\n                ),\n              ],\n              onChanged: (value) {\n                print('Selected: $value');\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#using-the-agentcomponentmixin","title":"Using the AgentComponentMixin","text":"<p>For more complex widgets, you can use the <code>AgentComponentMixin</code> to create your own components that can be controlled by AI agents:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass MyCustomWidget extends StatefulWidget {\n  final String agentId;\n  final String title;\n\n  const MyCustomWidget({\n    Key? key,\n    required this.agentId,\n    required this.title,\n  }) : super(key: key);\n\n  @override\n  _MyCustomWidgetState createState() =&gt; _MyCustomWidgetState();\n}\n\nclass _MyCustomWidgetState extends State&lt;MyCustomWidget&gt; with AgentComponentMixin {\n  bool _expanded = false;\n\n  @override\n  String get agentId =&gt; widget.agentId;\n\n  @override\n  String get agentType =&gt; 'custom-widget';\n\n  @override\n  Map&lt;String, dynamic&gt; get agentProps =&gt; {\n    'title': widget.title,\n    'expanded': _expanded,\n  };\n\n  void _toggleExpanded() {\n    setState(() {\n      _expanded = !_expanded;\n    });\n\n    // Update the component state\n    updateAgentState({\n      'expanded': _expanded,\n      'lastToggled': DateTime.now().toIso8601String(),\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      child: Column(\n        children: [\n          ListTile(\n            title: Text(widget.title),\n            trailing: IconButton(\n              icon: Icon(_expanded ? Icons.expand_less : Icons.expand_more),\n              onPressed: _toggleExpanded,\n            ),\n          ),\n          if (_expanded)\n            Padding(\n              padding: const EdgeInsets.all(16.0),\n              child: Text('Expanded content here'),\n            ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#calling-functions","title":"Calling Functions","text":"<p>You can call functions registered with AgentBridge from your Flutter code:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass FunctionCallPage extends StatefulWidget {\n  const FunctionCallPage({Key? key}) : super(key: key);\n\n  @override\n  _FunctionCallPageState createState() =&gt; _FunctionCallPageState();\n}\n\nclass _FunctionCallPageState extends State&lt;FunctionCallPage&gt; {\n  String _result = 'No result yet';\n\n  Future&lt;void&gt; _callFunction() async {\n    try {\n      // Get the adapter from the context\n      final adapter = context.adapter();\n\n      // Call a function\n      final result = await adapter.callFunction(\n        'getDeviceInfo',\n        {},\n      );\n\n      setState(() {\n        _result = result.data.toString();\n      });\n    } catch (e) {\n      setState(() {\n        _result = 'Error: $e';\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Function Call Demo'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            ElevatedButton(\n              onPressed: _callFunction,\n              child: const Text('Call Function'),\n            ),\n            const SizedBox(height: 20),\n            Text('Result: $_result'),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#mobile-specific-features","title":"Mobile-Specific Features","text":"<p>The Flutter SDK provides mobile-specific features that are not available in the web SDKs:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:agentbridge/agentbridge.dart';\n\nclass MobileFeaturesPage extends StatefulWidget {\n  const MobileFeaturesPage({Key? key}) : super(key: key);\n\n  @override\n  _MobileFeaturesPageState createState() =&gt; _MobileFeaturesPageState();\n}\n\nclass _MobileFeaturesPageState extends State&lt;MobileFeaturesPage&gt; {\n  @override\n  void initState() {\n    super.initState();\n\n    // Get the AgentBridge instance from the provider\n    final bridge = context.agentBridge();\n\n    // Register mobile-specific functions\n    bridge.registerFunction(\n      name: 'vibrate',\n      description: 'Make the device vibrate',\n      handler: (params, context) async {\n        // In a real implementation, we would use HapticFeedback or Vibration plugin\n        print('Vibrating device...');\n        return { 'success': true };\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Mobile Features'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            ElevatedButton(\n              onPressed: () {\n                context.callFunction('vibrate', {});\n              },\n              child: const Text('Vibrate Device'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"mobile/flutter/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about the Flutter components</li> <li>Explore the Core API</li> <li>Learn about authentication and permissions </li> </ul>"},{"location":"mobile/react-native/components/","title":"React Native Components","text":"<p>The AgentBridge React Native SDK provides components and utilities for integrating AI agent control into your mobile applications.</p>"},{"location":"mobile/react-native/components/#higher-order-component-hoc","title":"Higher-Order Component (HOC)","text":""},{"location":"mobile/react-native/components/#withagentbridge","title":"withAgentBridge","text":"<p>The <code>withAgentBridge</code> higher-order component (HOC) makes it easy to register class components with AgentBridge, making them controllable by AI agents.</p> <pre><code>import React, { Component } from 'react';\nimport { View, Text, Button } from 'react-native';\nimport { withAgentBridge } from '@agentbridge/react-native';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n  }\n\n  increment = () =&gt; {\n    this.setState(prevState =&gt; ({\n      count: prevState.count + 1\n    }));\n  };\n\n  decrement = () =&gt; {\n    this.setState(prevState =&gt; ({\n      count: prevState.count - 1\n    }));\n  };\n\n  reset = () =&gt; {\n    this.setState({ count: 0 });\n  };\n\n  render() {\n    return (\n      &lt;View style={{ padding: 20 }}&gt;\n        &lt;Text style={{ fontSize: 24, marginBottom: 20 }}&gt;\n          Count: {this.state.count}\n        &lt;/Text&gt;\n        &lt;View style={{ flexDirection: 'row', justifyContent: 'space-between' }}&gt;\n          &lt;Button title=\"Increment\" onPress={this.increment} /&gt;\n          &lt;Button title=\"Decrement\" onPress={this.decrement} /&gt;\n          &lt;Button title=\"Reset\" onPress={this.reset} /&gt;\n        &lt;/View&gt;\n      &lt;/View&gt;\n    );\n  }\n}\n\n// Wrap the component with withAgentBridge\nexport default withAgentBridge({\n  id: 'counter-component',\n  componentType: 'counter',\n  name: 'Counter Component',\n  description: 'A counter that can be incremented, decremented, or reset',\n  properties: (props, state) =&gt; ({\n    count: state.count,\n    isEven: state.count % 2 === 0,\n    isPositive: state.count &gt; 0,\n  }),\n  actions: {\n    increment: {\n      description: 'Increase the counter by 1',\n      handler: (component) =&gt; {\n        component.increment();\n        return { \n          success: true, \n          message: 'Counter incremented',\n          newValue: component.state.count\n        };\n      }\n    },\n    decrement: {\n      description: 'Decrease the counter by 1',\n      handler: (component) =&gt; {\n        component.decrement();\n        return { \n          success: true, \n          message: 'Counter decremented',\n          newValue: component.state.count\n        };\n      }\n    },\n    reset: {\n      description: 'Reset the counter to 0',\n      handler: (component) =&gt; {\n        component.reset();\n        return { \n          success: true, \n          message: 'Counter reset',\n          newValue: 0\n        };\n      }\n    }\n  }\n})(Counter);\n</code></pre>"},{"location":"mobile/react-native/components/#hoc-configuration-options","title":"HOC Configuration Options","text":"Option Type Description <code>id</code> string Unique identifier for the component <code>componentType</code> string Type of component (e.g., 'counter', 'input', etc.) <code>name</code> string Display name for the component <code>description</code> string Description of what the component does <code>properties</code> function Function that returns component properties from props and state <code>actions</code> object Object mapping action names to action handlers <code>tags</code> string[] Optional tags for categorizing the component"},{"location":"mobile/react-native/components/#pre-built-components","title":"Pre-built Components","text":""},{"location":"mobile/react-native/components/#agentbutton","title":"AgentButton","text":"<p>A button component that can be controlled by AI agents.</p> <pre><code>import { AgentButton } from '@agentbridge/react-native';\nimport { useRegisterComponent } from '@agentbridge/react-native';\n\nfunction MyScreen() {\n  const handlePress = () =&gt; {\n    console.log('Button pressed');\n  };\n\n  const { updateState } = useRegisterComponent({\n    id: 'submit-button',\n    componentType: 'button',\n    name: 'Submit Button',\n    description: 'A button for submitting the form',\n    properties: {\n      label: 'Submit',\n      disabled: false\n    },\n    actions: {\n      press: {\n        description: 'Press the button',\n        handler: () =&gt; {\n          handlePress();\n          return { success: true, message: 'Button pressed' };\n        }\n      }\n    }\n  });\n\n  return (\n    &lt;AgentButton\n      title=\"Submit\"\n      onPress={handlePress}\n      disabled={false}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#agenttextinput","title":"AgentTextInput","text":"<p>A text input component that can be controlled by AI agents.</p> <pre><code>import React, { useState } from 'react';\nimport { AgentTextInput } from '@agentbridge/react-native';\nimport { useRegisterComponent } from '@agentbridge/react-native';\n\nfunction FormField() {\n  const [text, setText] = useState('');\n\n  const { updateState } = useRegisterComponent({\n    id: 'username-input',\n    componentType: 'text-input',\n    name: 'Username Input',\n    description: 'An input field for entering a username',\n    properties: {\n      value: text,\n      placeholder: 'Enter username',\n      isValid: text.length &gt;= 3,\n      isEmpty: text.length === 0\n    },\n    actions: {\n      type: {\n        description: 'Type text into the input',\n        handler: (value) =&gt; {\n          setText(value);\n          return { \n            success: true, \n            message: 'Text entered',\n            newValue: value\n          };\n        }\n      },\n      clear: {\n        description: 'Clear the input field',\n        handler: () =&gt; {\n          setText('');\n          return { \n            success: true, \n            message: 'Input cleared',\n            newValue: ''\n          };\n        }\n      }\n    }\n  });\n\n  // Update state when text changes\n  useEffect(() =&gt; {\n    updateState({\n      value: text,\n      isValid: text.length &gt;= 3,\n      isEmpty: text.length === 0\n    });\n  }, [text, updateState]);\n\n  return (\n    &lt;AgentTextInput\n      value={text}\n      onChangeText={setText}\n      placeholder=\"Enter username\"\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/components/#creating-custom-components","title":"Creating Custom Components","text":"<p>You can create your own custom AgentBridge-aware components using the hooks or HOCs provided by the SDK.</p>"},{"location":"mobile/react-native/components/#function-component-with-useregistercomponent","title":"Function Component with useRegisterComponent","text":"<pre><code>import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet } from 'react-native';\nimport { useRegisterComponent } from '@agentbridge/react-native';\n\nfunction CustomToggle({ id }) {\n  const [isOn, setIsOn] = useState(false);\n\n  const { updateState } = useRegisterComponent({\n    id,\n    componentType: 'toggle',\n    name: 'Custom Toggle',\n    description: 'A custom toggle component',\n    properties: {\n      isOn,\n      label: isOn ? 'ON' : 'OFF'\n    },\n    actions: {\n      toggle: {\n        description: 'Toggle the switch',\n        handler: () =&gt; {\n          setIsOn(prev =&gt; !prev);\n          return { \n            success: true, \n            message: `Toggled to ${!isOn ? 'ON' : 'OFF'}`,\n            newValue: !isOn\n          };\n        }\n      },\n      turnOn: {\n        description: 'Turn the switch on',\n        handler: () =&gt; {\n          setIsOn(true);\n          return { \n            success: true, \n            message: 'Turned ON',\n            newValue: true\n          };\n        }\n      },\n      turnOff: {\n        description: 'Turn the switch off',\n        handler: () =&gt; {\n          setIsOn(false);\n          return { \n            success: true, \n            message: 'Turned OFF',\n            newValue: false\n          };\n        }\n      }\n    }\n  });\n\n  // Update state when isOn changes\n  useEffect(() =&gt; {\n    updateState({\n      isOn,\n      label: isOn ? 'ON' : 'OFF'\n    });\n  }, [isOn, updateState]);\n\n  return (\n    &lt;TouchableOpacity \n      style={[styles.toggle, isOn ? styles.toggleOn : styles.toggleOff]} \n      onPress={() =&gt; setIsOn(prev =&gt; !prev)}\n    &gt;\n      &lt;Text style={styles.label}&gt;{isOn ? 'ON' : 'OFF'}&lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n  );\n}\n\nconst styles = StyleSheet.create({\n  toggle: {\n    padding: 10,\n    borderRadius: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 80,\n  },\n  toggleOn: {\n    backgroundColor: '#4CD964',\n  },\n  toggleOff: {\n    backgroundColor: '#8E8E93',\n  },\n  label: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n\nexport default CustomToggle;\n</code></pre>"},{"location":"mobile/react-native/components/#best-practices","title":"Best Practices","text":"<ol> <li>Unique IDs: Always use unique IDs for components</li> <li>Clear Descriptions: Provide descriptive names and descriptions for components and actions</li> <li>Meaningful Properties: Expose properties that are useful for AI agents</li> <li>Error Handling: Include error handling in action handlers</li> <li>Performance: Be mindful of performance in mobile environments</li> </ol>"},{"location":"mobile/react-native/components/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about React Native hooks</li> <li>View React Native examples</li> <li>Read about component registration </li> </ul>"},{"location":"mobile/react-native/hooks/","title":"React Native Hooks","text":"<p>This page documents the custom React hooks provided by the AgentBridge React Native SDK.</p>"},{"location":"mobile/react-native/hooks/#core-hooks","title":"Core Hooks","text":""},{"location":"mobile/react-native/hooks/#useagentbridge","title":"useAgentBridge","text":"<p>Provides access to the AgentBridge instance throughout your React Native application.</p> <pre><code>import { useAgentBridge } from '@agentbridge/react-native';\n\nfunction MyComponent() {\n  const agentBridge = useAgentBridge();\n\n  const handleAction = () =&gt; {\n    // Use the agentBridge instance\n    agentBridge.executeFunction('someFunction', { param: 'value' });\n  };\n\n  return (\n    // Your component JSX\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#useagentcomponent","title":"useAgentComponent","text":"<p>Registers a component with AgentBridge and keeps its definition updated when props change.</p> <pre><code>import { useAgentComponent } from '@agentbridge/react-native';\n\nfunction Button({ id, label, disabled, onPress }) {\n  // Register component with AgentBridge\n  useAgentComponent(id, {\n    type: 'button',\n    properties: {\n      label,\n      disabled\n    },\n    actions: ['click'],\n    metadata: {\n      importance: 'medium'\n    }\n  });\n\n  return (\n    &lt;TouchableOpacity\n      disabled={disabled}\n      onPress={onPress}\n      style={styles.button}\n    &gt;\n      &lt;Text style={styles.buttonText}&gt;{label}&lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#useagentstate","title":"useAgentState","text":"<p>Creates a state variable that can be observed and modified by AI agents.</p> <pre><code>import { useAgentState } from '@agentbridge/react-native';\n\nfunction InputField({ id, label }) {\n  // Create state that's registered with AgentBridge\n  const [value, setValue] = useAgentState(id, '', {\n    type: 'text-field',\n    properties: {\n      label\n    },\n    actions: ['input']\n  });\n\n  return (\n    &lt;View&gt;\n      &lt;Text style={styles.label}&gt;{label}&lt;/Text&gt;\n      &lt;TextInput\n        value={value}\n        onChangeText={setValue}\n        style={styles.input}\n      /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#useagentaction","title":"useAgentAction","text":"<p>Registers a function that can be triggered by AI agents.</p> <pre><code>import { useAgentAction } from '@agentbridge/react-native';\n\nfunction SubmitButton({ id, formData }) {\n  // Register an action that can be triggered by AI agents\n  const handleSubmit = useAgentAction(id, async () =&gt; {\n    try {\n      // Submit the form data\n      const response = await api.submitForm(formData);\n      return { success: true, data: response };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }, {\n    description: 'Submit the form data to the server',\n    parameters: {}\n  });\n\n  return (\n    &lt;TouchableOpacity onPress={handleSubmit} style={styles.button}&gt;\n      &lt;Text style={styles.buttonText}&gt;Submit&lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#useagentfunction","title":"useAgentFunction","text":"<p>Registers a function with AgentBridge that can be called by AI agents.</p> <pre><code>import { useAgentFunction } from '@agentbridge/react-native';\n\nfunction SearchWidget() {\n  const [results, setResults] = useState([]);\n\n  // Register a function with AgentBridge\n  useAgentFunction({\n    name: 'searchProducts',\n    description: 'Search for products by name',\n    parameters: {\n      type: 'object',\n      properties: {\n        query: {\n          type: 'string',\n          description: 'The search query'\n        },\n        limit: {\n          type: 'number',\n          description: 'Maximum number of results to return'\n        }\n      },\n      required: ['query']\n    },\n    handler: async (params) =&gt; {\n      const { query, limit = 10 } = params;\n\n      try {\n        const searchResults = await api.searchProducts(query, limit);\n        setResults(searchResults);\n        return { success: true, results: searchResults };\n      } catch (error) {\n        return { success: false, error: error.message };\n      }\n    }\n  });\n\n  return (\n    &lt;View&gt;\n      {results.map(result =&gt; (\n        &lt;ProductItem key={result.id} product={result} /&gt;\n      ))}\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#ui-interaction-hooks","title":"UI Interaction Hooks","text":""},{"location":"mobile/react-native/hooks/#useagentnavigation","title":"useAgentNavigation","text":"<p>Registers navigation capabilities with AgentBridge and provides navigation utilities.</p> <pre><code>import { useAgentNavigation } from '@agentbridge/react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nfunction NavigationButtons() {\n  const navigation = useNavigation();\n\n  // Register navigation with AgentBridge\n  const { navigateTo, goBack } = useAgentNavigation({\n    routes: ['Home', 'Profile', 'Settings', 'Products'],\n    currentRoute: 'Home'\n  });\n\n  // These functions are automatically registered with AgentBridge\n  // and will handle the navigation when called\n\n  return (\n    &lt;View style={styles.buttonsContainer}&gt;\n      &lt;Button title=\"Go to Profile\" onPress={() =&gt; navigateTo('Profile')} /&gt;\n      &lt;Button title=\"Go to Settings\" onPress={() =&gt; navigateTo('Settings')} /&gt;\n      &lt;Button title=\"Go Back\" onPress={() =&gt; goBack()} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#useagentform","title":"useAgentForm","text":"<p>Creates a form that can be controlled by AI agents.</p> <pre><code>import { useAgentForm } from '@agentbridge/react-native';\n\nfunction ContactForm() {\n  // Create a form that's registered with AgentBridge\n  const { form, handleChange, handleSubmit, reset } = useAgentForm({\n    id: 'contact-form',\n    initialValues: {\n      name: '',\n      email: '',\n      message: ''\n    },\n    validation: {\n      name: value =&gt; value ? null : 'Name is required',\n      email: value =&gt; /^\\S+@\\S+\\.\\S+$/.test(value) ? null : 'Valid email is required',\n      message: value =&gt; value ? null : 'Message is required'\n    },\n    onSubmit: async (values) =&gt; {\n      try {\n        await api.sendContactForm(values);\n        reset();\n        return { success: true };\n      } catch (error) {\n        return { success: false, error: error.message };\n      }\n    }\n  });\n\n  return (\n    &lt;View style={styles.form}&gt;\n      &lt;Text style={styles.title}&gt;Contact Us&lt;/Text&gt;\n\n      &lt;View style={styles.field}&gt;\n        &lt;Text style={styles.label}&gt;Name&lt;/Text&gt;\n        &lt;TextInput\n          value={form.values.name}\n          onChangeText={value =&gt; handleChange('name', value)}\n          style={styles.input}\n        /&gt;\n        {form.errors.name &amp;&amp; (\n          &lt;Text style={styles.error}&gt;{form.errors.name}&lt;/Text&gt;\n        )}\n      &lt;/View&gt;\n\n      &lt;View style={styles.field}&gt;\n        &lt;Text style={styles.label}&gt;Email&lt;/Text&gt;\n        &lt;TextInput\n          value={form.values.email}\n          onChangeText={value =&gt; handleChange('email', value)}\n          keyboardType=\"email-address\"\n          style={styles.input}\n        /&gt;\n        {form.errors.email &amp;&amp; (\n          &lt;Text style={styles.error}&gt;{form.errors.email}&lt;/Text&gt;\n        )}\n      &lt;/View&gt;\n\n      &lt;View style={styles.field}&gt;\n        &lt;Text style={styles.label}&gt;Message&lt;/Text&gt;\n        &lt;TextInput\n          value={form.values.message}\n          onChangeText={value =&gt; handleChange('message', value)}\n          multiline\n          numberOfLines={4}\n          style={[styles.input, styles.textArea]}\n        /&gt;\n        {form.errors.message &amp;&amp; (\n          &lt;Text style={styles.error}&gt;{form.errors.message}&lt;/Text&gt;\n        )}\n      &lt;/View&gt;\n\n      &lt;Button title=\"Submit\" onPress={handleSubmit} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#useagentlist","title":"useAgentList","text":"<p>Creates a list that can be controlled by AI agents.</p> <pre><code>import { useAgentList } from '@agentbridge/react-native';\n\nfunction ProductList({ products }) {\n  // Create a list that's registered with AgentBridge\n  const { \n    items, \n    selectedItem, \n    selectItem, \n    handleAction \n  } = useAgentList({\n    id: 'product-list',\n    initialItems: products,\n    itemIdKey: 'id',\n    actions: {\n      viewDetails: (item) =&gt; {\n        navigation.navigate('ProductDetails', { productId: item.id });\n        return { success: true };\n      },\n      addToCart: async (item) =&gt; {\n        try {\n          await api.addToCart(item.id);\n          return { success: true };\n        } catch (error) {\n          return { success: false, error: error.message };\n        }\n      }\n    }\n  });\n\n  return (\n    &lt;FlatList\n      data={items}\n      keyExtractor={item =&gt; item.id}\n      renderItem={({ item }) =&gt; (\n        &lt;TouchableOpacity\n          onPress={() =&gt; selectItem(item.id)}\n          style={[\n            styles.itemContainer,\n            selectedItem?.id === item.id &amp;&amp; styles.selectedItem\n          ]}\n        &gt;\n          &lt;Image source={{ uri: item.image }} style={styles.image} /&gt;\n          &lt;View style={styles.itemDetails}&gt;\n            &lt;Text style={styles.itemName}&gt;{item.name}&lt;/Text&gt;\n            &lt;Text style={styles.itemPrice}&gt;${item.price}&lt;/Text&gt;\n          &lt;/View&gt;\n          &lt;View style={styles.itemActions}&gt;\n            &lt;Button \n              title=\"View\" \n              onPress={() =&gt; handleAction('viewDetails', item.id)} \n            /&gt;\n            &lt;Button \n              title=\"Add to Cart\" \n              onPress={() =&gt; handleAction('addToCart', item.id)}\n            /&gt;\n          &lt;/View&gt;\n        &lt;/TouchableOpacity&gt;\n      )}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#state-management-hooks","title":"State Management Hooks","text":""},{"location":"mobile/react-native/hooks/#useagentreducer","title":"useAgentReducer","text":"<p>Creates a reducer that's registered with AgentBridge, allowing agents to dispatch actions.</p> <pre><code>import { useAgentReducer } from '@agentbridge/react-native';\n\n// Define a reducer function\nfunction cartReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      return {\n        ...state,\n        items: [...state.items, action.payload],\n        totalItems: state.totalItems + 1,\n        totalPrice: state.totalPrice + action.payload.price\n      };\n    case 'REMOVE_ITEM':\n      const itemToRemove = state.items.find(item =&gt; item.id === action.payload);\n      return {\n        ...state,\n        items: state.items.filter(item =&gt; item.id !== action.payload),\n        totalItems: state.totalItems - 1,\n        totalPrice: state.totalPrice - (itemToRemove ? itemToRemove.price : 0)\n      };\n    case 'CLEAR_CART':\n      return {\n        items: [],\n        totalItems: 0,\n        totalPrice: 0\n      };\n    default:\n      return state;\n  }\n}\n\nfunction CartManager() {\n  // Create a reducer that's registered with AgentBridge\n  const [cart, dispatch] = useAgentReducer({\n    id: 'shopping-cart',\n    reducer: cartReducer,\n    initialState: {\n      items: [],\n      totalItems: 0,\n      totalPrice: 0\n    },\n    actionDescriptions: {\n      ADD_ITEM: {\n        description: 'Add an item to the cart',\n        parameters: {\n          type: 'object',\n          properties: {\n            id: { type: 'string', description: 'Item ID' },\n            name: { type: 'string', description: 'Item name' },\n            price: { type: 'number', description: 'Item price' }\n          },\n          required: ['id', 'name', 'price']\n        }\n      },\n      REMOVE_ITEM: {\n        description: 'Remove an item from the cart',\n        parameters: {\n          type: 'string',\n          description: 'Item ID to remove'\n        }\n      },\n      CLEAR_CART: {\n        description: 'Clear all items from the cart',\n        parameters: {}\n      }\n    }\n  });\n\n  // Now AI agents can dispatch actions to the cart reducer\n\n  return (\n    &lt;View style={styles.cartContainer}&gt;\n      &lt;Text style={styles.cartTitle}&gt;Shopping Cart&lt;/Text&gt;\n      &lt;Text style={styles.cartSummary}&gt;\n        {cart.totalItems} items, total: ${cart.totalPrice.toFixed(2)}\n      &lt;/Text&gt;\n\n      &lt;FlatList\n        data={cart.items}\n        keyExtractor={item =&gt; item.id}\n        renderItem={({ item }) =&gt; (\n          &lt;View style={styles.cartItem}&gt;\n            &lt;Text style={styles.itemName}&gt;{item.name}&lt;/Text&gt;\n            &lt;Text style={styles.itemPrice}&gt;${item.price.toFixed(2)}&lt;/Text&gt;\n            &lt;Button\n              title=\"Remove\"\n              onPress={() =&gt; dispatch({ type: 'REMOVE_ITEM', payload: item.id })}\n            /&gt;\n          &lt;/View&gt;\n        )}\n      /&gt;\n\n      &lt;Button\n        title=\"Clear Cart\"\n        onPress={() =&gt; dispatch({ type: 'CLEAR_CART' })}\n      /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#useagentcontext","title":"useAgentContext","text":"<p>Creates a context that's registered with AgentBridge, allowing agents to access and update context values.</p> <pre><code>import { useAgentContext, AgentContextProvider } from '@agentbridge/react-native';\n\n// Create an agent-aware context\nfunction App() {\n  return (\n    &lt;AgentContextProvider\n      id=\"app-settings\"\n      initialValue={{\n        theme: 'light',\n        notifications: true,\n        language: 'en',\n      }}\n    &gt;\n      &lt;AppContent /&gt;\n    &lt;/AgentContextProvider&gt;\n  );\n}\n\nfunction SettingsScreen() {\n  // Use the agent context\n  const [settings, setSettings] = useAgentContext('app-settings');\n\n  const toggleTheme = () =&gt; {\n    setSettings(prev =&gt; ({\n      ...prev,\n      theme: prev.theme === 'light' ? 'dark' : 'light'\n    }));\n  };\n\n  const toggleNotifications = () =&gt; {\n    setSettings(prev =&gt; ({\n      ...prev,\n      notifications: !prev.notifications\n    }));\n  };\n\n  const changeLanguage = (language) =&gt; {\n    setSettings(prev =&gt; ({\n      ...prev,\n      language\n    }));\n  };\n\n  return (\n    &lt;View style={styles.container}&gt;\n      &lt;Text style={styles.title}&gt;Settings&lt;/Text&gt;\n\n      &lt;View style={styles.setting}&gt;\n        &lt;Text&gt;Theme: {settings.theme}&lt;/Text&gt;\n        &lt;Button title=\"Toggle Theme\" onPress={toggleTheme} /&gt;\n      &lt;/View&gt;\n\n      &lt;View style={styles.setting}&gt;\n        &lt;Text&gt;Notifications: {settings.notifications ? 'On' : 'Off'}&lt;/Text&gt;\n        &lt;Button title=\"Toggle Notifications\" onPress={toggleNotifications} /&gt;\n      &lt;/View&gt;\n\n      &lt;View style={styles.setting}&gt;\n        &lt;Text&gt;Language: {settings.language}&lt;/Text&gt;\n        &lt;View style={styles.languageButtons}&gt;\n          &lt;Button title=\"English\" onPress={() =&gt; changeLanguage('en')} /&gt;\n          &lt;Button title=\"Spanish\" onPress={() =&gt; changeLanguage('es')} /&gt;\n          &lt;Button title=\"French\" onPress={() =&gt; changeLanguage('fr')} /&gt;\n        &lt;/View&gt;\n      &lt;/View&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#mcp-integration-hooks","title":"MCP Integration Hooks","text":""},{"location":"mobile/react-native/hooks/#usemcpadapter","title":"useMCPAdapter","text":"<p>Registers an MCP adapter with AgentBridge.</p> <pre><code>import { useMCPAdapter } from '@agentbridge/react-native';\nimport { OpenAIMCPAdapter } from '@agentbridge/mcp-openai';\n\nfunction MCPIntegration() {\n  // Register OpenAI MCP adapter with AgentBridge\n  useMCPAdapter('openai', () =&gt; new OpenAIMCPAdapter());\n\n  return null; // This is a utility component with no UI\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#usemcpfunctioncall","title":"useMCPFunctionCall","text":"<p>Handles MCP function calls from AI models.</p> <pre><code>import { useMCPFunctionCall } from '@agentbridge/react-native';\n\nfunction AIAssistant() {\n  const [messages, setMessages] = useState([]);\n\n  // Hook to handle MCP function calls\n  const { handleFunctionCall, isProcessing } = useMCPFunctionCall({\n    mcpType: 'openai',\n    onResult: (result) =&gt; {\n      // Add the function result to the message list\n      setMessages(prev =&gt; [\n        ...prev,\n        {\n          id: Date.now().toString(),\n          role: 'function',\n          name: result.functionName,\n          content: JSON.stringify(result.data)\n        }\n      ]);\n\n      // In a real app, you'd likely send this back to the AI model\n    }\n  });\n\n  const processAIResponse = (response) =&gt; {\n    // Add the AI response to messages\n    setMessages(prev =&gt; [\n      ...prev,\n      {\n        id: Date.now().toString(),\n        role: 'assistant',\n        content: response.content\n      }\n    ]);\n\n    // Check if there's a function call to handle\n    if (response.function_call) {\n      handleFunctionCall(response.function_call);\n    }\n  };\n\n  return (\n    &lt;View style={styles.container}&gt;\n      &lt;MessageList messages={messages} /&gt;\n\n      {isProcessing &amp;&amp; (\n        &lt;View style={styles.processingIndicator}&gt;\n          &lt;Text&gt;Processing function call...&lt;/Text&gt;\n        &lt;/View&gt;\n      )}\n\n      &lt;MessageInput onSendMessage={handleSendMessage} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#lifecycle-hooks","title":"Lifecycle Hooks","text":""},{"location":"mobile/react-native/hooks/#useagentlifecycle","title":"useAgentLifecycle","text":"<p>Registers component lifecycle events with AgentBridge.</p> <pre><code>import { useAgentLifecycle } from '@agentbridge/react-native';\n\nfunction ScreenComponent({ id }) {\n  // Register lifecycle events with AgentBridge\n  useAgentLifecycle(id, {\n    onMount: () =&gt; {\n      // Executes when component mounts\n      return { screen: id, event: 'mounted' };\n    },\n    onUpdate: (prevProps) =&gt; {\n      // Executes when component updates\n      return { screen: id, event: 'updated', prevProps };\n    },\n    onUnmount: () =&gt; {\n      // Executes when component unmounts\n      return { screen: id, event: 'unmounted' };\n    }\n  });\n\n  return (\n    &lt;View style={styles.screen}&gt;\n      &lt;Text style={styles.screenTitle}&gt;{id}&lt;/Text&gt;\n      {/* Screen content */}\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"mobile/react-native/hooks/#useagentfocus","title":"useAgentFocus","text":"<p>Registers focus/blur events with AgentBridge.</p> <pre><code>import { useAgentFocus } from '@agentbridge/react-native';\n\nfunction InputField({ id, label }) {\n  const [value, setValue] = useState('');\n  const inputRef = useRef(null);\n\n  // Register focus/blur events with AgentBridge\n  useAgentFocus(id, inputRef, {\n    onFocus: () =&gt; {\n      // Executes when input receives focus\n      return { input: id, event: 'focus' };\n    },\n    onBlur: () =&gt; {\n      // Executes when input loses focus\n      return { input: id, value, event: 'blur' };\n    }\n  });\n\n  return (\n    &lt;View style={styles.inputContainer}&gt;\n      &lt;Text style={styles.label}&gt;{label}&lt;/Text&gt;\n      &lt;TextInput\n        ref={inputRef}\n        value={value}\n        onChangeText={setValue}\n        style={styles.input}\n      /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre> <p>For more examples of using these hooks, see the React Native Examples guide. </p>"},{"location":"mobile/react-native/overview/","title":"React Native SDK Overview","text":"<p>The AgentBridge React Native SDK provides tools and components for integrating AI agent capabilities into your React Native mobile applications. This SDK allows AI agents to interact with your application's UI components and functions, enabling rich interactions between users and AI.</p>"},{"location":"mobile/react-native/overview/#features","title":"Features","text":"<ul> <li>Component Registration: Make React Native components controllable by AI agents</li> <li>Function Registration: Expose application functions to AI agents</li> <li>Communication Providers: Connect to AI agents through various communication methods</li> <li>Consistent API: Similar API to the web React SDK for familiarity across platforms</li> <li>Mobile Optimizations: Optimized for mobile performance and battery life</li> </ul>"},{"location":"mobile/react-native/overview/#installation","title":"Installation","text":"<pre><code># Install the SDK\nnpm install @agentbridge/react-native\n\n# Install a communication provider\nnpm install @agentbridge/communication-websocket\n# or any other provider\n</code></pre>"},{"location":"mobile/react-native/overview/#architecture","title":"Architecture","text":"<p>The React Native SDK follows the same architecture as the web React SDK, with additional optimizations for mobile:</p> <ul> <li>ReactNativeAdapter: A special adapter for React Native that handles platform-specific concerns</li> <li>Higher Order Components: HOCs like <code>withAgentBridge</code> for easy component integration</li> <li>Hooks: Custom hooks like <code>useRegisterComponent</code> and <code>useRegisterFunction</code> for functional components</li> <li>Providers: Communication providers optimized for mobile network conditions</li> </ul>"},{"location":"mobile/react-native/overview/#component-structure","title":"Component Structure","text":"<p>The SDK provides several ways to register components:</p> <ol> <li>Hooks-based registration (for functional components):</li> </ol> <pre><code>import { useRegisterComponent } from '@agentbridge/react-native';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const { updateState } = useRegisterComponent({\n    id: 'counter-1',\n    componentType: 'counter',\n    name: 'Counter Component',\n    description: 'A counter component',\n    properties: {\n      count,\n      isEven: count % 2 === 0\n    },\n    actions: {\n      increment: {\n        description: 'Increment the counter',\n        handler: () =&gt; {\n          setCount(prev =&gt; prev + 1);\n          return { success: true };\n        }\n      },\n      // More actions...\n    }\n  });\n\n  // Component UI...\n}\n</code></pre> <ol> <li>HOC-based registration (for class components):</li> </ol> <pre><code>import { withAgentBridge } from '@agentbridge/react-native';\n\nclass Counter extends Component {\n  // Component implementation...\n}\n\nexport default withAgentBridge({\n  id: 'counter-1',\n  componentType: 'counter',\n  name: 'Counter Component',\n  description: 'A counter component',\n  properties: (props, state) =&gt; ({\n    count: state.count,\n    isEven: state.count % 2 === 0\n  }),\n  actions: {\n    increment: {\n      description: 'Increment the counter',\n      handler: (component) =&gt; {\n        component.setState(prev =&gt; ({ count: prev.count + 1 }));\n        return { success: true };\n      }\n    }\n  }\n})(Counter);\n</code></pre>"},{"location":"mobile/react-native/overview/#function-registration","title":"Function Registration","text":"<p>You can register functions using the <code>useRegisterFunction</code> hook:</p> <pre><code>import { useRegisterFunction } from '@agentbridge/react-native';\n\nfunction WeatherWidget() {\n  useRegisterFunction({\n    name: 'getWeather',\n    description: 'Get weather for a location',\n    parameters: {\n      type: 'object',\n      properties: {\n        location: { type: 'string' }\n      },\n      required: ['location']\n    },\n    handler: async ({ location }) =&gt; {\n      try {\n        // API call to get weather\n        return { success: true, data: weatherData };\n      } catch (error) {\n        return { success: false, error: error.message };\n      }\n    }\n  });\n\n  // Component UI...\n}\n</code></pre>"},{"location":"mobile/react-native/overview/#integration-with-react-navigation","title":"Integration with React Navigation","text":"<p>The SDK can be integrated with React Navigation:</p> <pre><code>import { useRegisterFunction } from '@agentbridge/react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nfunction NavigationHandler() {\n  const navigation = useNavigation();\n\n  useRegisterFunction({\n    name: 'navigateTo',\n    description: 'Navigate to a screen',\n    parameters: {\n      type: 'object',\n      properties: {\n        screen: { type: 'string' },\n        params: { type: 'object' }\n      },\n      required: ['screen']\n    },\n    handler: async ({ screen, params = {} }) =&gt; {\n      try {\n        navigation.navigate(screen, params);\n        return { success: true };\n      } catch (error) {\n        return { success: false, error: error.message };\n      }\n    }\n  });\n\n  return null; // This is a utility component with no UI\n}\n</code></pre>"},{"location":"mobile/react-native/overview/#mobile-specific-features","title":"Mobile-Specific Features","text":"<p>The React Native SDK includes features specifically designed for mobile:</p> <ul> <li>Battery optimization: Smart reconnection strategies to minimize battery impact</li> <li>Network awareness: Adaptation to changing network conditions</li> <li>Offline support: Graceful handling of offline scenarios</li> <li>Deep linking: Integration with app deep linking</li> </ul>"},{"location":"mobile/react-native/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about React Native components</li> <li>Explore React Native hooks</li> <li>View React Native examples</li> </ul>"},{"location":"web/web-features/","title":"Web Features","text":"<p>This page documents the web-specific features available in AgentBridge for both React and Angular frameworks.</p>"},{"location":"web/web-features/#cross-framework-features","title":"Cross-Framework Features","text":"<p>The following features are available across all supported web frameworks:</p>"},{"location":"web/web-features/#ui-components","title":"UI Components","text":"<p>AgentBridge provides web framework-specific UI components that follow modern web design principles while maintaining a consistent API for AI agent interactions:</p> <ul> <li>Buttons and action elements</li> <li>Input fields and form controls</li> <li>Selection components (dropdown, select)</li> <li>Toggle components (checkbox, switch)</li> <li>List views and collection components</li> <li>Card and container elements</li> <li>Navigation components</li> <li>Modal and dialog components</li> </ul>"},{"location":"web/web-features/#dom-integration","title":"DOM Integration","text":"<p>AgentBridge provides seamless integration with the DOM:</p> <pre><code>// JavaScript/TypeScript\nimport { DOMCapabilities } from '@agentbridge/core';\n\n// Find elements in the DOM\nconst elements = DOMCapabilities.queryElements('button.primary');\n\n// Create and append elements\nconst newElement = DOMCapabilities.createElement('div', {\n  className: 'custom-container',\n  innerText: 'Created by AgentBridge'\n});\ndocument.body.appendChild(newElement);\n\n// Add event listeners\nDOMCapabilities.addEventListenerToElements('button.action', 'click', (event) =&gt; {\n  // Handle click event\n});\n</code></pre>"},{"location":"web/web-features/#web-storage","title":"Web Storage","text":"<p>Access and manage web storage with a consistent API:</p> <pre><code>// JavaScript/TypeScript\nimport { StorageManager } from '@agentbridge/core';\n\n// Local storage\nStorageManager.local.set('user-preferences', { theme: 'dark' });\nconst preferences = StorageManager.local.get('user-preferences');\n\n// Session storage\nStorageManager.session.set('session-data', { lastPage: '/dashboard' });\nconst sessionData = StorageManager.session.get('session-data');\n\n// Clear storage\nStorageManager.local.remove('user-preferences');\nStorageManager.session.clear();\n</code></pre>"},{"location":"web/web-features/#responsive-design-support","title":"Responsive Design Support","text":"<p>Utilities for creating responsive web applications:</p> <pre><code>// JavaScript/TypeScript\nimport { ResponsiveManager } from '@agentbridge/core';\n\n// Get current viewport information\nconst viewport = ResponsiveManager.getViewport();\n\n// Register a breakpoint listener\nconst unsubscribe = ResponsiveManager.addBreakpointListener({\n  xs: 0,\n  sm: 600,\n  md: 960,\n  lg: 1280,\n  xl: 1920\n}, (breakpoint) =&gt; {\n  console.log(`Current breakpoint: ${breakpoint}`);\n});\n\n// Unsubscribe when done\nunsubscribe();\n\n// Check if the current viewport matches a media query\nconst isMobile = ResponsiveManager.matches('(max-width: 600px)');\n</code></pre>"},{"location":"web/web-features/#react-specific-features","title":"React-Specific Features","text":"<p>Features specific to the React framework:</p>"},{"location":"web/web-features/#react-hooks","title":"React Hooks","text":"<p>A comprehensive set of hooks for integrating with AgentBridge:</p> <pre><code>import { \n  useAgentComponent, \n  useAgentState, \n  useAgentAction \n} from '@agentbridge/react';\n\nfunction CustomComponent() {\n  // Register component with AgentBridge\n  useAgentComponent('custom-component', {\n    type: 'container',\n    properties: {\n      title: 'My Component'\n    }\n  });\n\n  // State managed by AgentBridge\n  const [count, setCount] = useAgentState('counter', 0);\n\n  // Action registered with AgentBridge\n  const incrementCounter = useAgentAction('increment-counter', () =&gt; {\n    setCount(prev =&gt; prev + 1);\n    return { success: true, newCount: count + 1 };\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;button onClick={incrementCounter}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>For more details on React hooks, see the React Hooks documentation.</p>"},{"location":"web/web-features/#react-context-integration","title":"React Context Integration","text":"<p>AgentBridge integrates with React Context:</p> <pre><code>import { AgentBridgeProvider, useAgentBridge } from '@agentbridge/react';\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider config={{ appId: 'your-app-id' }}&gt;\n      &lt;MainContent /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nfunction MainContent() {\n  // Access AgentBridge instance anywhere in the component tree\n  const agentBridge = useAgentBridge();\n\n  return (\n    &lt;div&gt;\n      {/* Application content */}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/web-features/#server-components-support","title":"Server Components Support","text":"<p>Integration with React Server Components:</p> <pre><code>// server-component.tsx\nimport { registerServerComponent } from '@agentbridge/react/server';\n\nasync function ProductList() {\n  // Fetch data on the server\n  const products = await fetchProducts();\n\n  // Register component metadata with AgentBridge\n  registerServerComponent('product-list', {\n    type: 'list',\n    properties: {\n      itemCount: products.length\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      {products.map(product =&gt; (\n        &lt;ProductItem key={product.id} product={product} /&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/web-features/#angular-specific-features","title":"Angular-Specific Features","text":"<p>Features specific to the Angular framework:</p>"},{"location":"web/web-features/#angular-directives","title":"Angular Directives","text":"<p>Custom directives for integrating with AgentBridge:</p> <pre><code>// TypeScript with Angular components\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Count: {{ count }}&lt;/h2&gt;\n      &lt;button abButton=\"increment-button\" (click)=\"increment()\"&gt;Increment&lt;/button&gt;\n      &lt;button abButton=\"reset-button\" (click)=\"reset()\"&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  `\n})\nexport class CounterComponent {\n  count = 0;\n\n  constructor(private agentBridge: AgentBridgeService) {\n    // Register component with AgentBridge\n    this.agentBridge.registerComponent({\n      id: 'counter-component',\n      type: 'counter',\n      properties: {\n        count: this.count\n      },\n      actions: ['increment', 'reset']\n    });\n\n    // Register functions\n    this.agentBridge.registerFunction({\n      name: 'incrementCounter',\n      description: 'Increment the counter value',\n      parameters: {},\n      handler: () =&gt; this.increment()\n    });\n\n    this.agentBridge.registerFunction({\n      name: 'resetCounter',\n      description: 'Reset the counter to zero',\n      parameters: {},\n      handler: () =&gt; this.reset()\n    });\n  }\n\n  increment() {\n    this.count++;\n    this.updateComponent();\n    return { success: true, newCount: this.count };\n  }\n\n  reset() {\n    this.count = 0;\n    this.updateComponent();\n    return { success: true };\n  }\n\n  private updateComponent() {\n    // Update component properties in AgentBridge\n    this.agentBridge.updateComponent('counter-component', {\n      properties: {\n        count: this.count\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"web/web-features/#angular-services","title":"Angular Services","text":"<p>Angular services for AgentBridge integration:</p> <pre><code>// agent-bridge.service.ts\nimport { Injectable } from '@angular/core';\nimport { AgentBridge } from '@agentbridge/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentBridgeService {\n  private agentBridge: AgentBridge;\n\n  constructor() {\n    this.agentBridge = new AgentBridge();\n    this.agentBridge.initialize({\n      appId: 'your-app-id',\n      apiKey: 'your-api-key'\n    });\n  }\n\n  registerComponent(component: any) {\n    return this.agentBridge.registerComponent(component);\n  }\n\n  updateComponent(id: string, updates: any) {\n    return this.agentBridge.updateComponent(id, updates);\n  }\n\n  registerFunction(func: any) {\n    return this.agentBridge.registerFunction(func);\n  }\n\n  executeFunction(name: string, params: any) {\n    return this.agentBridge.executeFunction(name, params);\n  }\n}\n</code></pre>"},{"location":"web/web-features/#angular-change-detection-integration","title":"Angular Change Detection Integration","text":"<p>Automatic integration with Angular's change detection:</p> <pre><code>// change-detection.service.ts\nimport { Injectable, NgZone } from '@angular/core';\nimport { AgentBridgeService } from './agent-bridge.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChangeDetectionService {\n  constructor(\n    private agentBridge: AgentBridgeService,\n    private ngZone: NgZone\n  ) {\n    // Wrap function executions with NgZone\n    this.agentBridge.setFunctionWrapper((handler) =&gt; {\n      return (...args: any[]) =&gt; {\n        return new Promise((resolve, reject) =&gt; {\n          this.ngZone.run(() =&gt; {\n            Promise.resolve(handler(...args))\n              .then(resolve)\n              .catch(reject);\n          });\n        });\n      };\n    });\n  }\n}\n</code></pre>"},{"location":"web/web-features/#web-apis-integration","title":"Web APIs Integration","text":"<p>AgentBridge provides integration with common web APIs:</p>"},{"location":"web/web-features/#fetch-api","title":"Fetch API","text":"<p>A wrapper around the Fetch API:</p> <pre><code>// JavaScript/TypeScript\nimport { NetworkManager } from '@agentbridge/core';\n\n// Simple GET request\nconst data = await NetworkManager.get('https://api.example.com/data');\n\n// POST request with JSON body\nconst response = await NetworkManager.post('https://api.example.com/users', {\n  name: 'John Doe',\n  email: 'john@example.com'\n});\n\n// Advanced request with custom options\nconst result = await NetworkManager.request('https://api.example.com/data', {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer token123'\n  },\n  body: JSON.stringify({ status: 'active' }),\n  timeout: 5000\n});\n</code></pre>"},{"location":"web/web-features/#web-workers","title":"Web Workers","text":"<p>Integration with Web Workers:</p> <pre><code>// JavaScript/TypeScript\nimport { WorkerManager } from '@agentbridge/core';\n\n// Create a worker from a function\nconst worker = WorkerManager.createWorker((input) =&gt; {\n  // This code runs in a web worker\n  const result = performHeavyCalculation(input);\n  return result;\n});\n\n// Execute work in the worker\nconst result = await worker.execute({ data: [1, 2, 3, 4, 5] });\n\n// Terminate the worker when done\nworker.terminate();\n</code></pre>"},{"location":"web/web-features/#web-sockets","title":"Web Sockets","text":"<p>Simplified Web Sockets API:</p> <pre><code>// JavaScript/TypeScript\nimport { WebSocketManager } from '@agentbridge/core';\n\n// Create a WebSocket connection\nconst socket = WebSocketManager.connect('wss://example.com/socket');\n\n// Add event listeners\nsocket.onMessage((data) =&gt; {\n  console.log('Received:', data);\n});\n\nsocket.onError((error) =&gt; {\n  console.error('Socket error:', error);\n});\n\n// Send messages\nsocket.send({ type: 'greeting', content: 'Hello, server!' });\n\n// Close the connection when done\nsocket.close();\n</code></pre>"},{"location":"web/web-features/#pwa-support","title":"PWA Support","text":"<p>Features for Progressive Web App support:</p>"},{"location":"web/web-features/#service-worker-management","title":"Service Worker Management","text":"<p>Simplified management of service workers:</p> <pre><code>// JavaScript/TypeScript\nimport { ServiceWorkerManager } from '@agentbridge/core';\n\n// Register a service worker\nServiceWorkerManager.register('/service-worker.js')\n  .then(registration =&gt; {\n    console.log('Service worker registered:', registration);\n  })\n  .catch(error =&gt; {\n    console.error('Service worker registration failed:', error);\n  });\n\n// Check for updates\nServiceWorkerManager.checkForUpdates();\n\n// Add update listeners\nServiceWorkerManager.onUpdate(() =&gt; {\n  // Show update notification to user\n  showUpdateNotification();\n});\n</code></pre>"},{"location":"web/web-features/#offline-detection","title":"Offline Detection","text":"<p>Monitor and react to connectivity changes:</p> <pre><code>// JavaScript/TypeScript\nimport { ConnectivityMonitor } from '@agentbridge/core';\n\n// Check current status\nconst isOnline = ConnectivityMonitor.isOnline();\n\n// Add listeners\nConnectivityMonitor.onStatusChange((status) =&gt; {\n  if (status.online) {\n    showOnlineNotification();\n  } else {\n    showOfflineNotification();\n  }\n});\n\n// Start monitoring\nConnectivityMonitor.startMonitoring({\n  checkInterval: 30000, // milliseconds\n  pingURL: 'https://example.com/ping'\n});\n</code></pre>"},{"location":"web/web-features/#app-installation","title":"App Installation","text":"<p>Simplify the PWA installation process:</p> <pre><code>// JavaScript/TypeScript\nimport { InstallationManager } from '@agentbridge/core';\n\n// Check if the app is installable\nconst canInstall = InstallationManager.canInstall();\n\n// Show the installation prompt\nif (canInstall) {\n  InstallationManager.promptInstallation()\n    .then(result =&gt; {\n      if (result.outcome === 'accepted') {\n        console.log('App installation started');\n      } else {\n        console.log('App installation declined');\n      }\n    })\n    .catch(error =&gt; {\n      console.error('Installation error:', error);\n    });\n}\n</code></pre>"},{"location":"web/web-features/#best-practices","title":"Best Practices","text":""},{"location":"web/web-features/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Use Lazy Loading: Import AgentBridge components and modules only when needed</li> <li>Minimize State Updates: Batch state updates to reduce re-renders</li> <li>Virtualize Long Lists: Use virtualization for long lists of items</li> <li>Implement Code Splitting: Split your bundle into smaller chunks</li> <li>Use Web Workers: Offload heavy computation to web workers</li> </ol>"},{"location":"web/web-features/#accessibility","title":"Accessibility","text":"<ol> <li>Semantic HTML: Use semantic HTML elements and ARIA attributes</li> <li>Keyboard Navigation: Ensure all interactive elements are keyboard accessible</li> <li>Screen Reader Support: Provide descriptive labels and alt text</li> <li>Color Contrast: Maintain appropriate color contrast ratios</li> <li>Focus Management: Implement proper focus management for modals and dialogs</li> </ol>"},{"location":"web/web-features/#security-considerations","title":"Security Considerations","text":"<ol> <li>Input Validation: Validate all inputs, especially those from AI agents</li> <li>Content Security Policy: Implement a Content Security Policy</li> <li>HTTPS: Always use HTTPS for your application</li> <li>Sensitive Data Handling: Don't expose sensitive data in component definitions</li> <li>Secure Storage: Use secure storage practices for sensitive information</li> </ol> <p>For detailed examples of web components, refer to the framework-specific guides: - React Components - Angular Components </p>"},{"location":"web/angular/components/","title":"Angular Components","text":"<p>This page documents all the UI components available in the AgentBridge Angular SDK. These components are designed to be easily controlled by AI agents while providing a seamless integration with Angular applications.</p>"},{"location":"web/angular/components/#core-components","title":"Core Components","text":"<p>The AgentBridge Angular SDK provides several ready-to-use components that can be controlled by AI agents:</p>"},{"location":"web/angular/components/#agentbutton","title":"AgentButton","text":"<p>A button component that can be controlled by AI agents.</p> <pre><code>&lt;agent-button\n  id=\"submit-button\"\n  label=\"Submit\"\n  (click)=\"handleClick()\"\n  [disabled]=\"isSubmitting\"\n  [loading]=\"isSubmitting\"\n  [style]=\"{\n    backgroundColor: '#4285F4',\n    color: 'white',\n    borderRadius: '4px',\n    padding: '8px 16px'\n  }\"\n  icon=\"arrow-right\"\n  iconPosition=\"right\"&gt;\n&lt;/agent-button&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  isSubmitting = false;\n\n  handleClick() {\n    this.isSubmitting = true;\n    // Your action here\n    setTimeout(() =&gt; {\n      this.isSubmitting = false;\n    }, 1000);\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#inputs","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the button <code>label</code> string Text to display on the button <code>disabled</code> boolean Whether the button is disabled <code>loading</code> boolean Whether to show a loading indicator <code>style</code> object Inline styles for the button <code>class</code> string CSS class names to apply <code>icon</code> string Icon to display with the button <code>iconPosition</code> 'left' | 'right' Position of the icon"},{"location":"web/angular/components/#outputs","title":"Outputs","text":"Output Type Description <code>click</code> EventEmitter Emitted when button is clicked"},{"location":"web/angular/components/#agenttextfield","title":"AgentTextField","text":"<p>A text field component that can be controlled by AI agents.</p> <pre><code>&lt;agent-text-field\n  id=\"email-input\"\n  label=\"Email Address\"\n  placeholder=\"Enter your email\"\n  [(ngModel)]=\"email\"\n  (submitted)=\"handleSubmit()\"\n  type=\"email\"\n  [style]=\"{\n    borderColor: '#ddd',\n    borderRadius: '4px',\n    padding: '8px'\n  }\"&gt;\n&lt;/agent-text-field&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  email = '';\n\n  handleSubmit() {\n    console.log('Submitted email:', this.email);\n    // Handle submission\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_1","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the text field <code>label</code> string Label text for the field <code>placeholder</code> string Placeholder text when empty <code>value</code> string Current value of the text field <code>type</code> string Input type (text, email, password, etc.) <code>disabled</code> boolean Whether the text field is disabled <code>style</code> object Inline styles for the text field <code>class</code> string CSS class names to apply <code>error</code> string Error message to display <code>maxLength</code> number Maximum length of the text <code>rows</code> number Number of rows (for textarea) <code>autoFocus</code> boolean Whether to auto-focus the input"},{"location":"web/angular/components/#outputs_1","title":"Outputs","text":"Output Type Description <code>valueChange</code> EventEmitter Emitted when text changes <code>submitted</code> EventEmitter Emitted when the enter key is pressed <code>blurred</code> EventEmitter Emitted when the input loses focus"},{"location":"web/angular/components/#agentswitch","title":"AgentSwitch","text":"<p>A switch component that can be toggled on or off by AI agents.</p> <pre><code>&lt;agent-switch\n  id=\"notifications-switch\"\n  label=\"Enable Notifications\"\n  [(ngModel)]=\"notificationsEnabled\"\n  [disabled]=\"false\"\n  [style]=\"{\n    activeColor: '#4CAF50',\n    inactiveColor: '#ccc'\n  }\"&gt;\n&lt;/agent-switch&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  notificationsEnabled = false;\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_2","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the switch <code>label</code> string Label text for the switch <code>checked</code> boolean Current state of the switch <code>disabled</code> boolean Whether the switch is disabled <code>style</code> object Inline styles for the switch <code>class</code> string CSS class names to apply <code>labelPosition</code> 'left' | 'right' Position of the label"},{"location":"web/angular/components/#outputs_2","title":"Outputs","text":"Output Type Description <code>checkedChange</code> EventEmitter Emitted when switch value changes"},{"location":"web/angular/components/#agentdropdown","title":"AgentDropdown","text":"<p>A dropdown component that allows selection from a list of options.</p> <pre><code>&lt;agent-dropdown\n  id=\"country-dropdown\"\n  label=\"Select Country\"\n  [(ngModel)]=\"selectedCountry\"\n  [options]=\"countries\"\n  placeholder=\"Choose a country\"\n  [disabled]=\"false\"\n  [style]=\"{\n    borderColor: '#ddd',\n    borderRadius: '4px'\n  }\"&gt;\n&lt;/agent-dropdown&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  selectedCountry = '';\n\n  countries = [\n    { value: 'us', label: 'United States' },\n    { value: 'ca', label: 'Canada' },\n    { value: 'mx', label: 'Mexico' }\n  ];\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_3","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the dropdown <code>label</code> string Label text for the dropdown <code>value</code> any Currently selected value <code>options</code> Array&lt;{value: any, label: string}&gt; Array of options <code>placeholder</code> string Placeholder text when no option is selected <code>disabled</code> boolean Whether the dropdown is disabled <code>style</code> object Inline styles for the dropdown <code>class</code> string CSS class names to apply <code>error</code> string Error message to display <code>multiple</code> boolean Whether multiple options can be selected <code>clearable</code> boolean Whether the selection can be cleared"},{"location":"web/angular/components/#outputs_3","title":"Outputs","text":"Output Type Description <code>valueChange</code> EventEmitter Emitted when selection changes <code>opened</code> EventEmitter Emitted when dropdown is opened <code>closed</code> EventEmitter Emitted when dropdown is closed"},{"location":"web/angular/components/#agentcheckbox","title":"AgentCheckbox","text":"<p>A checkbox component that can be checked or unchecked by AI agents.</p> <pre><code>&lt;agent-checkbox\n  id=\"terms-checkbox\"\n  label=\"I agree to the terms and conditions\"\n  [(ngModel)]=\"termsAccepted\"\n  [disabled]=\"false\"\n  [style]=\"{\n    accentColor: '#4285F4'\n  }\"&gt;\n&lt;/agent-checkbox&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  termsAccepted = false;\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_4","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the checkbox <code>label</code> string Label text for the checkbox <code>checked</code> boolean Current state of the checkbox <code>disabled</code> boolean Whether the checkbox is disabled <code>style</code> object Inline styles for the checkbox <code>class</code> string CSS class names to apply <code>indeterminate</code> boolean Whether to show indeterminate state <code>error</code> string Error message to display"},{"location":"web/angular/components/#outputs_4","title":"Outputs","text":"Output Type Description <code>checkedChange</code> EventEmitter Emitted when checkbox value changes"},{"location":"web/angular/components/#agentslider","title":"AgentSlider","text":"<p>A slider component that can be adjusted by AI agents.</p> <pre><code>&lt;agent-slider\n  id=\"volume-slider\"\n  label=\"Volume\"\n  [(ngModel)]=\"volume\"\n  [min]=\"0\"\n  [max]=\"100\"\n  [step]=\"1\"\n  [disabled]=\"false\"\n  [style]=\"{\n    activeColor: '#4285F4',\n    inactiveColor: '#ddd',\n    thumbColor: 'white'\n  }\"&gt;\n&lt;/agent-slider&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  volume = 50;\n}\n</code></pre>"},{"location":"web/angular/components/#inputs_5","title":"Inputs","text":"Input Type Description <code>id</code> string Unique identifier for the slider <code>label</code> string Label text for the slider <code>value</code> number Current value of the slider <code>min</code> number Minimum value of the slider <code>max</code> number Maximum value of the slider <code>step</code> number Step increment value <code>disabled</code> boolean Whether the slider is disabled <code>style</code> object Inline styles for the slider <code>class</code> string CSS class names to apply <code>showValue</code> boolean Whether to show the current value <code>orientation</code> 'horizontal' | 'vertical' Orientation of the slider"},{"location":"web/angular/components/#outputs_5","title":"Outputs","text":"Output Type Description <code>valueChange</code> EventEmitter Emitted when slider value changes"},{"location":"web/angular/components/#building-custom-components","title":"Building Custom Components","text":"<p>You can create custom components that can be controlled by AI agents by using the <code>AgentComponentDirective</code> or by extending the <code>BaseAgentComponent</code> class.</p>"},{"location":"web/angular/components/#using-agentcomponentdirective","title":"Using AgentComponentDirective","text":"<pre><code>import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { AgentComponentDirective } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-custom-card',\n  template: `\n    &lt;div class=\"custom-card\" \n         [ngClass]=\"{'hovered': isHovered}\"\n         (click)=\"handleTap()\"\n         (mouseenter)=\"isHovered = true\"\n         (mouseleave)=\"isHovered = false\"\n         [style]=\"getCardStyle()\"&gt;\n      &lt;h3&gt;{{ title }}&lt;/h3&gt;\n      &lt;p *ngIf=\"description\"&gt;{{ description }}&lt;/p&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .custom-card {\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 16px;\n      transition: all 0.2s;\n    }\n    .custom-card.hovered {\n      background-color: #f9f9f9;\n    }\n  `],\n})\nexport class CustomCardComponent {\n  @Input() id!: string;\n  @Input() title!: string;\n  @Input() description: string = '';\n  @Output() tap = new EventEmitter&lt;void&gt;();\n\n  isHovered = false;\n\n  constructor(private agentComponent: AgentComponentDirective) {\n    // Register the component with AgentBridge\n    this.agentComponent.registerComponent(this.id, {\n      // Properties exposed to the AI agent\n      getProperties: () =&gt; ({\n        title: this.title,\n        description: this.description,\n        canTap: this.tap.observers.length &gt; 0,\n      }),\n      // Actions that can be performed by the AI agent\n      actions: {\n        tap: () =&gt; {\n          this.handleTap();\n          return true;\n        }\n      }\n    });\n  }\n\n  handleTap() {\n    if (this.tap.observers.length &gt; 0) {\n      this.tap.emit();\n    }\n  }\n\n  getCardStyle() {\n    return {\n      cursor: this.tap.observers.length &gt; 0 ? 'pointer' : 'default',\n    };\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#extending-baseagentcomponent","title":"Extending BaseAgentComponent","text":"<pre><code>import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BaseAgentComponent } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-custom-card',\n  template: `\n    &lt;div class=\"custom-card\" \n         [ngClass]=\"{'hovered': isHovered}\"\n         (click)=\"handleTap()\"\n         (mouseenter)=\"isHovered = true\"\n         (mouseleave)=\"isHovered = false\"\n         [style]=\"getCardStyle()\"&gt;\n      &lt;h3&gt;{{ title }}&lt;/h3&gt;\n      &lt;p *ngIf=\"description\"&gt;{{ description }}&lt;/p&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .custom-card {\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 16px;\n      transition: all 0.2s;\n    }\n    .custom-card.hovered {\n      background-color: #f9f9f9;\n    }\n  `],\n})\nexport class CustomCardComponent extends BaseAgentComponent {\n  @Input() title!: string;\n  @Input() description: string = '';\n  @Output() tap = new EventEmitter&lt;void&gt;();\n\n  isHovered = false;\n\n  // Override the getAgentProperties method from BaseAgentComponent\n  getAgentProperties() {\n    return {\n      title: this.title,\n      description: this.description,\n      canTap: this.tap.observers.length &gt; 0,\n    };\n  }\n\n  // Override the getAgentActions method from BaseAgentComponent\n  getAgentActions() {\n    return ['tap'];\n  }\n\n  // Override the handleAgentAction method from BaseAgentComponent\n  handleAgentAction(action: string, params: any) {\n    if (action === 'tap') {\n      this.handleTap();\n      return true;\n    }\n    return false;\n  }\n\n  handleTap() {\n    if (this.tap.observers.length &gt; 0) {\n      this.tap.emit();\n    }\n  }\n\n  getCardStyle() {\n    return {\n      cursor: this.tap.observers.length &gt; 0 ? 'pointer' : 'default',\n    };\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#using-the-custom-component","title":"Using the Custom Component","text":"<pre><code>&lt;app-custom-card\n  id=\"feature-card\"\n  title=\"Premium Feature\"\n  description=\"Unlock this feature by upgrading your account\"\n  (tap)=\"handleCardTap()\"&gt;\n&lt;/app-custom-card&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n})\nexport class MyComponent {\n  handleCardTap() {\n    console.log('Card tapped');\n    // Handle tap\n  }\n}\n</code></pre>"},{"location":"web/angular/components/#agentbridge-module","title":"AgentBridge Module","text":"<p>To use AgentBridge components in your Angular application, you need to import the <code>AgentBridgeModule</code> in your app module:</p> <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { AgentBridgeModule } from '@agentbridge/angular';\n\nimport { AppComponent } from './app.component';\nimport { MyComponent } from './my-component.component';\nimport { CustomCardComponent } from './custom-card.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MyComponent,\n    CustomCardComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AgentBridgeModule.forRoot({\n      apiKey: 'your-api-key',\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre>"},{"location":"web/angular/components/#best-practices","title":"Best Practices","text":"<ol> <li>Unique IDs: Always provide unique IDs for your components</li> <li>Descriptive Properties: Make your component properties descriptive for AI agents</li> <li>Consistent Actions: Use consistent action names across similar components</li> <li>NgModel Integration: Use Angular's FormsModule and ngModel for easy two-way binding</li> <li>Angular Change Detection: Respect Angular's change detection cycle when handling agent actions</li> <li>Accessibility: Ensure your components adhere to accessibility standards</li> <li>Typed Interfaces: Use TypeScript interfaces for better type checking and developer experience</li> <li>Lazy Loading: Consider the impact of AgentBridge components on bundle size and lazy loading</li> </ol>"},{"location":"web/angular/components/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Angular Services provided by AgentBridge</li> <li>Explore Web SDK Features</li> <li>See Examples of AgentBridge components in action </li> </ul>"},{"location":"web/angular/directives/","title":"Directives","text":"<p>The AgentBridge Angular SDK provides directives to easily integrate AI agent capabilities into your Angular applications.</p>"},{"location":"web/angular/directives/#agentbridgecomponentdirective","title":"AgentBridgeComponentDirective","text":"<p>The <code>AgentBridgeComponentDirective</code> allows you to mark any component as controllable by AI agents.</p> <pre><code>import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    &lt;div agentBridgeComponent=\"counter-1\" [agentBridgeProperties]=\"counterProps\"&gt;\n      &lt;h2&gt;Counter: {{ count }}&lt;/h2&gt;\n      &lt;button (click)=\"increment()\"&gt;+&lt;/button&gt;\n      &lt;button (click)=\"decrement()\"&gt;-&lt;/button&gt;\n      &lt;button (click)=\"reset()\"&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  `\n})\nexport class CounterComponent implements OnInit {\n  count = 0;\n\n  // Define properties for the agent bridge\n  counterProps = {\n    count: this.count,\n    isEven: this.count % 2 === 0,\n    isPositive: this.count &gt; 0\n  };\n\n  // Register handlers for actions\n  @AgentBridgeAction('increment')\n  increment() {\n    this.count++;\n    this.updateProps();\n    return { success: true, message: 'Incremented counter' };\n  }\n\n  @AgentBridgeAction('decrement')\n  decrement() {\n    this.count--;\n    this.updateProps();\n    return { success: true, message: 'Decremented counter' };\n  }\n\n  @AgentBridgeAction('reset')\n  reset() {\n    this.count = 0;\n    this.updateProps();\n    return { success: true, message: 'Reset counter' };\n  }\n\n  // Update the properties when the count changes\n  private updateProps() {\n    this.counterProps = {\n      count: this.count,\n      isEven: this.count % 2 === 0,\n      isPositive: this.count &gt; 0\n    };\n  }\n}\n</code></pre>"},{"location":"web/angular/directives/#usage","title":"Usage","text":"<pre><code>&lt;!-- Basic usage --&gt;\n&lt;div agentBridgeComponent=\"my-component-id\"&gt;&lt;/div&gt;\n\n&lt;!-- With properties and options --&gt;\n&lt;div \n  agentBridgeComponent=\"my-component-id\" \n  [agentBridgeProperties]=\"componentProps\"\n  [agentBridgeOptions]=\"componentOptions\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"web/angular/directives/#directive-options","title":"Directive Options","text":"Option Type Description <code>agentBridgeComponent</code> string Unique ID for the component <code>agentBridgeProperties</code> object Properties to expose to AI agents <code>agentBridgeOptions</code> object Additional options for registration"},{"location":"web/angular/directives/#agentbridgeoptions-interface","title":"AgentBridgeOptions Interface","text":"<pre><code>interface AgentBridgeOptions {\n  componentType?: string; // Type of component (e.g., 'button', 'counter')\n  name?: string; // Display name for the component\n  description?: string; // Description of the component's purpose\n  tags?: string[]; // Tags for categorizing the component\n}\n</code></pre>"},{"location":"web/angular/directives/#agentbridgefunctiondirective","title":"AgentBridgeFunctionDirective","text":"<p>The <code>AgentBridgeFunctionDirective</code> allows you to mark a method as callable by AI agents.</p> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-weather',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Weather Service&lt;/h2&gt;\n      &lt;button (click)=\"getWeather('New York')\"&gt;Get Weather for New York&lt;/button&gt;\n      &lt;div *ngIf=\"weather\"&gt;\n        &lt;h3&gt;{{ weather.location }}&lt;/h3&gt;\n        &lt;p&gt;Temperature: {{ weather.temperature }}\u00b0C&lt;/p&gt;\n        &lt;p&gt;Conditions: {{ weather.conditions }}&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `\n})\nexport class WeatherComponent {\n  weather: any;\n\n  @AgentBridgeFunction({\n    name: 'getWeather',\n    description: 'Get weather information for a location',\n    parameters: {\n      type: 'object',\n      properties: {\n        location: { \n          type: 'string',\n          description: 'City name'\n        },\n        units: { \n          type: 'string',\n          enum: ['metric', 'imperial'],\n          default: 'metric',\n          description: 'Temperature units'\n        }\n      },\n      required: ['location']\n    }\n  })\n  getWeather(location: string, units: string = 'metric') {\n    // In a real app, you would call a weather API\n    this.weather = {\n      location,\n      temperature: 22,\n      conditions: 'Sunny',\n      units\n    };\n    return this.weather;\n  }\n}\n</code></pre>"},{"location":"web/angular/overview/","title":"Angular SDK Overview","text":"<p>The AgentBridge Angular SDK provides components, services, and directives that integrate the AgentBridge framework with Angular applications. This SDK makes it easy to expose application functionality and UI components to AI agents.</p>"},{"location":"web/angular/overview/#features","title":"Features","text":"<ul> <li>Integration with Angular DI: Uses Angular's dependency injection system for services</li> <li>Reactive State Management: Observable-based state management for component tracking</li> <li>Angular Forms Integration: Works with Angular's forms system</li> <li>UI Components: Ready-to-use Angular components that can be controlled by AI agents</li> <li>Directives: Directives to easily add AI control to existing components</li> <li>Services: Angular services to manage the AgentBridge instance and its functionality</li> </ul>"},{"location":"web/angular/overview/#installation","title":"Installation","text":"<p>Install the AgentBridge Angular SDK using npm:</p> <pre><code>npm install @agentbridge/core @agentbridge/angular\n</code></pre>"},{"location":"web/angular/overview/#basic-setup","title":"Basic Setup","text":"<p>To use AgentBridge in your Angular application, add the <code>AgentBridgeModule</code> to your app module:</p> <pre><code>// app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AgentBridgeModule } from '@agentbridge/angular';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AgentBridgeModule.forRoot()  // Use forRoot() to initialize AgentBridge\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>You can configure AgentBridge by passing options to the <code>forRoot()</code> method:</p> <pre><code>AgentBridgeModule.forRoot({\n  // Provide custom AgentBridge instance\n  bridge: createAgentBridge({ /* options */ }),\n\n  // Provide custom adapter\n  adapter: new AngularAdapter(/* options */)\n})\n</code></pre>"},{"location":"web/angular/overview/#using-the-agentbridgeservice","title":"Using the AgentBridgeService","text":"<p>The <code>AgentBridgeService</code> is the main service for interacting with AgentBridge in your Angular components:</p> <pre><code>// app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    &lt;div&gt;\n      &lt;h1&gt;My AgentBridge App&lt;/h1&gt;\n      &lt;button (click)=\"triggerFunction()\"&gt;Test Function&lt;/button&gt;\n    &lt;/div&gt;\n  `\n})\nexport class AppComponent implements OnInit {\n  constructor(private agentBridgeService: AgentBridgeService) {}\n\n  ngOnInit() {\n    // Register a function\n    this.agentBridgeService.registerFunction(\n      'greet',\n      'Greet a user by name',\n      {\n        type: 'object',\n        properties: {\n          name: { type: 'string' }\n        },\n        required: ['name']\n      },\n      async ({ name }) =&gt; {\n        return { message: `Hello, ${name}!` };\n      }\n    );\n  }\n\n  triggerFunction() {\n    // Call a function\n    this.agentBridgeService.callFunction('greet', { name: 'User' })\n      .then(result =&gt; console.log(result));\n  }\n}\n</code></pre>"},{"location":"web/angular/overview/#using-components","title":"Using Components","text":"<p>The Angular SDK provides several components that can be controlled by AI agents:</p> <pre><code>&lt;!-- Example using the agent-button component --&gt;\n&lt;agent-button \n  agentId=\"my-button\"\n  [disabled]=\"isDisabled\"\n  (clicked)=\"handleButtonClick()\"&gt;\n  Click Me\n&lt;/agent-button&gt;\n\n&lt;!-- Example using the agent-input component --&gt;\n&lt;agent-input\n  agentId=\"my-input\"\n  [placeholder]=\"'Enter some text'\"\n  [(ngModel)]=\"inputValue\"&gt;\n&lt;/agent-input&gt;\n\n&lt;!-- Example using the agent-select component --&gt;\n&lt;agent-select\n  agentId=\"my-select\"\n  [(ngModel)]=\"selectedValue\"&gt;\n  &lt;option value=\"option1\"&gt;Option 1&lt;/option&gt;\n  &lt;option value=\"option2\"&gt;Option 2&lt;/option&gt;\n  &lt;option value=\"option3\"&gt;Option 3&lt;/option&gt;\n&lt;/agent-select&gt;\n</code></pre>"},{"location":"web/angular/overview/#using-the-agentcontainerdirective","title":"Using the AgentContainerDirective","text":"<p>You can use the <code>agentContainer</code> directive to make any element controllable by AI agents:</p> <pre><code>&lt;div [agentContainer]=\"'my-container'\" [agentProps]=\"containerProps\"&gt;\n  &lt;p&gt;This container can be controlled by AI agents.&lt;/p&gt;\n  &lt;agent-button agentId=\"my-button\"&gt;Click Me&lt;/agent-button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"web/angular/overview/#subscribing-to-state-changes","title":"Subscribing to State Changes","text":"<p>You can subscribe to state changes using the <code>state$</code> observable from the <code>AgentBridgeService</code>:</p> <pre><code>import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-state-monitor',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Component Registry&lt;/h2&gt;\n      &lt;pre&gt;{{ componentCount }} components registered&lt;/pre&gt;\n    &lt;/div&gt;\n  `\n})\nexport class StateMonitorComponent implements OnInit, OnDestroy {\n  private subscription: Subscription | null = null;\n  componentCount = 0;\n\n  constructor(private agentBridgeService: AgentBridgeService) {}\n\n  ngOnInit() {\n    this.subscription = this.agentBridgeService.state$.subscribe(state =&gt; {\n      this.componentCount = state.componentRegistry.size;\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n</code></pre>"},{"location":"web/angular/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about the Angular components</li> <li>Learn more about the Angular services</li> <li>Explore the Core API</li> </ul> <p>// Update any references to the old package structure import { AblyProvider } from '@agentbridge/provider-ably';</p>"},{"location":"web/angular/services/","title":"Services","text":"<p>This page is under construction. It will contain documentation about Services in the Angular section.</p>"},{"location":"web/angular/services/#coming-soon","title":"Coming Soon","text":"<p>Check back soon for detailed documentation on this topic.</p> <p>The AgentBridge Angular SDK provides various services to integrate AI agent capabilities into your Angular applications.</p>"},{"location":"web/angular/services/#agentbridgeservice","title":"AgentBridgeService","text":"<p>The <code>AgentBridgeService</code> is the main service that provides integration with the AgentBridge framework.</p> <pre><code>import { Injectable } from '@angular/core';\nimport { AgentBridgeService } from '@agentbridge/angular';\nimport { ExecutionContext } from '@agentbridge/core';\n\n@Injectable()\nexport class MyComponent implements OnInit, OnDestroy {\n  constructor(private agentBridge: AgentBridgeService) {}\n\n  ngOnInit() {\n    // Register a component\n    this.agentBridge.registerComponent({\n      id: 'my-component-1',\n      componentType: 'button',\n      name: 'Submit Button',\n      description: 'A button that submits the form',\n      properties: {\n        label: 'Submit',\n        disabled: false\n      }\n    }, this, { // handlers\n      click: () =&gt; {\n        // Handle click\n        return { success: true };\n      }\n    });\n\n    // Register a function\n    this.agentBridge.registerFunction({\n      name: 'getWeatherData',\n      description: 'Get current weather data for a location',\n      parameters: {\n        type: 'object',\n        properties: {\n          location: { \n            type: 'string',\n            description: 'City name or postal code'\n          }\n        },\n        required: ['location']\n      }\n    }, (params: any, context: ExecutionContext) =&gt; {\n      // Function implementation\n      return Promise.resolve({ temp: 72, condition: 'sunny' });\n    });\n  }\n\n  ngOnDestroy() {\n    // Unregister the component when the Angular component is destroyed\n    this.agentBridge.unregisterComponent('my-component-1');\n  }\n\n  // Update component state\n  updateButtonState(disabled: boolean) {\n    this.agentBridge.updateComponentState('my-component-1', {\n      disabled\n    });\n  }\n}\n</code></pre>"},{"location":"web/angular/services/#service-methods","title":"Service Methods","text":"<p>The <code>AgentBridgeService</code> provides the following methods:</p>"},{"location":"web/angular/services/#component-management","title":"Component Management","text":"<ul> <li><code>registerComponent(componentDefinition, instance, handlers)</code>: Register a component with AgentBridge</li> <li><code>unregisterComponent(id)</code>: Unregister a component by ID</li> <li><code>updateComponentState(id, newState)</code>: Update component state</li> </ul>"},{"location":"web/angular/services/#function-management","title":"Function Management","text":"<ul> <li><code>registerFunction(definition, handler)</code>: Register a function with AgentBridge </li> <li><code>callFunction(name, params)</code>: Call a registered function</li> </ul>"},{"location":"web/angular/services/#using-with-angularadapter","title":"Using with AngularAdapter","text":"<p>The <code>AgentBridgeService</code> uses an <code>AngularAdapter</code> internally to manage the registration and state of components. The adapter handles Angular-specific concerns such as change detection and component lifecycle.</p>"},{"location":"web/angular/services/#other-services","title":"Other Services","text":""},{"location":"web/angular/services/#agentauthservice","title":"AgentAuthService","text":"<p>Handles authentication and authorization for AI agents.</p> <pre><code>import { Injectable } from '@angular/core';\nimport { AgentAuthService } from '@agentbridge/angular';\n\n@Injectable()\nexport class MyAuthComponent {\n  constructor(private authService: AgentAuthService) {}\n\n  checkAccess() {\n    const hasAccess = this.authService.hasPermission('read:users');\n    // Use the result\n  }\n}\n</code></pre>"},{"location":"web/react/","title":"React SDK for AgentBridge","text":"<p>The React SDK for AgentBridge makes it easy to integrate your React web applications with AI agents. This SDK provides hooks, components, and utilities to register functions and UI components with AgentBridge, making them accessible to AI agents.</p>"},{"location":"web/react/#hooks","title":"Hooks","text":"<p>The React SDK provides several hooks for interacting with AgentBridge:</p>"},{"location":"web/react/#useregistercomponent","title":"useRegisterComponent","text":"<p>A modern hook for registering a component with AgentBridge. This hook provides a clean, declarative way to expose your components to AI agents.</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport { useRegisterComponent } from '@agentbridge/react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const { updateState } = useRegisterComponent({\n    id: 'counter-1',\n    componentType: 'counter',\n    name: 'Counter Component',\n    description: 'A counter that can be incremented or decremented',\n    properties: {\n      count,\n      isEven: count % 2 === 0,\n      isPositive: count &gt; 0\n    },\n    actions: {\n      increment: {\n        description: 'Increase the counter by 1',\n        handler: () =&gt; {\n          setCount(prev =&gt; prev + 1);\n          return { success: true, message: 'Counter incremented', newValue: count + 1 };\n        }\n      },\n      decrement: {\n        description: 'Decrease the counter by 1',\n        handler: () =&gt; {\n          setCount(prev =&gt; prev - 1);\n          return { success: true, message: 'Counter decremented', newValue: count - 1 };\n        }\n      },\n      reset: {\n        description: 'Reset the counter to 0',\n        handler: () =&gt; {\n          setCount(0);\n          return { success: true, message: 'Counter reset', newValue: 0 };\n        }\n      }\n    }\n  });\n\n  // Update state when count changes\n  useEffect(() =&gt; {\n    updateState({\n      count,\n      isEven: count % 2 === 0,\n      isPositive: count &gt; 0\n    });\n  }, [count, updateState]);\n\n  // The component's UI\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count - 1)}&gt;-&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/#useagentfunction","title":"useAgentFunction","text":"<p>A hook for registering a function with AgentBridge:</p> <pre><code>import { useAgentFunction } from '@agentbridge/react';\n\nfunction WeatherWidget() {\n  useAgentFunction(\n    'getWeather',\n    'Get weather information for a location',\n    async (params, context) =&gt; {\n      const { location } = params;\n      // Fetch weather data from an API\n      return { temperature: 72, conditions: 'sunny' };\n    },\n    {\n      parameters: {\n        type: 'object',\n        properties: {\n          location: { type: 'string' }\n        },\n        required: ['location']\n      },\n      tags: ['weather', 'data']\n    }\n  );\n\n  return &lt;div&gt;Weather function registered!&lt;/div&gt;;\n}\n</code></pre>"},{"location":"web/react/#useagentbridge","title":"useAgentBridge","text":"<p>Access the AgentBridge instance and connection status:</p> <pre><code>import { useAgentBridge } from '@agentbridge/react';\n\nfunction ConnectionStatus() {\n  const { isConnected, bridge } = useAgentBridge();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Connection Status&lt;/h2&gt;\n      &lt;p&gt;Status: {isConnected ? 'Connected' : 'Disconnected'}&lt;/p&gt;\n      &lt;button onClick={() =&gt; isConnected ? bridge.disconnect() : bridge.connect()}&gt;\n        {isConnected ? 'Disconnect' : 'Connect'}\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/#components","title":"Components","text":"<p>The React SDK provides pre-built components that are ready to be used with AgentBridge:</p> <ul> <li><code>AgentButton</code>: A button that can be controlled by AI agents</li> <li><code>AgentInput</code>: An input field that can be controlled by AI agents</li> <li><code>AgentSelect</code>: A select dropdown that can be controlled by AI agents</li> <li><code>AgentContainer</code>: A container for other components</li> </ul> <pre><code>import { AgentButton, AgentInput } from '@agentbridge/react';\n\nfunction LoginForm() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  return (\n    &lt;div&gt;\n      &lt;AgentInput\n        agentId=\"username-input\"\n        agentType=\"text-input\"\n        placeholder=\"Username\"\n        value={username}\n        onChange={e =&gt; setUsername(e.target.value)}\n      /&gt;\n\n      &lt;AgentInput\n        agentId=\"password-input\"\n        agentType=\"password-input\"\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={e =&gt; setPassword(e.target.value)}\n      /&gt;\n\n      &lt;AgentButton\n        agentId=\"login-button\"\n        agentType=\"submit-button\"\n        onClick={() =&gt; console.log('Login clicked')}\n      &gt;\n        Login\n      &lt;/AgentButton&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/#provider","title":"Provider","text":"<p>Wrap your application with the <code>AgentBridgeProvider</code> to connect to the AgentBridge framework:</p> <pre><code>import { AgentBridgeProvider } from '@agentbridge/react';\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\nfunction App() {\n  const ablyProvider = new AblyProvider({\n    apiKey: 'your-ably-api-key'\n  });\n\n  return (\n    &lt;AgentBridgeProvider communicationProvider={ablyProvider}&gt;\n      &lt;YourApplication /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/#learn-more","title":"Learn More","text":"<p>For more detailed information, see:</p> <ul> <li>Hooks Reference</li> <li>Components Reference</li> <li>Getting Started Guide </li> </ul>"},{"location":"web/react/changes/","title":"Change Log for React SDK","text":"<p>This page documents the changes and updates to the AgentBridge React SDK.</p>"},{"location":"web/react/changes/#version-020","title":"Version 0.2.0","text":"<p>Released: October 2023</p>"},{"location":"web/react/changes/#major-changes","title":"Major Changes","text":"<ul> <li>Added new <code>useRegisterComponent</code> hook with improved API</li> <li>Updated return values for component actions to support detailed responses</li> <li>Improved component state updates with automatic property tracking</li> <li>Added full TypeScript support for all hooks and components</li> </ul>"},{"location":"web/react/changes/#api-changes","title":"API Changes","text":""},{"location":"web/react/changes/#new-hooks","title":"New Hooks","text":"<ul> <li><code>useRegisterComponent</code>: New hook for registering components with better state management</li> <li><code>useAgentFunctionCall</code>: New hook for calling functions registered with AgentBridge</li> </ul>"},{"location":"web/react/changes/#updated-hooks","title":"Updated Hooks","text":"<ul> <li><code>useAgentFunction</code>: Updated parameter format to use a single configuration object</li> <li><code>useAgentComponent</code>: Improved with better property handling and action results</li> </ul>"},{"location":"web/react/changes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li><code>useAgentComponent</code> now uses a different return value structure</li> <li>Component actions now return an object with <code>success</code> and <code>message</code> properties</li> <li>Hook dependency arrays now require more careful management</li> </ul>"},{"location":"web/react/changes/#migration-guide","title":"Migration Guide","text":""},{"location":"web/react/changes/#migrating-from-useagentcomponent-to-useregistercomponent","title":"Migrating from useAgentComponent to useRegisterComponent","text":"<p>Before:</p> <pre><code>// Old way with useAgentComponent\nconst updateState = useAgentComponent(id, {\n  type: 'counter',\n  properties: {...},\n  actions: {\n    increment: () =&gt; {\n      setCount(prev =&gt; prev + 1);\n      return true;\n    }\n  }\n});\n</code></pre> <p>After:</p> <pre><code>// New way with useRegisterComponent\nconst { updateState } = useRegisterComponent({\n  id: 'counter-1',\n  componentType: 'counter',\n  properties: {...},\n  actions: {\n    increment: {\n      description: 'Increment the counter',\n      handler: () =&gt; {\n        setCount(prev =&gt; prev + 1);\n        return { success: true, message: 'Counter incremented', newValue: count + 1 };\n      }\n    }\n  }\n});\n\n// Add effect to update state when properties change\nuseEffect(() =&gt; {\n  updateState({\n    count, \n    isEven: count % 2 === 0\n  });\n}, [count, updateState]);\n</code></pre>"},{"location":"web/react/changes/#updating-action-return-values","title":"Updating Action Return Values","text":"<p>Before:</p> <pre><code>actions: {\n  increment: () =&gt; {\n    setCount(prev =&gt; prev + 1);\n    return true; // Simple boolean return\n  }\n}\n</code></pre> <p>After:</p> <pre><code>actions: {\n  increment: {\n    description: 'Increment the counter',\n    handler: () =&gt; {\n      setCount(prev =&gt; prev + 1);\n      return { \n        success: true, \n        message: 'Counter incremented', \n        newValue: count + 1 \n      };\n    }\n  }\n}\n</code></pre>"},{"location":"web/react/changes/#version-010","title":"Version 0.1.0","text":"<p>Released: July 2023</p>"},{"location":"web/react/changes/#initial-release","title":"Initial Release","text":"<ul> <li>Basic component registration with <code>useAgentComponent</code></li> <li>Function registration with <code>useAgentFunction</code></li> <li>AgentBridge provider for React</li> <li>Pre-built components for common UI elements </li> </ul>"},{"location":"web/react/components/","title":"React Components","text":"<p>This page documents all the UI components available in the AgentBridge React SDK. These components are designed to be easily controlled by AI agents while providing a seamless React experience.</p>"},{"location":"web/react/components/#core-components","title":"Core Components","text":"<p>The AgentBridge React SDK provides several ready-to-use components that can be controlled by AI agents:</p>"},{"location":"web/react/components/#agentbutton","title":"AgentButton","text":"<p>A button component that can be controlled by AI agents.</p> <pre><code>import { AgentButton } from '@agentbridge/react';\n\nfunction MyComponent() {\n  return (\n    &lt;AgentButton\n      id=\"submit-button\"\n      label=\"Submit\"\n      onClick={() =&gt; {\n        // Your action here\n      }}\n      style={{\n        backgroundColor: '#4285F4',\n        color: 'white',\n        borderRadius: '4px',\n        padding: '8px 16px',\n      }}\n      disabled={false}\n      loading={false}\n      icon=\"arrow-right\"\n      iconPosition=\"right\"\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the button <code>label</code> string Text to display on the button <code>onClick</code> function Callback function when button is clicked <code>style</code> object Inline styles for the button <code>className</code> string CSS class names to apply <code>disabled</code> boolean Whether the button is disabled <code>loading</code> boolean Whether to show a loading indicator <code>icon</code> string | ReactNode Icon to display with the button <code>iconPosition</code> 'left' | 'right' Position of the icon"},{"location":"web/react/components/#agenttextfield","title":"AgentTextField","text":"<p>A text field component that can be controlled by AI agents.</p> <pre><code>import { AgentTextField } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [value, setValue] = useState('');\n\n  return (\n    &lt;AgentTextField\n      id=\"email-input\"\n      label=\"Email Address\"\n      placeholder=\"Enter your email\"\n      value={value}\n      onChange={(e) =&gt; setValue(e.target.value)}\n      onSubmit={(value) =&gt; {\n        // Handle submission\n      }}\n      type=\"email\"\n      style={{\n        borderColor: '#ddd',\n        borderRadius: '4px',\n        padding: '8px',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_1","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the text field <code>label</code> string Label text for the field <code>placeholder</code> string Placeholder text when empty <code>value</code> string Current value of the text field <code>onChange</code> function Callback when text changes <code>onSubmit</code> function Callback when form is submitted <code>type</code> string Input type (text, email, password, etc.) <code>style</code> object Inline styles for the text field <code>className</code> string CSS class names to apply <code>disabled</code> boolean Whether the text field is disabled <code>error</code> string Error message to display <code>maxLength</code> number Maximum length of the text <code>rows</code> number Number of rows (for textarea) <code>autoFocus</code> boolean Whether to auto-focus the input"},{"location":"web/react/components/#agentswitch","title":"AgentSwitch","text":"<p>A switch component that can be toggled on or off by AI agents.</p> <pre><code>import { AgentSwitch } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    &lt;AgentSwitch\n      id=\"notifications-switch\"\n      label=\"Enable Notifications\"\n      checked={checked}\n      onChange={(value) =&gt; setChecked(value)}\n      disabled={false}\n      style={{\n        activeColor: '#4CAF50',\n        inactiveColor: '#ccc',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_2","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the switch <code>label</code> string Label text for the switch <code>checked</code> boolean Current state of the switch <code>onChange</code> function Callback when switch value changes <code>disabled</code> boolean Whether the switch is disabled <code>style</code> object Inline styles for the switch <code>className</code> string CSS class names to apply <code>labelPosition</code> 'left' | 'right' Position of the label"},{"location":"web/react/components/#agentdropdown","title":"AgentDropdown","text":"<p>A dropdown component that allows selection from a list of options.</p> <pre><code>import { AgentDropdown } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [selected, setSelected] = useState('');\n\n  const options = [\n    { value: 'us', label: 'United States' },\n    { value: 'ca', label: 'Canada' },\n    { value: 'mx', label: 'Mexico' },\n  ];\n\n  return (\n    &lt;AgentDropdown\n      id=\"country-dropdown\"\n      label=\"Select Country\"\n      value={selected}\n      options={options}\n      onChange={(value) =&gt; setSelected(value)}\n      placeholder=\"Choose a country\"\n      disabled={false}\n      style={{\n        borderColor: '#ddd',\n        borderRadius: '4px',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_3","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the dropdown <code>label</code> string Label text for the dropdown <code>value</code> any Currently selected value <code>options</code> array Array of options (objects with value and label) <code>onChange</code> function Callback when selection changes <code>placeholder</code> string Placeholder text when no option is selected <code>disabled</code> boolean Whether the dropdown is disabled <code>style</code> object Inline styles for the dropdown <code>className</code> string CSS class names to apply <code>error</code> string Error message to display <code>isMulti</code> boolean Whether multiple options can be selected <code>isClearable</code> boolean Whether the selection can be cleared"},{"location":"web/react/components/#agentcheckbox","title":"AgentCheckbox","text":"<p>A checkbox component that can be checked or unchecked by AI agents.</p> <pre><code>import { AgentCheckbox } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    &lt;AgentCheckbox\n      id=\"terms-checkbox\"\n      label=\"I agree to the terms and conditions\"\n      checked={checked}\n      onChange={(value) =&gt; setChecked(value)}\n      disabled={false}\n      style={{\n        accentColor: '#4285F4',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_4","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the checkbox <code>label</code> string Label text for the checkbox <code>checked</code> boolean Current state of the checkbox <code>onChange</code> function Callback when checkbox value changes <code>disabled</code> boolean Whether the checkbox is disabled <code>style</code> object Inline styles for the checkbox <code>className</code> string CSS class names to apply <code>indeterminate</code> boolean Whether to show indeterminate state <code>error</code> string Error message to display"},{"location":"web/react/components/#agentslider","title":"AgentSlider","text":"<p>A slider component that can be adjusted by AI agents.</p> <pre><code>import { AgentSlider } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const [value, setValue] = useState(50);\n\n  return (\n    &lt;AgentSlider\n      id=\"volume-slider\"\n      label=\"Volume\"\n      value={value}\n      min={0}\n      max={100}\n      step={1}\n      onChange={(value) =&gt; setValue(value)}\n      disabled={false}\n      style={{\n        activeColor: '#4285F4',\n        inactiveColor: '#ddd',\n        thumbColor: 'white',\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#props_5","title":"Props","text":"Prop Type Description <code>id</code> string Unique identifier for the slider <code>label</code> string Label text for the slider <code>value</code> number Current value of the slider <code>min</code> number Minimum value of the slider <code>max</code> number Maximum value of the slider <code>step</code> number Step increment value <code>onChange</code> function Callback when slider value changes <code>disabled</code> boolean Whether the slider is disabled <code>style</code> object Inline styles for the slider <code>className</code> string CSS class names to apply <code>showValue</code> boolean Whether to show the current value <code>orientation</code> 'horizontal' | 'vertical' Orientation of the slider"},{"location":"web/react/components/#building-custom-components","title":"Building Custom Components","text":"<p>You can create custom components that can be controlled by AI agents by using the <code>withAgentComponent</code> higher-order component (HOC) or the <code>useAgentComponent</code> hook.</p>"},{"location":"web/react/components/#using-the-hoc","title":"Using the HOC","text":"<pre><code>import { withAgentComponent } from '@agentbridge/react';\nimport { useState } from 'react';\n\nfunction CustomCard({ id, title, description, onTap, isAgentControlled, registerAgentAction }) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Register actions for the AI agent\n  useState(() =&gt; {\n    if (isAgentControlled) {\n      registerAgentAction('tap', () =&gt; {\n        if (onTap) onTap();\n        return true;\n      });\n    }\n  }, [isAgentControlled, registerAgentAction, onTap]);\n\n  return (\n    &lt;div \n      className={`custom-card ${isHovered ? 'hovered' : ''}`}\n      onClick={onTap}\n      onMouseEnter={() =&gt; setIsHovered(true)}\n      onMouseLeave={() =&gt; setIsHovered(false)}\n      style={{\n        border: '1px solid #ddd',\n        borderRadius: '8px',\n        padding: '16px',\n        cursor: onTap ? 'pointer' : 'default',\n        transition: 'all 0.2s',\n        backgroundColor: isHovered ? '#f9f9f9' : 'white',\n      }}\n    &gt;\n      &lt;h3&gt;{title}&lt;/h3&gt;\n      {description &amp;&amp; &lt;p&gt;{description}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// Wrap the component with the agent HOC\nexport default withAgentComponent(CustomCard, {\n  // Properties exposed to the AI agent\n  getAgentProperties: (props) =&gt; ({\n    title: props.title,\n    description: props.description,\n    canTap: !!props.onTap,\n  }),\n  // Actions that can be performed by the AI agent\n  agentActions: ['tap'],\n});\n</code></pre>"},{"location":"web/react/components/#using-the-hook","title":"Using the Hook","text":"<pre><code>import { useAgentComponent } from '@agentbridge/react';\nimport { useState } from 'react';\n\nexport default function CustomCard({ id, title, description, onTap }) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Use the hook to make the component controllable by AI agents\n  const { registerAgentAction } = useAgentComponent(id, {\n    // Properties exposed to the AI agent\n    properties: {\n      title,\n      description,\n      canTap: !!onTap,\n    },\n    // Actions that can be performed by the AI agent\n    actions: {\n      tap: () =&gt; {\n        if (onTap) onTap();\n        return true;\n      },\n    },\n  });\n\n  return (\n    &lt;div \n      className={`custom-card ${isHovered ? 'hovered' : ''}`}\n      onClick={onTap}\n      onMouseEnter={() =&gt; setIsHovered(true)}\n      onMouseLeave={() =&gt; setIsHovered(false)}\n      style={{\n        border: '1px solid #ddd',\n        borderRadius: '8px',\n        padding: '16px',\n        cursor: onTap ? 'pointer' : 'default',\n        transition: 'all 0.2s',\n        backgroundColor: isHovered ? '#f9f9f9' : 'white',\n      }}\n    &gt;\n      &lt;h3&gt;{title}&lt;/h3&gt;\n      {description &amp;&amp; &lt;p&gt;{description}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#using-the-custom-component","title":"Using the Custom Component","text":"<pre><code>import CustomCard from './CustomCard';\n\nfunction MyComponent() {\n  return (\n    &lt;CustomCard\n      id=\"feature-card\"\n      title=\"Premium Feature\"\n      description=\"Unlock this feature by upgrading your account\"\n      onTap={() =&gt; {\n        // Handle tap\n        console.log('Card tapped');\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#component-context-provider","title":"Component Context Provider","text":"<p>Wrap your application or component tree with the <code>AgentBridgeProvider</code> to enable agent control:</p> <pre><code>import { AgentBridgeProvider } from '@agentbridge/react';\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider apiKey=\"your-api-key\"&gt;\n      {/* Your application components */}\n      &lt;YourComponent /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/components/#best-practices","title":"Best Practices","text":"<ol> <li>Unique IDs: Always provide unique IDs for your components</li> <li>Descriptive Properties: Make your component properties descriptive for AI agents</li> <li>Consistent Actions: Use consistent action names across similar components</li> <li>State Management: Use React state management patterns (useState, useReducer, or context) to manage component state</li> <li>Accessibility: Ensure your components adhere to accessibility standards (WAI-ARIA)</li> <li>Error Handling: Handle errors gracefully in action handlers</li> <li>TypeScript: Use TypeScript for better type checking and developer experience</li> </ol>"},{"location":"web/react/components/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about React Hooks provided by AgentBridge</li> <li>Explore Web SDK Features</li> <li>See Examples of AgentBridge components in action </li> </ul>"},{"location":"web/react/getting-started/","title":"Getting Started with React SDK","text":"<p>This guide will help you get started with the AgentBridge React SDK.</p>"},{"location":"web/react/getting-started/#installation","title":"Installation","text":"<p>First, install the core package and React SDK:</p> <pre><code>npm install @agentbridge/core @agentbridge/react\n</code></pre> <p>Then install a communication provider. You can choose between:</p> <pre><code># For Ably Pub/Sub provider\nnpm install @agentbridge/provider-ably\n\n# For Firebase Pub/Sub provider\nnpm install @agentbridge/provider-firebase\n\n# For Pusher Pub/Sub provider\nnpm install @agentbridge/provider-pusher\n\n# For Supabase Pub/Sub provider\nnpm install @agentbridge/provider-supabase\n\n# For WebSocket communication (self-hosted mode)\nnpm install @agentbridge/communication-websocket\n</code></pre>"},{"location":"web/react/getting-started/#basic-setup","title":"Basic Setup","text":"<p>Wrap your application with the <code>AgentBridgeProvider</code> component to provide access to AgentBridge throughout your React app:</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AgentBridgeProvider } from '@agentbridge/react';\nimport { createAgentBridge } from '@agentbridge/core';\nimport { initializeWebSocketProvider } from '@agentbridge/communication-websocket';\n\n// Create AgentBridge instance\nconst bridge = createAgentBridge();\n\n// Setup WebSocket provider (or any other provider)\nconst provider = initializeWebSocketProvider(bridge, {\n  url: 'ws://localhost:3001' // Your WebSocket server URL\n});\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider bridge={bridge}&gt;\n      {/* Your app components */}\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>"},{"location":"web/react/getting-started/#creating-an-ai-controllable-component","title":"Creating an AI-Controllable Component","text":"<p>Use the <code>useRegisterComponent</code> hook to make your components controllable by AI agents:</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport { useRegisterComponent } from '@agentbridge/react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  // Register component with AgentBridge\n  const { updateState } = useRegisterComponent({\n    id: 'counter-1',\n    componentType: 'counter',\n    name: 'Counter Component',\n    description: 'A counter that can be incremented or decremented',\n    properties: {\n      count,\n      isEven: count % 2 === 0,\n      isPositive: count &gt; 0\n    },\n    actions: {\n      increment: {\n        description: 'Increase the counter by 1',\n        handler: () =&gt; {\n          setCount(prev =&gt; prev + 1);\n          return { success: true, message: 'Counter incremented', newValue: count + 1 };\n        }\n      },\n      decrement: {\n        description: 'Decrease the counter by 1',\n        handler: () =&gt; {\n          setCount(prev =&gt; prev - 1);\n          return { success: true, message: 'Counter decremented', newValue: count - 1 };\n        }\n      },\n      reset: {\n        description: 'Reset the counter to 0',\n        handler: () =&gt; {\n          setCount(0);\n          return { success: true, message: 'Counter reset', newValue: 0 };\n        }\n      }\n    }\n  });\n\n  // Update state when count changes\n  useEffect(() =&gt; {\n    updateState({\n      count,\n      isEven: count % 2 === 0,\n      isPositive: count &gt; 0\n    });\n  }, [count, updateState]);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count - 1)}&gt;-&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(0)}&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/getting-started/#registering-functions","title":"Registering Functions","text":"<p>Use the <code>useAgentFunction</code> hook to make application functions callable by AI agents:</p> <pre><code>import { useAgentFunction } from '@agentbridge/react';\n\nfunction WeatherWidget() {\n  const [weatherData, setWeatherData] = useState(null);\n\n  useAgentFunction({\n    name: 'getWeather',\n    description: 'Get weather information for a location',\n    parameters: {\n      type: 'object',\n      properties: {\n        location: { \n          type: 'string', \n          description: 'City name or postal code' \n        },\n        units: { \n          type: 'string', \n          enum: ['metric', 'imperial'],\n          default: 'metric',\n          description: 'Temperature units' \n        }\n      },\n      required: ['location']\n    },\n    handler: async (params) =&gt; {\n      const { location, units = 'metric' } = params;\n\n      try {\n        // Simulate API call (replace with actual API call)\n        const data = {\n          location,\n          temperature: 22,\n          conditions: 'Sunny',\n          humidity: 50,\n          units\n        };\n\n        setWeatherData(data);\n        return { success: true, data };\n      } catch (error) {\n        return { success: false, error: error.message };\n      }\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Weather Function&lt;/h2&gt;\n      {weatherData &amp;&amp; (\n        &lt;div&gt;\n          &lt;h3&gt;{weatherData.location}&lt;/h3&gt;\n          &lt;p&gt;Temperature: {weatherData.temperature}\u00b0{weatherData.units === 'metric' ? 'C' : 'F'}&lt;/p&gt;\n          &lt;p&gt;Conditions: {weatherData.conditions}&lt;/p&gt;\n          &lt;p&gt;Humidity: {weatherData.humidity}%&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have a basic understanding of the AgentBridge React SDK, you can:</p> <ol> <li>Learn more about hooks</li> <li>Explore pre-built components</li> <li>Check out example applications</li> <li>Read about communication modes </li> </ol>"},{"location":"web/react/hooks/","title":"React Hooks","text":"<p>The AgentBridge React SDK provides a set of hooks that make it easy to integrate with the AgentBridge framework. These hooks follow React best practices and provide a simple, declarative way to use AgentBridge functionality.</p>"},{"location":"web/react/hooks/#core-hooks","title":"Core Hooks","text":""},{"location":"web/react/hooks/#useagentbridge","title":"useAgentBridge","text":"<p>The primary hook for accessing the AgentBridge instance and its capabilities.</p> <pre><code>import { useAgentBridge } from '@agentbridge/react';\n\nfunction MyComponent() {\n  const {\n    // Bridge status\n    isConnected,\n    connectionStatus,\n\n    // Core methods\n    registerFunction,\n    unregisterFunction,\n    callFunction,\n\n    // Component methods\n    registerComponent,\n    unregisterComponent,\n    updateComponentState,\n\n    // Statistics\n    componentCount,\n    functionCount,\n\n    // Metadata\n    applicationId,\n    environmentId\n  } = useAgentBridge();\n\n  // Use these methods and properties in your component\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;AgentBridge Status&lt;/h2&gt;\n      &lt;div&gt;Connected: {isConnected ? 'Yes' : 'No'}&lt;/div&gt;\n      &lt;div&gt;Status: {connectionStatus}&lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#useagentfunction","title":"useAgentFunction","text":"<p>A hook for registering a function with AgentBridge.</p> <pre><code>import { useAgentFunction } from '@agentbridge/react';\n\nfunction WeatherFunction() {\n  // Register a function\n  useAgentFunction({\n    name: 'getWeather',\n    description: 'Get weather information for a location',\n    parameters: {\n      type: 'object',\n      properties: {\n        location: { type: 'string' },\n        units: { type: 'string', enum: ['metric', 'imperial'] }\n      },\n      required: ['location']\n    },\n    handler: async (params) =&gt; {\n      const { location, units = 'metric' } = params;\n\n      // Implementation (replace with actual API call)\n      console.log(`Getting weather for ${location} in ${units}`);\n\n      return {\n        location,\n        temperature: 22,\n        conditions: 'sunny',\n        humidity: 45,\n        units\n      };\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Weather Function Registered&lt;/h2&gt;\n      &lt;p&gt;The AI agent can now call the getWeather function.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#useregistercomponent","title":"useRegisterComponent","text":"<p>A hook for registering a component with AgentBridge. This hook makes it easy to register your component with the AgentBridge framework, making it accessible to AI agents.</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport { useRegisterComponent } from '@agentbridge/react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  // Register this component with AgentBridge\n  const { updateState } = useRegisterComponent({\n    id: 'main-counter',\n    componentType: 'counter',\n    name: 'Main Counter',\n    description: 'A counter component that can be incremented or decremented',\n    properties: {\n      count,\n      isEven: count % 2 === 0,\n      isPositive: count &gt; 0\n    },\n    actions: {\n      increment: {\n        description: 'Increase the counter by 1',\n        handler: () =&gt; {\n          setCount(prev =&gt; prev + 1);\n          return { success: true, message: 'Counter incremented', newValue: count + 1 };\n        }\n      },\n      decrement: {\n        description: 'Decrease the counter by 1',\n        handler: () =&gt; {\n          setCount(prev =&gt; prev - 1);\n          return { success: true, message: 'Counter decremented', newValue: count - 1 };\n        }\n      },\n      reset: {\n        description: 'Reset the counter to 0',\n        handler: () =&gt; {\n          setCount(0);\n          return { success: true, message: 'Counter reset', newValue: 0 };\n        }\n      }\n    }\n  });\n\n  // Update the component state whenever count changes\n  useEffect(() =&gt; {\n    updateState({ \n      count, \n      isEven: count % 2 === 0,\n      isPositive: count &gt; 0 \n    });\n  }, [count, updateState]);\n\n  return (\n    &lt;div className=\"counter\"&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setCount(prev =&gt; prev + 1)}&gt;Increment&lt;/button&gt;\n        &lt;button onClick={() =&gt; setCount(prev =&gt; prev - 1)}&gt;Decrement&lt;/button&gt;\n        &lt;button onClick={() =&gt; setCount(0)}&gt;Reset&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;p&gt;This counter is {count % 2 === 0 ? 'even' : 'odd'} and {count &gt; 0 ? 'positive' : count &lt; 0 ? 'negative' : 'zero'}.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#useagentcomponent","title":"useAgentComponent","text":"<p>A hook for registering a custom component with AgentBridge.</p> <pre><code>import React, { useState } from 'react';\nimport { useAgentComponent } from '@agentbridge/react';\n\nfunction CustomCard({ id, title, description, onAction }) {\n  const [expanded, setExpanded] = useState(false);\n\n  // Register this component with AgentBridge\n  useAgentComponent(id, {\n    // Define the component type\n    type: 'card',\n\n    // Define the component properties that agents can access\n    properties: {\n      title,\n      description,\n      expanded,\n    },\n\n    // Define actions that agents can perform\n    actions: {\n      expand: () =&gt; {\n        setExpanded(true);\n        return true;\n      },\n      collapse: () =&gt; {\n        setExpanded(false);\n        return true;\n      },\n      trigger: () =&gt; {\n        if (onAction) onAction();\n        return true;\n      }\n    }\n  });\n\n  return (\n    &lt;div className=\"custom-card\"&gt;\n      &lt;h3&gt;{title}&lt;/h3&gt;\n      {expanded &amp;&amp; &lt;p&gt;{description}&lt;/p&gt;}\n      &lt;button onClick={() =&gt; setExpanded(!expanded)}&gt;\n        {expanded ? 'Collapse' : 'Expand'}\n      &lt;/button&gt;\n      {onAction &amp;&amp; (\n        &lt;button onClick={onAction}&gt;\n          Trigger Action\n        &lt;/button&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#useagentcomponentstate","title":"useAgentComponentState","text":"<p>A hook for tracking and updating component state with AgentBridge.</p> <pre><code>import React from 'react';\nimport { useAgentComponentState } from '@agentbridge/react';\n\nfunction Counter({ id }) {\n  // Create agent-aware state\n  const [count, setCount] = useAgentComponentState(id, 'count', 0);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Counter: {count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Increment\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count - 1)}&gt;\n        Decrement\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#advanced-hooks","title":"Advanced Hooks","text":""},{"location":"web/react/hooks/#useagentcomponenteffect","title":"useAgentComponentEffect","text":"<p>A hook for running effects when a component is registered or updated.</p> <pre><code>import React, { useState } from 'react';\nimport { useAgentComponent, useAgentComponentEffect } from '@agentbridge/react';\n\nfunction StatusMonitor({ id }) {\n  const [status, setStatus] = useState('idle');\n  const [logs, setLogs] = useState([]);\n\n  // Register the component\n  useAgentComponent(id, {\n    type: 'monitor',\n    properties: { status, logCount: logs.length },\n    actions: {\n      clearLogs: () =&gt; {\n        setLogs([]);\n        return true;\n      },\n      setStatus: (newStatus) =&gt; {\n        setStatus(newStatus);\n        return true;\n      }\n    }\n  });\n\n  // Run an effect when the component is updated\n  useAgentComponentEffect(id, () =&gt; {\n    // Add a log entry when status changes\n    if (status !== 'idle') {\n      const newLog = {\n        timestamp: new Date().toISOString(),\n        event: `Status changed to ${status}`\n      };\n      setLogs(prev =&gt; [...prev, newLog]);\n    }\n\n    // Cleanup function\n    return () =&gt; {\n      console.log('Component cleanup');\n    };\n  }, [status]);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Status: {status}&lt;/h2&gt;\n      &lt;div&gt;\n        &lt;h3&gt;Logs ({logs.length})&lt;/h3&gt;\n        &lt;ul&gt;\n          {logs.map((log, index) =&gt; (\n            &lt;li key={index}&gt;\n              {log.timestamp}: {log.event}\n            &lt;/li&gt;\n          ))}\n        &lt;/ul&gt;\n        &lt;button onClick={() =&gt; setLogs([])}&gt;\n          Clear Logs\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#useagentfunctioncall","title":"useAgentFunctionCall","text":"<p>A hook for calling functions registered with AgentBridge.</p> <pre><code>import React, { useState } from 'react';\nimport { useAgentFunctionCall } from '@agentbridge/react';\n\nfunction WeatherDisplay() {\n  const [location, setLocation] = useState('London');\n  const [units, setUnits] = useState('metric');\n\n  // Use the hook to call a function\n  const { \n    data, \n    loading, \n    error, \n    call: getWeather \n  } = useAgentFunctionCall('getWeather');\n\n  const handleGetWeather = () =&gt; {\n    getWeather({ location, units });\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;input \n          value={location} \n          onChange={(e) =&gt; setLocation(e.target.value)} \n          placeholder=\"Location\"\n        /&gt;\n        &lt;select \n          value={units} \n          onChange={(e) =&gt; setUnits(e.target.value)}\n        &gt;\n          &lt;option value=\"metric\"&gt;Celsius&lt;/option&gt;\n          &lt;option value=\"imperial\"&gt;Fahrenheit&lt;/option&gt;\n        &lt;/select&gt;\n        &lt;button onClick={handleGetWeather} disabled={loading}&gt;\n          {loading ? 'Loading...' : 'Get Weather'}\n        &lt;/button&gt;\n      &lt;/div&gt;\n\n      {error &amp;&amp; (\n        &lt;div className=\"error\"&gt;\n          Error: {error.message}\n        &lt;/div&gt;\n      )}\n\n      {data &amp;&amp; (\n        &lt;div className=\"weather-data\"&gt;\n          &lt;h3&gt;Weather for {data.location}&lt;/h3&gt;\n          &lt;div&gt;Temperature: {data.temperature}\u00b0{units === 'metric' ? 'C' : 'F'}&lt;/div&gt;\n          &lt;div&gt;Conditions: {data.conditions}&lt;/div&gt;\n          &lt;div&gt;Humidity: {data.humidity}%&lt;/div&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#useagentcomponentquery","title":"useAgentComponentQuery","text":"<p>A hook for querying registered components.</p> <pre><code>import React from 'react';\nimport { useAgentComponentQuery } from '@agentbridge/react';\n\nfunction ComponentExplorer() {\n  // Get all button components\n  const buttonComponents = useAgentComponentQuery({ type: 'button' });\n\n  // Get all components with a specific tag\n  const navigationComponents = useAgentComponentQuery({ tags: ['navigation'] });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Button Components&lt;/h2&gt;\n      &lt;ul&gt;\n        {buttonComponents.map(component =&gt; (\n          &lt;li key={component.id}&gt;\n            {component.id}: {component.properties.label || 'Unlabeled'}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n\n      &lt;h2&gt;Navigation Components&lt;/h2&gt;\n      &lt;ul&gt;\n        {navigationComponents.map(component =&gt; (\n          &lt;li key={component.id}&gt;\n            {component.id} ({component.type})\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#combining-hooks","title":"Combining Hooks","text":"<p>Hooks can be combined for more complex scenarios:</p> <pre><code>import React, { useState } from 'react';\nimport { \n  useAgentBridge, \n  useAgentComponent, \n  useAgentFunction \n} from '@agentbridge/react';\n\nfunction TodoManager({ id }) {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const { componentCount } = useAgentBridge();\n\n  // Register the component\n  useAgentComponent(id, {\n    type: 'todo-manager',\n    properties: {\n      todoCount: todos.length,\n      todos: todos.map(todo =&gt; ({ text: todo.text, completed: todo.completed }))\n    },\n    actions: {\n      addTodo: (text) =&gt; {\n        if (text) {\n          setTodos(prev =&gt; [...prev, { text, completed: false }]);\n          setNewTodo('');\n          return true;\n        }\n        return false;\n      },\n      clearCompleted: () =&gt; {\n        setTodos(prev =&gt; prev.filter(todo =&gt; !todo.completed));\n        return true;\n      },\n      toggleTodo: (index) =&gt; {\n        if (index &gt;= 0 &amp;&amp; index &lt; todos.length) {\n          setTodos(prev =&gt; prev.map((todo, i) =&gt; \n            i === index ? { ...todo, completed: !todo.completed } : todo\n          ));\n          return true;\n        }\n        return false;\n      }\n    }\n  });\n\n  // Register a function\n  useAgentFunction({\n    name: 'getTodoStats',\n    description: 'Get statistics about todos',\n    parameters: {},\n    handler: async () =&gt; {\n      const completed = todos.filter(todo =&gt; todo.completed).length;\n      const total = todos.length;\n\n      return {\n        total,\n        completed,\n        remaining: total - completed,\n        percentComplete: total &gt; 0 ? (completed / total) * 100 : 0\n      };\n    }\n  });\n\n  return (\n    &lt;div className=\"todo-manager\"&gt;\n      &lt;h2&gt;Todo Manager&lt;/h2&gt;\n      &lt;p&gt;Total Registered Components: {componentCount}&lt;/p&gt;\n\n      &lt;div className=\"add-todo\"&gt;\n        &lt;input\n          value={newTodo}\n          onChange={(e) =&gt; setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo\"\n          onKeyPress={(e) =&gt; {\n            if (e.key === 'Enter' &amp;&amp; newTodo) {\n              setTodos(prev =&gt; [...prev, { text: newTodo, completed: false }]);\n              setNewTodo('');\n            }\n          }}\n        /&gt;\n        &lt;button \n          onClick={() =&gt; {\n            if (newTodo) {\n              setTodos(prev =&gt; [...prev, { text: newTodo, completed: false }]);\n              setNewTodo('');\n            }\n          }}\n        &gt;\n          Add\n        &lt;/button&gt;\n      &lt;/div&gt;\n\n      &lt;ul className=\"todo-list\"&gt;\n        {todos.map((todo, index) =&gt; (\n          &lt;li key={index} className={todo.completed ? 'completed' : ''}&gt;\n            &lt;input\n              type=\"checkbox\"\n              checked={todo.completed}\n              onChange={() =&gt; {\n                setTodos(prev =&gt; prev.map((t, i) =&gt; \n                  i === index ? { ...t, completed: !t.completed } : t\n                ));\n              }}\n            /&gt;\n            &lt;span&gt;{todo.text}&lt;/span&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n\n      {todos.some(todo =&gt; todo.completed) &amp;&amp; (\n        &lt;button \n          onClick={() =&gt; setTodos(prev =&gt; prev.filter(todo =&gt; !todo.completed))}\n        &gt;\n          Clear Completed\n        &lt;/button&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/hooks/#best-practices","title":"Best Practices","text":"<ol> <li>Dependency arrays: Make sure to include all dependencies in useEffect hooks to prevent stale closures</li> <li>Unique IDs: Always use unique IDs for components</li> <li>Cleanup on unmount: Register cleanup functions when using useAgentComponent</li> <li>Consistent naming: Use consistent naming across your components and functions</li> <li>Type safety: Use TypeScript interfaces for better type checking</li> </ol>"},{"location":"web/react/hooks/#next-steps","title":"Next Steps","text":"<ul> <li>See the Components documentation for detailed component API reference</li> <li>Explore the Core API for more information on the underlying functionality</li> </ul>"},{"location":"web/react/overview/","title":"React SDK Overview","text":"<p>The AgentBridge React SDK provides hooks, components, and utilities that make it easy to integrate the AgentBridge framework with React applications. This SDK is designed to work seamlessly with your existing React codebase.</p>"},{"location":"web/react/overview/#features","title":"Features","text":"<ul> <li>React Components: Ready-to-use React components that can be controlled by AI agents</li> <li>Hooks API: React hooks for component registration and function management</li> <li>Context Provider: React context provider for easy access to AgentBridge functionality</li> <li>HOCs: Higher-order components for component registration</li> <li>TypeScript Support: Full TypeScript support with type definitions</li> <li>State Synchronization: Automatic synchronization of component state</li> </ul>"},{"location":"web/react/overview/#installation","title":"Installation","text":"<p>Install the AgentBridge React SDK and core package:</p> <pre><code>npm install @agentbridge/core @agentbridge/react\n</code></pre> <p>Also install one of the communication providers:</p> <pre><code># If using Ably\nnpm install @agentbridge/provider-ably\n\n# If using Firebase\nnpm install @agentbridge/provider-firebase\n\n# If using Pusher\nnpm install @agentbridge/provider-pusher\n\n# If using Supabase\nnpm install @agentbridge/provider-supabase\n</code></pre>"},{"location":"web/react/overview/#basic-setup","title":"Basic Setup","text":"<p>To get started with AgentBridge in your React application, wrap your app with the <code>AgentBridgeProvider</code>:</p> <pre><code>import React from 'react';\nimport { AgentBridgeProvider } from '@agentbridge/react';\nimport { AblyProvider } from '@agentbridge/provider-ably';\n\n// Create a communication provider\nconst ablyProvider = new AblyProvider({\n  apiKey: 'your-ably-api-key',\n});\n\nfunction App() {\n  return (\n    &lt;AgentBridgeProvider \n      applicationId=\"your-app-id\"\n      communicationProvider={ablyProvider}\n    &gt;\n      {/* Your app components */}\n      &lt;YourComponents /&gt;\n    &lt;/AgentBridgeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"web/react/overview/#using-agentbridge-components","title":"Using AgentBridge Components","text":"<p>The React SDK provides several pre-built components that can be controlled by AI agents:</p> <pre><code>import React, { useState } from 'react';\nimport { \n  AgentButton, \n  AgentTextField, \n  AgentSwitch \n} from '@agentbridge/react';\n\nfunction MyForm() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [subscribe, setSubscribe] = useState(false);\n\n  const handleSubmit = () =&gt; {\n    console.log({ name, email, subscribe });\n    // Handle form submission\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Contact Form&lt;/h2&gt;\n\n      &lt;AgentTextField \n        id=\"name-input\"\n        label=\"Your Name\"\n        value={name}\n        onChange={(e) =&gt; setName(e.target.value)}\n      /&gt;\n\n      &lt;AgentTextField \n        id=\"email-input\"\n        label=\"Email Address\"\n        value={email}\n        onChange={(e) =&gt; setEmail(e.target.value)}\n        type=\"email\"\n      /&gt;\n\n      &lt;AgentSwitch \n        id=\"subscribe-switch\"\n        label=\"Subscribe to newsletter\"\n        checked={subscribe}\n        onChange={(checked) =&gt; setSubscribe(checked)}\n      /&gt;\n\n      &lt;AgentButton \n        id=\"submit-button\"\n        label=\"Submit\"\n        onClick={handleSubmit}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/overview/#registering-custom-components","title":"Registering Custom Components","text":"<p>You can register your own React components to be controlled by AI agents:</p>"},{"location":"web/react/overview/#using-the-useagentcomponent-hook","title":"Using the useAgentComponent Hook","text":"<pre><code>import React, { useState } from 'react';\nimport { useAgentComponent } from '@agentbridge/react';\n\nfunction CustomCard({ id, title, description, onAction }) {\n  const [expanded, setExpanded] = useState(false);\n\n  // Register this component with AgentBridge\n  useAgentComponent(id, {\n    // Define the component properties that agents can access\n    properties: {\n      title,\n      description,\n      expanded,\n    },\n    // Define actions that agents can perform\n    actions: {\n      expand: () =&gt; {\n        setExpanded(true);\n        return true;\n      },\n      collapse: () =&gt; {\n        setExpanded(false);\n        return true;\n      },\n      trigger: () =&gt; {\n        if (onAction) onAction();\n        return true;\n      }\n    }\n  });\n\n  return (\n    &lt;div className=\"custom-card\"&gt;\n      &lt;h3&gt;{title}&lt;/h3&gt;\n      {expanded &amp;&amp; &lt;p&gt;{description}&lt;/p&gt;}\n      &lt;button onClick={() =&gt; setExpanded(!expanded)}&gt;\n        {expanded ? 'Collapse' : 'Expand'}\n      &lt;/button&gt;\n      {onAction &amp;&amp; (\n        &lt;button onClick={onAction}&gt;\n          Trigger Action\n        &lt;/button&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/overview/#using-the-withagentcomponent-hoc","title":"Using the withAgentComponent HOC","text":"<pre><code>import React, { useState } from 'react';\nimport { withAgentComponent } from '@agentbridge/react';\n\nfunction CustomCard({ \n  title, \n  description, \n  onAction, \n  registerAgentAction \n}) {\n  const [expanded, setExpanded] = useState(false);\n\n  // Register actions with the HOC\n  React.useEffect(() =&gt; {\n    registerAgentAction('expand', () =&gt; {\n      setExpanded(true);\n      return true;\n    });\n\n    registerAgentAction('collapse', () =&gt; {\n      setExpanded(false);\n      return true;\n    });\n\n    registerAgentAction('trigger', () =&gt; {\n      if (onAction) onAction();\n      return true;\n    });\n  }, [onAction, registerAgentAction]);\n\n  return (\n    &lt;div className=\"custom-card\"&gt;\n      &lt;h3&gt;{title}&lt;/h3&gt;\n      {expanded &amp;&amp; &lt;p&gt;{description}&lt;/p&gt;}\n      &lt;button onClick={() =&gt; setExpanded(!expanded)}&gt;\n        {expanded ? 'Collapse' : 'Expand'}\n      &lt;/button&gt;\n      {onAction &amp;&amp; (\n        &lt;button onClick={onAction}&gt;\n          Trigger Action\n        &lt;/button&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n\n// Wrap with the HOC\nexport default withAgentComponent(CustomCard, {\n  getAgentProperties: (props, state) =&gt; ({\n    title: props.title,\n    description: props.description,\n    expanded: state.expanded,\n  })\n});\n</code></pre>"},{"location":"web/react/overview/#registering-functions","title":"Registering Functions","text":"<p>You can register functions that AI agents can call:</p> <pre><code>import React from 'react';\nimport { useAgentBridge } from '@agentbridge/react';\n\nfunction FunctionDemo() {\n  const { registerFunction } = useAgentBridge();\n\n  React.useEffect(() =&gt; {\n    // Register a function with AgentBridge\n    registerFunction({\n      name: 'getWeather',\n      description: 'Get weather information for a location',\n      parameters: {\n        type: 'object',\n        properties: {\n          location: { type: 'string' },\n          units: { type: 'string', enum: ['metric', 'imperial'] }\n        },\n        required: ['location']\n      },\n      handler: async (params) =&gt; {\n        const { location, units = 'metric' } = params;\n\n        // Implementation (replace with actual API call)\n        console.log(`Getting weather for ${location} in ${units}`);\n\n        return {\n          location,\n          temperature: 22,\n          conditions: 'sunny',\n          humidity: 45,\n          units\n        };\n      }\n    });\n  }, [registerFunction]);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Weather Function Registered&lt;/h2&gt;\n      &lt;p&gt;The AI agent can now call the getWeather function.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/overview/#using-the-agentbridge-context","title":"Using the AgentBridge Context","text":"<p>The <code>useAgentBridge</code> hook provides access to the AgentBridge context:</p> <pre><code>import React from 'react';\nimport { useAgentBridge } from '@agentbridge/react';\n\nfunction BridgeStatus() {\n  const { \n    isConnected, \n    connectionStatus, \n    componentCount,\n    functionCount,\n    applicationId\n  } = useAgentBridge();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;AgentBridge Status&lt;/h2&gt;\n      &lt;ul&gt;\n        &lt;li&gt;Connected: {isConnected ? 'Yes' : 'No'}&lt;/li&gt;\n        &lt;li&gt;Status: {connectionStatus}&lt;/li&gt;\n        &lt;li&gt;Components: {componentCount}&lt;/li&gt;\n        &lt;li&gt;Functions: {functionCount}&lt;/li&gt;\n        &lt;li&gt;App ID: {applicationId}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/overview/#advanced-usage","title":"Advanced Usage","text":""},{"location":"web/react/overview/#custom-communication-provider","title":"Custom Communication Provider","text":"<p>You can implement a custom communication provider by implementing the <code>CommunicationProvider</code> interface:</p> <pre><code>import { CommunicationProvider } from '@agentbridge/core';\n\nclass CustomProvider implements CommunicationProvider {\n  // Implement required methods\n  // ...\n}\n\n// Then use it with the provider\nconst customProvider = new CustomProvider();\n\n&lt;AgentBridgeProvider\n  communicationProvider={customProvider}\n&gt;\n  {/* ... */}\n&lt;/AgentBridgeProvider&gt;\n</code></pre>"},{"location":"web/react/overview/#component-composition","title":"Component Composition","text":"<p>You can compose multiple agent-aware components together:</p> <pre><code>import React from 'react';\nimport { AgentButton, AgentTextField } from '@agentbridge/react';\nimport CustomCard from './CustomCard';\n\nfunction CompositePage() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;My Dashboard&lt;/h1&gt;\n\n      &lt;CustomCard\n        id=\"welcome-card\"\n        title=\"Welcome to AgentBridge\"\n        description=\"This card can be controlled by AI agents.\"\n        onAction={() =&gt; console.log('Card action triggered')}\n      /&gt;\n\n      &lt;div&gt;\n        &lt;AgentTextField\n          id=\"search-input\"\n          label=\"Search\"\n          placeholder=\"Search items...\"\n        /&gt;\n\n        &lt;AgentButton\n          id=\"search-button\"\n          label=\"Search\"\n          onClick={() =&gt; console.log('Search clicked')}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"web/react/overview/#next-steps","title":"Next Steps","text":"<ul> <li>See the Components documentation for detailed component API reference</li> <li>Learn more about Hooks provided by the React SDK</li> <li>Explore the Core API</li> </ul>"}]}