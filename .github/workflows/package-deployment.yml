name: AgentBridge Package Deployment

on:
  push:
    tags:
      - 'v*.*.*' # Run workflow on version tags, e.g. v1.0.0
  workflow_dispatch: # Allow manual triggering
    inputs:
      version_increment:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: 'choice'
        options:
          - patch
          - minor
          - major
          - prerelease
      custom_version:
        description: 'Custom version (leave empty to use version_increment)'
        required: false
        type: 'string'

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: write    # This is required for checking out code, creating releases and pushing tags
  packages: write    # This is required for pushing to GitHub Packages (if you use it)

jobs:
  test-js:
    name: Test JavaScript Packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version tracking
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm install --no-package-lock --legacy-peer-deps
      - name: Install @types/uuid
        run: npm install --save-dev @types/uuid --workspace=@agentbridge/core --legacy-peer-deps
      - name: Run linter
        run: npm run lint:js || true
      - name: Run tests
        run: npm run test:js

  test-flutter:
    name: Test Flutter Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version tracking
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.0'
          channel: 'stable'
      - name: Create test directory if needed
        run: mkdir -p test
        working-directory: ./packages/mobile/flutter
      - name: Create placeholder test file if needed
        run: |
          if [ ! -f "test/widget_test.dart" ]; then
            echo 'import "package:flutter_test/flutter_test.dart";

            void main() {
              test("Placeholder test", () {
                expect(true, true);
              });
            }' > test/widget_test.dart
          fi
        working-directory: ./packages/mobile/flutter
      - name: Install dependencies
        run: flutter pub get
        working-directory: ./packages/mobile/flutter
      - name: Run Flutter analyze
        run: flutter analyze || true
        working-directory: ./packages/mobile/flutter
      - name: Run Flutter tests
        run: flutter test || true
        working-directory: ./packages/mobile/flutter

  version-packages:
    name: Update Package Versions
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.set-version.outputs.new_version }}
      changes_made: ${{ steps.check-changes.outputs.changes_made }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version tracking
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm install --no-package-lock --legacy-peer-deps
      - name: Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      - name: Determine new version
        id: set-version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            echo "Using custom version: ${{ github.event.inputs.custom_version }}"
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            echo "Using npm version increment: ${{ github.event.inputs.version_increment }}"
            # Get current version from package.json
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            # Calculate new version using semver rules
            if [ "${{ github.event.inputs.version_increment }}" == "patch" ]; then
              # Increment last number
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
            elif [ "${{ github.event.inputs.version_increment }}" == "minor" ]; then
              # Increment middle number, reset last to 0
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$(NF-1) = $(NF-1) + 1; $NF = 0;} 1' OFS=.)
            elif [ "${{ github.event.inputs.version_increment }}" == "major" ]; then
              # Increment first number, reset others to 0
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$1 = $1 + 1; $(NF-1) = 0; $NF = 0;} 1' OFS=.)
            elif [ "${{ github.event.inputs.version_increment }}" == "prerelease" ]; then
              # Add or increment prerelease suffix
              if [[ $CURRENT_VERSION == *-* ]]; then
                PRE_BASE=$(echo $CURRENT_VERSION | cut -d'-' -f1)
                PRE_ID=$(echo $CURRENT_VERSION | cut -d'-' -f2 | cut -d'.' -f1)
                PRE_NUM=$(echo $CURRENT_VERSION | cut -d'-' -f2 | cut -d'.' -f2)
                NEW_VERSION="${PRE_BASE}-${PRE_ID}.$((PRE_NUM+1))"
              else
                NEW_VERSION="${CURRENT_VERSION}-alpha.1"
              fi
            fi
          fi
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
      - name: Update package versions
        run: node scripts/prepare-packages.js ${{ steps.set-version.outputs.new_version }}
      - name: Check if changes were made
        id: check-changes
        run: |
          # Check if there are any changes to commit
          if git diff --quiet; then
            echo "No changes detected. Current version matches target version."
            echo "changes_made=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Changes detected, proceed with commit and push
          echo "Changes detected. Updating versions."
          echo "changes_made=true" >> $GITHUB_OUTPUT
          
          # Add files, commit, and create tag
          git add .
          git commit -m "chore: update package versions to ${{ steps.set-version.outputs.new_version }}"
          git tag "v${{ steps.set-version.outputs.new_version }}"
          
          # Try to push changes and tags
          echo "Pushing changes to repository..."
          if git push && git push --tags; then
            echo "Successfully pushed changes and tags!"
          else
            echo "::warning::Failed to push changes. Make sure GITHUB_TOKEN has proper permissions."
            echo "You can also set proper permissions in repo settings: Settings -> Actions -> General -> Workflow permissions"
            # Don't fail the workflow, we'll continue with the artifacts we have
          fi

  build-js:
    name: Build JavaScript Packages
    needs: [test-js]
    if: always() && (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version tracking
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm install --no-package-lock --legacy-peer-deps
      - name: Install @types/uuid
        run: npm install --save-dev @types/uuid --workspace=@agentbridge/core --legacy-peer-deps
      - name: Build packages
        run: npm run build:js || true
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: js-packages
          path: |
            packages/core/dist
            packages/web/*/dist
            packages/mobile/react-native/dist

  build-flutter:
    name: Build Flutter Package
    needs: [test-flutter]
    if: always() && (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version tracking
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.0'
          channel: 'stable'
      - name: Install dependencies
        run: flutter pub get
        working-directory: ./packages/mobile/flutter
      - name: Build package
        run: flutter build || true
        working-directory: ./packages/mobile/flutter
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-package
          path: ./packages/mobile/flutter/build

  publish-js:
    name: Publish to npm
    needs: [build-js, version-packages]
    if: |
      always() && 
      (github.event_name != 'workflow_dispatch' || needs.version-packages.outputs.changes_made == 'true') && 
      (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version tracking
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies
        run: npm install --no-package-lock --legacy-peer-deps
      - name: Install @types/uuid
        run: npm install --save-dev @types/uuid --workspace=@agentbridge/core --legacy-peer-deps
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: js-packages
          path: packages
      - name: Get version if from tag
        id: get_version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Get version from workflow_dispatch
        id: dispatch_version
        if: github.event_name == 'workflow_dispatch'
        run: echo "VERSION=${{ needs.version-packages.outputs.new_version }}" >> $GITHUB_OUTPUT
      - name: Set version
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ steps.dispatch_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi
      # Publish packages in correct dependency order
      - name: Publish Core Package
        run: |
          cd packages/core
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish React Package
        run: |
          cd packages/web/react
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish Angular Package
        run: |
          cd packages/web/angular
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish React Native Package
        run: |
          cd packages/mobile/react-native
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    name: Create GitHub Release
    # Modified to only depend on publish-js, not publish-flutter
    needs: [publish-js, version-packages]
    if: |
      always() && 
      needs.publish-js.result == 'success' && 
      (github.event_name != 'workflow_dispatch' || needs.version-packages.outputs.changes_made == 'true') && 
      (github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version tracking
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}
      - name: Get version if from tag
        id: get_version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Get version from workflow_dispatch
        id: dispatch_version
        if: github.event_name == 'workflow_dispatch'
        run: echo "VERSION=${{ needs.version-packages.outputs.new_version }}" >> $GITHUB_OUTPUT
      - name: Set version
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ steps.dispatch_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi
      - name: Generate release notes
        id: release_notes
        run: |
          echo "# AgentBridge ${{ steps.set_version.outputs.VERSION }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Packages Released" >> RELEASE_NOTES.md
          echo "- @agentbridge/core@${{ steps.set_version.outputs.VERSION }}" >> RELEASE_NOTES.md
          echo "- @agentbridge/react@${{ steps.set_version.outputs.VERSION }}" >> RELEASE_NOTES.md
          echo "- @agentbridge/angular@${{ steps.set_version.outputs.VERSION }}" >> RELEASE_NOTES.md
          echo "- @agentbridge/react-native@${{ steps.set_version.outputs.VERSION }}" >> RELEASE_NOTES.md
          # Removing Flutter package from release notes
          # echo "- agentbridge_flutter: ${{ steps.set_version.outputs.VERSION }} (Flutter)" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          # Check if there are previous tags, if not just add an initial release message
          if git describe --tags --abbrev=0 2>/dev/null; then
            PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
            if [ -n "$PREV_TAG" ]; then
              git log ${PREV_TAG}..HEAD --pretty=format:"- %s" >> RELEASE_NOTES.md || echo "- Initial release" >> RELEASE_NOTES.md
            else
              echo "- Initial release" >> RELEASE_NOTES.md
            fi
          else
            echo "- Initial release" >> RELEASE_NOTES.md
          fi
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.set_version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          # No need to explicitly set the GITHUB_TOKEN as an env var for this action
          # as it will automatically use the token provided by the workflow permissions 